{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail-details/sw-order-detail-details.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/page/swag-paypal-payment-detail/swag-paypal-payment-detail.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-hint/swag-paypal-settings-hint.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-getting-started/swag-paypal-pos-getting-started.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/component/swag-paypal-campaign-banner/swag-paypal-campaign-banner.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-detail/sw-sales-channel-modal-detail.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/sw-dashboard-index/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/sw-dashboard-index/sw-dashboard-index.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/component/swag-paypal-campaign-banner/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/component/swag-paypal-campaign-banner/swag-paypal-campaign-banner.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-first-run-wizard/sw-first-run-wizard-paypal-credentials/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-first-run-wizard/sw-first-run-wizard-paypal-credentials/sw-first-run-wizard-paypal-credentials.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-detail/sw-sales-channel-modal-detail.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/constant/swag-paypal.constant.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-detail/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-grid/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-grid/sw-sales-channel-modal-grid.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/components/swag-paypal-overview-card/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/components/swag-paypal-overview-card/swag-paypal-overview-card.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-list/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-list/sw-settings-payment-list.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-detail/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-detail/sw-settings-payment-detail.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-shipping/sw-settings-shipping-detail/sw-settings-shipping-detail.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-shipping/sw-settings-shipping-detail/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/swag-paypal-consts.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/swag-paypal.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-hint/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-hint/swag-paypal-settings-hint.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-acdc/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-acdc/swag-paypal-acdc.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-behavior/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-behavior/swag-paypal-behavior.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout/swag-paypal-checkout.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout-method/swag-paypal-checkout-method.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout-method/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-created-component-helper/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-created-component-helper/swag-paypal-created-component-helper.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-credentials/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-credentials/swag-paypal-credentials.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-cross-border/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-cross-border/swag-paypal-cross-border.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-express/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-express/swag-paypal-express.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-installment/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-installment/swag-paypal-installment.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plus/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plus/swag-paypal-plus.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-pui/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-pui/swag-paypal-pui.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-icon/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-icon/swag-paypal-settings-icon.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-spb/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-spb/swag-paypal-spb.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plugin-box-with-onboarding/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plugin-box-with-onboarding/sw-plugin-box-with-onboarding.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-locale-field/swag-paypal-locale-field.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-locale-field/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/swag-paypal-payment-actions.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-capture/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-capture/swag-paypal-payment-action-capture.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-refund/swag-paypal-payment-action-refund.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/swag-paypal-payment-consts.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-refund/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-void/swag-paypal-payment-action-void.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-void/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/swag-paypal-payment-actions-v2.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-capture/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-capture/swag-paypal-payment-action-v2-capture.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-refund/swag-paypal-payment-action-v2-refund.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v2/swag-paypal-order-consts.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-refund/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-void/swag-paypal-payment-action-v2-void.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-void/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v1/swag-paypal-payment-details-v1.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v1/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v2/swag-paypal-payment-details-v2.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v2/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-pui-details/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-pui-details/swag-paypal-pui-details.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-text-field/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-text-field/swag-paypal-text-field.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-textarea-field/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-textarea-field/swag-paypal-textarea-field.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail/sw-order-detail.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail-details/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail-details/sw-order-detail-details.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-user-card/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-user-card/sw-order-user-card.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/page/swag-paypal-payment-detail/swag-paypal-payment-detail.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/page/swag-paypal-payment-detail/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-api-credentials.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-pos-setting.api.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-pos.api.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-pos-webhook-register.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-payment.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-order.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-payment-method.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-dispute.api.service.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/init/api-service.init.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/init/translation.init.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/app/assets/icons/icons.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/init/svg-icons.init.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status/swag-paypal-pos-status.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-account/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-account/swag-paypal-pos-account.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status-view/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status-view/swag-paypal-pos-status-view.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-boolean-radio/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-boolean-radio/swag-paypal-pos-boolean-radio.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-detail-logs/swag-paypal-pos-detail-logs.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-detail-logs/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-getting-started/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-getting-started/swag-paypal-pos-getting-started.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-continue-setup/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-continue-setup/swag-paypal-pos-continue-setup.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/extension/sw-sales-channel-menu/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/extension/sw-sales-channel-modal/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos/swag-paypal-pos.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-synced-products/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-synced-products/swag-paypal-pos-detail-synced-products.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-overview/swag-paypal-pos-detail-overview.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-overview/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-settings/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-settings/swag-paypal-pos-detail-settings.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-runs/swag-paypal-pos-detail-runs.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-runs/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard/swag-paypal-pos-wizard.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection/swag-paypal-pos-wizard-connection.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-success/swag-paypal-pos-wizard-connection-success.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-success/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-disconnect/swag-paypal-pos-wizard-connection-disconnect.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-disconnect/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-customization/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-customization/swag-paypal-pos-wizard-customization.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-product-selection/swag-paypal-pos-wizard-product-selection.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-product-selection/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-prices/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-prices/swag-paypal-pos-wizard-sync-prices.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-library/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-library/swag-paypal-pos-wizard-sync-library.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-finish/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-finish/swag-paypal-pos-wizard-finish.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-detail/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-detail/swag-paypal-disputes-detail.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/swag-paypal-disputes-list.html.twig","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/swag-paypal-disputes-consts.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/mixin/swag-paypal-pos-catch-error.mixin.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-locale-field/swag-paypal-locale-field.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-cross-border/swag-paypal-cross-border.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/app/assets/icons/svg sync nonrecursive svg$","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/acl/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-overview/swag-paypal-pos-detail-overview.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-pui-details/swag-paypal-pui-details.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-account/swag-paypal-pos-account.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-user-card/sw-order-user-card.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/swag-paypal-payment-actions-v2.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-prices/swag-paypal-pos-wizard-sync-prices.scss","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-continue-setup/swag-paypal-pos-continue-setup.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos/swag-paypal-pos.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout-method/swag-paypal-checkout-method.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/mixin/swag-paypal-credentials-loader.mixin.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/acl/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-customization/swag-paypal-pos-wizard-customization.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-detail/swag-paypal-disputes-detail.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-detail/sw-settings-payment-detail.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout/swag-paypal-checkout.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status/swag-paypal-pos-status.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/swag-paypal-payment-actions.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-url-field/index.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/mixin/swag-paypal-pos-log-label.mixin.js","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-boolean-radio/swag-paypal-pos-boolean-radio.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-library/swag-paypal-pos-wizard-sync-library.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/swag-paypal.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/swag-paypal-disputes-list.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-finish/swag-paypal-pos-wizard-finish.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-synced-products/swag-paypal-pos-detail-synced-products.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-list/sw-settings-payment-list.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-detail-logs/swag-paypal-pos-detail-logs.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plus/swag-paypal-plus.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-success/swag-paypal-pos-wizard-connection-success.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard/swag-paypal-pos-wizard.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-first-run-wizard/sw-first-run-wizard-paypal-credentials/sw-first-run-wizard-paypal-credentials.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/app/assets/icons/svg/icons-paypal-multicolor.svg","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-icon/swag-paypal-settings-icon.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-disconnect/swag-paypal-pos-wizard-connection-disconnect.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-grid/sw-sales-channel-modal-grid.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-settings/swag-paypal-pos-detail-settings.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-shipping/sw-settings-shipping-detail/sw-settings-shipping-detail.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection/swag-paypal-pos-wizard-connection.scss","webpack:////tmp/extension1378102519/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-runs/swag-paypal-pos-detail-runs.scss"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","content","default","locals","add","Shopware","Component","override","template","inject","data","payPalSystemConfig","computed","showPayPalBanner","this","Date","methods","createdComponent","_this","$super","systemConfigApiService","getValues","then","config","register","i18n","messages","title","text","labelText","linkTitle","closed","$tc","timePrefix","concat","showLabel","assetFilter","Filter","getByName","currentLocale","State","image","suffix","cardClasses","localStorageKey","created","window","localStorage","getItem","close","setItem","mixins","isLoading","setDefault","sandboxMode","onboardingUrl","onboardingUrlSandbox","onboardingUrlLive","onboardingCallback","buttonConfig","reduce","acc","button","action","onClickNext","_toConsumableArray","credentialsProvided","credentialsProvidedLive","credentialsProvidedSandbox","fetchPayPalConfig","onPayPalCredentialsLoadSuccess","clientId","clientSecret","merchantPayerId","sandbox","setConfig","onPayPalCredentialsLoadFailed","createNotificationError","message","duration","$set","_this2","isGetCredentialsSuccessful","saveConfig","$emit","Promise","resolve","catch","testApiCredentials","_this3","values","finally","_this4","saveValues","SwagPaypalPaymentMethodService","setDefaultPaymentForSalesChannel","_this5","sandboxSetting","SwagPayPalApiCredentialsService","validateApiCredentials","response","credentialsValid","reject","errorResponse","errors","map","error","detail","join","onCredentialsChanged","PAYPAL_POS_SALES_CHANNEL_TYPE_ID","PAYPAL_POS_SALES_CHANNEL_EXTENSION","isPayPalPosSalesChannel","salesChannelTypeId","salesChannelTypes","find","type","id","_regeneratorRuntime","Op","hasOwn","obj","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","record","result","_typeof","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","val","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","props","paymentMethods","Array","required","salesChannels","pluginId","save","_callee","errorMessage","_context","$refs","swagPayPalConfigComponent","payPalWebhookErrors","swagPayPalCheckoutComponent","getPaymentMethodsAndMerchantIntegrations","args","arguments","apply","onChangeLoading","merchantIntegrations","needsOnboarding","item","includes","toUpperCase","fetchMerchantIntegrations","getMerchantInformation","_response$merchantInt","disableActiveSwitch","acl","can","paymentMethod","_Shopware","Utils","isPayPalEnabled","shippingMethodCustomFields","shippingMethod","customFields","payPalDefaultCarrier","swag_paypal_carrier","set","MERCHANT_LOCATION_GERMANY","MERCHANT_LOCATION_OTHER","Defaults","Criteria","Data","_objectSpread","isSaveSuccessful","isTestSuccessful","isTestSandboxSuccessful","clientIdFilled","clientSecretFilled","clientIdSandboxFilled","clientSecretSandboxFilled","sandboxChecked","isSetDefaultPaymentSuccessful","isSettingDefaultPaymentMethods","savingDisabled","messageBlankErrorState","showCredentials","allowShowCredentials","constants","metaInfo","$createTitle","showSPBCard","_this$$refs$configCom","defaultConfig","configComponent","allConfigs","null","showPlusCard","_this$$refs$configCom2","salesChannelRepository","repositoryFactory","clientIdErrorState","clientSecretErrorState","clientIdSandboxErrorState","clientSecretSandboxErrorState","hasError","salesChannelCriteria","criteria","addFilter","equalsAny","storefrontSalesChannelTypeId","apiSalesChannelTypeId","tab","$route","params","watch","handler","_this$$refs$configCom3","_this$$refs$configCom4","_this$$refs$configCom5","selectedSalesChannelId","deep","$router","search","api","res","translated","code","onSave","onSetPaymentMethodDefault","_this$$refs$configCom6","preventSave","onChangeCredentialsVisibility","visibility","hintText","String","actualConfigData","checkBoolFieldInheritance","intentOptions","merchantLocationOptions","landingPageOptions","landingPageHint","landingPageOption","toLowerCase","translationKey","loggingLevelOptions","label","loggingLevel","productRepository","productStreamRepository","excludedProductCriteria","addAssociation","checkTextFieldInheritance","checkArrayFieldInheritance","isArray","_asyncToGenerator","Boolean","showSettingsLink","merchantInformation","legalName","primaryEmail","capabilities","plusDeprecationModalOpen","showHintMerchantIdMustBeEnteredManually","isLoadingPaymentMethods","paymentMethodRepository","paymentMethodCriteria","equals","addSorting","sort","isLive","isSandbox","liveButtonTitle","isOnboardingPPCPFinished","some","pm","onboardingStatus","sandboxButtonTitle","sandboxToggleDisabled","sepaPaymentMethod","formattedHandlerIdentifier","showMerchantInformation","showSandboxToggle","merchantEmail","_this$merchantInforma","primary_email","tracking_id","plusCheckoutEnabled","updateShowCredentials","deactivatePayPalPlus","_callee2","_context2","getPaymentMethods","_callee3","_context3","filter","_this6","_callee4","_context4","onChangePaymentMethodActive","_this7","active","createNotificationSuccess","closeModal","editLink","_this$onboardingStatu","paymentMethodToggleDisabled","showEditLink","statusBadgeVariant","variant","statusBadgeColor","onboardingStatusText","onboardingStatusTooltip","snippetKey","$te","availabilityToolTip","handlerElements","split","handlerName","isTestingLive","isTestingSandbox","isTestLiveSuccessful","testLiveButtonDisabled","testSandboxButtonDisabled","onTest","countryOverrideOptions","options","a","b","localeCompare","buttonColorOptions","buttonShapeOptions","renderSettingsDisabled","isPayPalPLUSActive","isPayPalPLUSInActive","ifItWasNotActive","extend","debounce","onInput","event","checkValue","target","onBlur","removeFocusClass","feature","isActive","exec","Module","description","version","targetVersion","color","icon","routes","index","component","path","meta","parentPath","privilege","settingsItem","group","to","iconComponent","backgroundEnabled","utils","paymentResource","maxCaptureValue","Number","orderId","isFinalCapture","captureValue","currency","transactions","amount","showHint","capture","captureAmount","resourceType","intent","resourceId","getResourceId","SwagPayPalPaymentService","capturePayment","$nextTick","replace","createId","autoClose","e","relatedResourceId","related_resources","relatedResource","authorization","order","REFUNDED_STATE","VOIDED_STATE","CAPTURED_STATE","COMPLETED_STATE","CAPTURE_RESOURCE_TYPE","SALE_RESOURCE_TYPE","FAILED_STATE","CANCELLED_STATE","captures","selectedCapture","existingRefunds","refundAmount","refundableAmount","refundDescription","refundReason","refundInvoiceNumber","selectedCaptureId","dateFilter","getRefundableCaptures","mapRefunds","preserveCapture","relatedResources","accumulator","sale","formatCapture","refund","resource","createDate","create_time","total","capture_id","sale_id","reason","invoiceNumber","refundPayment","voidPayment","firstRelatedResource","modalType","captureableAmount","showVoidButton","setPaymentActionAmounts","setShowVoidButton","formatAmount","spawnModal","nonVoidAbleStates","Math","round","paypalOrder","orderTransactionId","paypalPartnerAttributionId","captureInvoiceNumber","captureNoteToPayer","currencyCode","purchase_units","payments","authorizations","currency_code","SwagPayPalOrderService","captureAuthorization","ORDER_CAPTURE_REFUNDED","ORDER_AUTHORIZATION_CREATED","ORDER_AUTHORIZATION_PARTIALLY_CAPTURED","ORDER_AUTHORIZATION_PENDING","refundNoteToPayer","firstCapture","rawCaptures","refundableCaptures","status","setCapture","refundCapture","voidAuthorization","createDateTime","updateDateTime","payerId","relatedResourceColumns","rawData","formatDate","update_time","payer","payer_info","payer_id","setRelatedResources","rawRelatedResources","pushRelatedResource","transactionFee","transaction_fee","createRaw","update","paymentMode","payment_mode","dateTime","hour","minute","second","orderTransaction","paymentColumns","puiDetails","swag_paypal_pui_payment_instruction","_this$paypalOrder$pay","_this$paypalOrder$pay2","setPayments","rawAuthorizations","rawRefunds","refunds","pushPayment","authStatus","payment","getTransactionFee","sellerReceivableBreakdown","seller_receivable_breakdown","paypalFee","paypal_fee","sellerPayableBreakdown","seller_payable_breakdown","domUtils","dom","details","purchaseUnitAmount","copyText","bankName","iban","bic","accountHolderName","reference","deposit_bank_details","bank_name","account_holder_name","payment_reference","onCopy","_navigator","navigator","clipboard","copyToClipboard","writeText","isPayPalPayment","isEditable","orderRepository","orderCriteria","getAssociation","setLimit","transaction","last","immediate","isPayPalSandbox","_this$order","payPalResourceId","_this$transaction","_this$transaction$cus","swag_paypal_resource_id","payPalCarrier","_this$order$deliverie","_this$order2","_this$order2$deliveri","_this$order2$deliveri2","_this$order2$deliveri3","deliveries","first","payPalOrderLink","prefix","payPalCarrierDescription","orderLink","salesChannelConfig","salesChannelId","_this$currentOrder$tr","currentOrder","_this$delivery$shippi","_this$delivery","_this$delivery$shippi2","_this$delivery$shippi3","delivery","isEmpty","types","orderTransactionState","stateFailedCancelled","showCanceledPaymentError","showPayPalPayment","showPayPalOrder","showSandboxLiveError","showGeneralError","resetDataAttributes","emitIdentifier","stateMachineState","technicalName","paypalPaymentId","swag_paypal_transaction_id","handlePayPalPayment","paypalOrderId","swag_paypal_order_id","handlePayPalOrder","getOrderDetails","handleError","getPaymentDetails","orderNumber","routeMiddleware","currentRoute","children","isChildren","ApiService","Classes","_ApiService","_inherits","_super","_createSuper","httpClient","loginService","apiEndpoint","_classCallCheck","sandboxActive","headers","getBasicHeaders","getApiBasePath","handleResponse","authCode","sharedId","nonce","additionalParams","additionalHeaders","post","SwagPayPalPosSettingApiService","apiKey","salesChannel","forceLanguage","extensions","paypalPosSalesChannel","languageId","languages","assign","currencies","currencyId","countries","countryId","fromSalesChannelId","toSalesChannelId","cloneSalesChannelId","SwagPayPalPosApiService","basicConfig","timeout","runId","page","limit","SwagPayPalPosWebhookRegisterService","delete","payPalPaymentId","apiRoute","captureIsFinal","getDefaultOptions","captureId","noteToPayer","partnerAttributionId","doPostRequest","authorizationId","isFinal","requestParameters","apiVersion","SwagPayPalDisputeApiService","disputeStateFilter","disputeId","Application","initContainer","getContainer","addServiceProvider","container","Locale","deDeSnippets","enGBSnippets","require","functional","render","createElement","elementContext","class","staticClass","style","attrs","on","domProps","innerHTML","iconComponents","disabled","disabledText","iconAnimated","subIcon","showSubStatus","validValues","validator","subVariant","statusClasses","_ref","_defineProperty","iconClasses","subIconClasses","showSubIcon","lastRun","isError","merchantInfo","accountName","accountEmail","contactEmail","connectionStatusText","connectionStatusVariant","runRepository","loadMerchantData","fetchInformation","lastFinishedRun","lastCompleteRun","isSyncing","syncErrors","statusErrorLevel","statusCompleteErrorLevel","iconConfig","syncing","warning","success","noRunYet","statusVariant","statusIcon","statusIconComplete","incompleteLastRun","statusTitle","task","getHighestLevel","run","level","max","logs","log","model","prop","optionTrue","optionFalse","inputId","castedValue","sortBy","sortDirection","loadingLogs","disableRouteParams","logRepository","columns","dataIndex","width","sortable","getListCriteria","getMainListingParams","naturalSorting","getList","getLabelVariantForItem","posSalesChannelRun","getLabelVariant","getLabelForItem","getLabel","onContinueSetup","buildMenuTree","menuItems","posIds","menuItem","onAddChannel","onCloseModal","previousApiKey","paypalPosSalesChannelRepository","loadSalesChannel","entity","updateRun","updateCloneSalesChannel","updateButtons","onButtonClick","redirect","setTimeout","loadLastRun","needComplete","not","$forceUpdate","products","actions","callback","onProductDetails","getProductLog","elements","hasSync","paypalPosLog","paypalPosSync","getSyncDate","updatedAt","createdAt","getLevel","syncingRunId","checkForSync","mounted","mountedComponent","forceUpdate","startSync","callable","updateSync","onStartSync","startCompleteSync","onStartProductSync","startProductSync","onStartImageSync","startImageSync","onStartInventorySync","startInventorySync","onSyncAbort","abortSync","unshift","mapPropertyErrors","getComponentHelper","ShopwareError","showDeleteModal","showResetModal","isTestingCredentials","isTestCredentialsSuccessful","apiKeyUrl","generateApiUrl","optionSyncPrices","optionNotSyncPrices","optionsReplace","swagPaypalPosSalesChannel","catchAuthenticationError","registerWebhook","catchError","$root","cloneProductVisibility","placeholder","mediaDomain","expression","commit","testCredentials","onConfirmDelete","deleteSalesChannel","unregisterWebhook","onConfirmReset","resetSync","changeLanguage","runs","isCleaningLog","showModal","currentRunId","onShowModal","onClearLogs","startLogCleanup","stepperPages","stepper","currentStep","wizardTitle","displayStepperPages","stepInitialItemVariants","maxNavigationIndex","navigationIndex","navigationSteps","handleRouteUpdate","toName","generateStepper","createNewSalesChannel","step","pageName","_isNew","routeToDashboard","routeToDetailOverview","onFinishWizard","finished","activateSalesChannel","silentWebhook","isNewEntity","silent","webhookPromise","systemLanguageId","typeId","imageDomain","productStreamId","syncPrices","salesChannelService","generateKey","accessKey","toggleLoading","isConnecting","setTitle","position","routeToConnectionSuccess","toggleLoadingState","mixin","saveSalesChannel","Function","posData","isFetchingInformation","posUser","firstName","lastName","mail","fullName","parts","routeToCustomization","onDisconnect","routeBackToConnectionSuccess","loading","routeToProductSelection","nextButtonDisabled","manualSalesChannel","hasClone","localCloneSalesChannelId","routeBackToCustomization","routeToSyncLibrary","updateClone","routeBackToSyncLibrary","routeToFinish","shopwareProductsCount","posProductsCount","fetchProductCounts","routeBackToProductSelection","routeToSyncPrices","getProductCount","localCount","remoteCount","routeBackToSyncPrices","onFinish","overview","syncedProducts","settings","wizard","connection","connectionSuccess","connectionDisconnect","customization","productSelection","syncLibrary","capitalizeString","string","dispute","resolutionCenterUrl","orderModuleLink","orderTransactionRepository","orderTransactionCriteria","_JSON$parse$orderTran","_JSON$parse","disputed_transactions","disputedTransaction","custom","JSON","parse","setIds","externalDetailPageLink","dispute_id","getDetail","setLinkToOrderModule","errorDetail","getExternalDetailPageLink","orderTransactions","formatTechnicalText","technicalText","getInquiryClass","stage","getDueDate","sellerResponseDueDate","buyerResponseDueDate","stringify","createNotificationInfo","DISPUTE_STATE_REQUIRED_ACTION","DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION","DISPUTE_STATE_UNDER_PAYPAL_REVIEW","DISPUTE_STATE_RESOLVED","DISPUTE_STATE_OPEN_INQUIRIES","DISPUTE_STATE_APPEALABLE","disputes","disputeStates","disputesColumns","visibleDisputes","list","disputeList","items","sortDisputes","debouncedGetList","formatUpdateDate","formatUpdateTime","day","month","year","onPageChange","onRefresh","onChangeDisputeStateFilter","onSalesChannelChanged","favicon","route","navigation","parent","Mixin","snippet","_i18n","errorText","parameters","salesChannelIds","webpackContext","req","webpackContextResolve","Service","addPrivilegeMappingEntry","category","roles","viewer","privileges","dependencies","editor","creator","deleter","listToStyles","parentId","styles","newStyles","part","css","media","sourceMap","hasDocument","document","DEBUG","stylesInDom","head","getElementsByTagName","singletonElement","singletonCounter","isProduction","noop","ssrIdKey","isOldIE","test","userAgent","addStylesClient","_isProduction","_options","addStylesToDom","newList","mayRemove","domStyle","refs","j","addStyle","createStyleElement","styleElement","appendChild","remove","querySelector","parentNode","removeChild","styleIndex","applyToSingletonTag","applyToTag","newObj","textStore","replaceText","replacement","styleSheet","cssText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","ssrId","sources","btoa","unescape","encodeURIComponent","firstChild","debug","lastOnboardingSandbox","nonceLive","nonceSandbox","payPalPartnerIdLive","payPalPartnerClientIdLive","payPalPartnerIdSandbox","payPalPartnerClientIdSandbox","requestParams","channelId","product","secondaryProducts","integrationType","features","displayMode","partnerLogoUrl","createRequestParameter","partnerId","partnerClientId","returnToPartnerUrl","returnUrl","sellerNonce","toString","$on","getPayPalCredentials","onboardingCallbackLive","getApplicationRoot","onboardingCallbackSandbox","createScript","destroyed","$off","location","origin","pathname","append","URLSearchParams","getElementById","PAYPAL","renderPayPalButton","payPalScript","src","addEventListener","apps","Signup","clearTimeout","getApiCredentials","client_id","client_secret","warn","changeMode","getSSLMode"],"mappings":"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","file":"static/js/swag-pay-pal.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundles/swagpaypal/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"8JPd\");\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-detail-details.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1bb4e4b2\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-payment-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7275f403\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-settings-hint.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a5151118\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-getting-started.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a7b36f50\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-campaign-banner.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"63a0c71a\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-sales-channel-modal-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4c483248\", content, true, {});","import template from './sw-dashboard-index.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-dashboard-index', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n    ],\n\n    data() {\n        return {\n            /**\n             * @private\n             */\n            payPalSystemConfig: null,\n        };\n    },\n\n    computed: {\n        /**\n         * @private\n         */\n        showPayPalBanner() {\n            if (!this.payPalSystemConfig) {\n                return false;\n            }\n\n            return new Date() < new Date('2022-12-31')\n                && (this.payPalSystemConfig['SwagPayPal.settings.clientId']\n                    || this.payPalSystemConfig['SwagPayPal.settings.clientIdSandbox']);\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n\n            this.systemConfigApiService.getValues('SwagPayPal.settings').then((config) => {\n                this.payPalSystemConfig = config;\n            });\n        },\n    },\n});\n","export default \"{% block sw_dashboard_index_content_campaign_banner %}\\n    {% parent %}\\n\\n    <swag-paypal-campaign-banner v-if=\\\"showPayPalBanner\\\"></swag-paypal-campaign-banner>\\n{% endblock %}\\n\";","import template from './swag-paypal-campaign-banner.html.twig';\nimport './swag-paypal-campaign-banner.scss';\n\nconst { Component } = Shopware;\n\n/**\n * @private may be removed oder changed at any time\n */\nComponent.register('swag-paypal-campaign-banner', {\n    template,\n\n    i18n: {\n        messages: {\n            'de-DE': {\n                '2022-10': {\n                    title: 'Spare bares Geld!',\n                    text: 'Am 01.08.2022 hat PayPal die Standardgebühren angepasst. ' +\n                        'Migriere bis 31.12.2022 zu PayPal Checkout* und behalte deine alten Gebühren bis 31.07.2023.<br>' +\n                        // eslint-disable-next-line max-len\n                        '* Erfahre mehr in unserem <a href=\"https://www.shopware.com/de/news/paypal-aktualisiert-gebuehren/\" target=\"_blank\">Blog Beitrag</a>',\n                    labelText: '',\n                },\n                linkTitle: 'Zu den PayPal-Einstellungen',\n            },\n            'en-GB': {\n                '2022-10': {\n                    title: 'Save money now!',\n                    text: 'On 1 August 2022, PayPal adjusted the standard fees. ' +\n                        // eslint-disable-next-line max-len\n                        'Migrate to PayPal Checkout by 31 December 2022* and maintain your old prices until 31 July 2023!<br>' +\n                        // eslint-disable-next-line max-len\n                        '* Learn more about in our <a href=\"https://www.shopware.com/en/news/paypal-updated-fees/\" target=\"_blank\">blog</a>',\n                    labelText: '',\n                },\n                linkTitle: 'Go to PayPal settings',\n            },\n        },\n    },\n\n    data() {\n        return {\n            closed: true,\n        };\n    },\n\n    computed: {\n        linkTitle() {\n            return this.$tc('linkTitle');\n        },\n\n        timePrefix() {\n            return '2022-10';\n        },\n\n        labelText() {\n            return this.$tc(`${this.timePrefix}.labelText`);\n        },\n\n        showLabel() {\n            return this.labelText !== `${this.timePrefix}.labelText`;\n        },\n\n        title() {\n            return this.$tc(`${this.timePrefix}.title`);\n        },\n\n        text() {\n            return this.$tc(`${this.timePrefix}.text`);\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        currentLocale() {\n            return Shopware.State.get('session').currentLocale;\n        },\n\n        image() {\n            const suffix = this.currentLocale === 'de-DE' ? 'de' : 'en';\n\n            return this.assetFilter(`swagpaypal/static/img/campaign/${this.timePrefix}_${suffix}.png`);\n        },\n\n        cardClasses() {\n            return {\n                'sw-campaign-banner': true,\n                'swag-paypal-campaign-banner': true,\n                'swag-paypal-campaign-banner__closed': this.closed,\n            };\n        },\n\n        localStorageKey() {\n            return `swag-paypal-campaign-banner.${this.timePrefix}.closed`;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.closed = window.localStorage.getItem(this.localStorageKey) === 'true';\n        },\n\n        close() {\n            this.closed = true;\n\n            window.localStorage.setItem(this.localStorageKey, 'true');\n        },\n    },\n});\n","export default \"<sw-meteor-card :class=\\\"cardClasses\\\">\\n    <div class=\\\"sw-campaign-banner__container\\\">\\n        <div class=\\\"sw-campaign-banner__image\\\">\\n            <img :src=\\\"image\\\">\\n        </div>\\n\\n        <div class=\\\"sw-campaign-banner__content\\\">\\n            <div class=\\\"sw-campaign-banner__text\\\">\\n                <span\\n                    v-if=\\\"showLabel\\\"\\n                    class=\\\"sw-campaign-banner__label\\\"\\n                >{{ labelText }}</span>\\n                <h3>{{ title }}</h3>\\n                <p v-html=\\\"text\\\"></p>\\n            </div>\\n\\n            <div class=\\\"sw-campaign-banner__action\\\">\\n                <sw-button variant=\\\"ghost\\\" :routerLink=\\\"{ name: 'swag.paypal.index' }\\\">\\n                    {{ linkTitle }}\\n                </sw-button>\\n            </div>\\n\\n\\n            <button\\n                class=\\\"swag-paypal-campaign-banner__close\\\"\\n                @click.prevent=\\\"close\\\"\\n            >\\n                <sw-icon\\n                    name=\\\"regular-times-s\\\"\\n                    small\\n                />\\n            </button>\\n        </div>\\n    </div>\\n</sw-meteor-card>\\n\";","import template from './sw-first-run-wizard-paypal-credentials.html.twig';\nimport './sw-first-run-wizard-paypal-credentials.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-first-run-wizard-paypal-credentials', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n        'SwagPaypalPaymentMethodService',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-credentials-loader',\n    ],\n\n    data() {\n        return {\n            config: {},\n            isLoading: false,\n            setDefault: false,\n        };\n    },\n\n    computed: {\n        sandboxMode() {\n            return this.config['SwagPayPal.settings.sandbox'] || false;\n        },\n\n        onboardingUrl() {\n            return this.sandboxMode ? this.onboardingUrlSandbox : this.onboardingUrlLive;\n        },\n\n        onboardingCallback() {\n            return this.sandboxMode ? 'onboardingCallbackSandbox' : 'onboardingCallbackLive';\n        },\n\n        buttonConfig() {\n            const prev = this.$super('buttonConfig');\n\n            return prev.reduce((acc, button) => {\n                if (button.key === 'next') {\n                    button.action = this.onClickNext.bind(this);\n                }\n\n                return [...acc, button];\n            }, []);\n        },\n\n        credentialsProvided() {\n            return (!this.sandboxMode && this.credentialsProvidedLive)\n                || (this.sandboxMode && this.credentialsProvidedSandbox);\n        },\n\n        credentialsProvidedLive() {\n            return !!this.config['SwagPayPal.settings.clientId']\n                && !!this.config['SwagPayPal.settings.clientSecret'];\n        },\n\n        credentialsProvidedSandbox() {\n            return !!this.config['SwagPayPal.settings.clientIdSandbox']\n                && !!this.config['SwagPayPal.settings.clientSecretSandbox'];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n            this.fetchPayPalConfig();\n        },\n\n        onPayPalCredentialsLoadSuccess(clientId, clientSecret, merchantPayerId, sandbox) {\n            this.setConfig(clientId, clientSecret, merchantPayerId, sandbox);\n        },\n\n        onPayPalCredentialsLoadFailed(sandbox) {\n            this.setConfig('', '', sandbox, '');\n            this.createNotificationError({\n                message: this.$tc('swag-paypal-frw-credentials.messageFetchedError'),\n                duration: 10000,\n            });\n        },\n\n        setConfig(clientId, clientSecret, merchantPayerId, sandbox) {\n            const suffix = sandbox ? 'Sandbox' : '';\n            this.$set(this.config, `SwagPayPal.settings.clientId${suffix}`, clientId);\n            this.$set(this.config, `SwagPayPal.settings.clientSecret${suffix}`, clientSecret);\n            this.$set(this.config, `SwagPayPal.settings.merchantPayerId${suffix}`, merchantPayerId);\n        },\n\n        onClickNext() {\n            if (!this.credentialsProvided) {\n                this.createNotificationError({\n                    message: this.$tc('swag-paypal-frw-credentials.messageNoCredentials'),\n                });\n                return Promise.resolve(true);\n            }\n\n            // Do not test the credentials if they have been fetched from the PayPal api\n            if (this.isGetCredentialsSuccessful) {\n                return this.saveConfig().then(() => {\n                    this.$emit('frw-redirect', 'sw.first.run.wizard.index.plugins');\n\n                    return Promise.resolve(false);\n                }).catch(() => {\n                    return Promise.resolve(true);\n                });\n            }\n\n            return this.testApiCredentials()\n                .then(() => {\n                    return this.saveConfig();\n                }).then(() => {\n                    this.$emit('frw-redirect', 'sw.first.run.wizard.index.plugins');\n\n                    return Promise.resolve(false);\n                }).catch(() => {\n                    return Promise.resolve(true);\n                });\n        },\n\n        fetchPayPalConfig() {\n            this.isLoading = true;\n            return this.systemConfigApiService.getValues('SwagPayPal.settings', null)\n                .then(values => {\n                    this.config = values;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        saveConfig() {\n            this.isLoading = true;\n            return this.systemConfigApiService.saveValues(this.config, null)\n                .then(() => {\n                    if (this.setDefault) {\n                        return this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel();\n                    }\n\n                    return Promise.resolve();\n                }).then(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        testApiCredentials() {\n            this.isLoading = true;\n\n            const sandbox = this.config['SwagPayPal.settings.sandbox'];\n            const sandboxSetting = sandbox ? 'Sandbox' : '';\n            const clientId = this.config[`SwagPayPal.settings.clientId${sandboxSetting}`];\n            const clientSecret = this.config[`SwagPayPal.settings.clientSecret${sandboxSetting}`];\n\n            return this.SwagPayPalApiCredentialsService.validateApiCredentials(clientId, clientSecret, sandbox)\n                .then((response) => {\n                    const credentialsValid = response.credentialsValid;\n\n                    if (credentialsValid) {\n                        this.isLoading = false;\n                        return Promise.resolve();\n                    }\n\n                    return Promise.reject();\n                }).catch((errorResponse) => {\n                    if (errorResponse.response.data && errorResponse.response.data.errors) {\n                        const message = errorResponse.response.data.errors.map((error) => {\n                            return error.detail;\n                        }).join(' / ');\n\n                        this.createNotificationError({\n                            message: message,\n                        });\n                        this.isLoading = false;\n                    }\n\n                    return Promise.reject();\n                });\n        },\n\n        onCredentialsChanged() {\n            this.isGetCredentialsSuccessful = null;\n        },\n    },\n});\n","export default \"{% block sw_first_run_wizard_paypal_credentials %}\\n    <div class=\\\"sw-first-run-wizard-paypal-credentials\\\">\\n\\n        {% block sw_first_run_wizard_paypal_credentials_inner %}\\n            <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n\\n            {% block sw_first_run_wizard_paypal_credentials_intro %}\\n                <p class=\\\"sw-first-run-wizard-paypal-credentials__headerText\\\">\\n                    {{ $tc('swag-paypal-frw-credentials.textIntroPayPal') }}\\n                </p>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_sandbox %}\\n                <sw-switch-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.sandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.sandbox']\\\"\\n                        {% endif %}\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelSandbox')\\\"\\n                        :helpText=\\\"$tc('swag-paypal-frw-credentials.tooltipSandbox')\\\">\\n                </sw-switch-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_button_container %}\\n                <div class=\\\"sw-first-run-wizard-paypal-credentials__button-container\\\">\\n\\n                    {% block sw_first_run_wizard_paypal_credentials_button %}\\n                        <a class=\\\"sw-button sw-button--primary swag-paypal-frw__signup-button\\\"\\n                           target=\\\"_blank\\\"\\n                           :data-paypal-onboard-complete=\\\"onboardingCallback\\\"\\n                           :href=\\\"`${onboardingUrl}`\\\"\\n                           data-paypal-button=\\\"true\\\">\\n                            {{ $tc('swag-paypal-frw-credentials.buttonGetCredentials') }}\\n                        </a>\\n                    {% endblock %}\\n\\n                    {% block sw_first_run_wizard_paypal_credentials_indicator %}\\n                        <div class=\\\"sw-first-run-wizard-paypal-credentials__indicator\\\">\\n                            <template v-if=\\\"isGetCredentialsSuccessful\\\">\\n\\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_icon %}\\n                                    <sw-icon name=\\\"regular-checkmark-s\\\"\\n                                             class=\\\"sw-first-run-wizard-paypal-credentials__icon-successful\\\">\\n                                    </sw-icon>\\n                                {% endblock %}\\n\\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_text %}\\n                                    <span class=\\\"sw-first-run-wizard-paypal-credentials__text-indicator\\\">\\n                                        {{ $tc('swag-paypal-frw-credentials.textFetchedSuccessful') }}\\n                                    </span>\\n                                {% endblock %}\\n                            </template>\\n                        </div>\\n                    {% endblock %}\\n                </div>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_id %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientId']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientId']\\\"\\n                        {% endif %}\\n                        v-show=\\\"!sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientId')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_secret %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientSecret']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientSecret']\\\"\\n                        {% endif %}\\n                        v-show=\\\"!sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientSecret')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_merchant_id %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.merchantPayerId']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.merchantPayerId']\\\"\\n                        {% endif %}\\n                        v-show=\\\"!sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelMerchantPayerId')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_id_sandbox %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientIdSandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientIdSandbox']\\\"\\n                        {% endif %}\\n                        v-show=\\\"sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientIdSandbox')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_secret_sandbox %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                        {% endif %}\\n                        v-show=\\\"sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientSecretSandbox')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_merchant_id_sandbox %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                        {% endif %}\\n                        v-show=\\\"sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelMerchantPayerIdSandbox')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_set_default %}\\n                <sw-switch-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"setDefault\\\"\\n                        {% else %}\\n                        v-model=\\\"setDefault\\\"\\n                        {% endif %}\\n                        :disabled=\\\"!credentialsProvided\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelSetDefault')\\\"\\n                        :helpText=\\\"$tc('swag-paypal-frw-credentials.tooltipSetDefault')\\\">\\n                </sw-switch-field>\\n            {% endblock %}\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block sw_sales_channel_modal_detail_header_icon %}\\n    <span v-if=\\\"isPayPalPosSalesChannel(detailType.id)\\\"\\n          class=\\\"sw-sales-channel-modal-detail__header-icon\\\">\\n         <img class=\\\"swag-paypal-pos-modal-detail__icon\\\"\\n              :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-logo.svg')\\\">\\n    </span>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\\n{% block sw_sales_channel_modal_detail_header_meta %}\\n    <div v-if=\\\"isPayPalPosSalesChannel(detailType.id)\\\"\\n         class=\\\"sw-sales-channel-modal-detail__header-meta\\\">\\n        <h4 class=\\\"sw-sales-channel-modal-detail__header-name\\\">\\n            {{ detailType.translated.name }}\\n        </h4>\\n        <div class=\\\"sw-sales-channel-modal-detail__header-manufacturer\\\">\\n            {{ $tc('swag-paypal-pos.general.salesChannelDetailDescription.manufacturer') }}\\n        </div>\\n    </div>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\\n{% block sw_sales_channel_modal_detail_description %}\\n    <template v-if=\\\"isPayPalPosSalesChannel(detailType.id)\\\">\\n        <h4 class=\\\"sw-sales-channel-modal-detail__description-long-title\\\">\\n            {{ $tc('swag-paypal-pos.general.salesChannelDetailDescription.title') }}\\n        </h4>\\n        <div v-if=\\\"detailType.translated.descriptionLong\\\"\\n             class=\\\"sw-sales-channel-modal-detail__description-long-text\\\">\\n            {{ detailType.translated.descriptionLong }}\\n        </div>\\n        <div v-else\\n             class=\\\"sw-sales-channel-modal-detail__description-long-text\\\">\\n            {{ detailType.translated.description }}\\n        </div>\\n    </template>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\";","export const PAYPAL_POS_SALES_CHANNEL_TYPE_ID = '1ce0868f406d47d98cfe4b281e62f099';\nexport const PAYPAL_POS_SALES_CHANNEL_EXTENSION = 'paypalPosSalesChannel';\n\nexport default {\n    PAYPAL_POS_SALES_CHANNEL_TYPE_ID,\n    PAYPAL_POS_SALES_CHANNEL_EXTENSION,\n};\n","import template from './sw-sales-channel-modal-detail.html.twig';\nimport './sw-sales-channel-modal-detail.scss';\nimport { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-modal-detail', {\n    template,\n\n    methods: {\n        isPayPalPosSalesChannel(salesChannelTypeId) {\n            return salesChannelTypeId === PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n        },\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","import template from './sw-sales-channel-modal-grid.html.twig';\nimport './sw-sales-channel-modal-grid.scss';\nimport { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-modal-grid', {\n    template,\n\n    methods: {\n        isPayPalPosSalesChannel(salesChannelTypeId) {\n            const salesChannelType = this.salesChannelTypes.find(type => type.id === salesChannelTypeId);\n\n            return salesChannelType.id === PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n        },\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","export default \"{% block sw_sales_channel_grid_columns_icon %}\\n    <sw-grid-column\\n            v-if=\\\"isPayPalPosSalesChannel(item.id)\\\"\\n            class=\\\"sw-sales-channel-modal-grid__icon-column\\\"\\n            flex=\\\"85px\\\"\\n            dataIndex=\\\"icon\\\">\\n        <span class=\\\"sw-sales-channel-modal-grid__icon\\\" @click=\\\"onOpenDetail(item.id)\\\">\\n             <img class=\\\"swag-paypal-pos-modal-grid__icon\\\"\\n                  :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-logo.svg')\\\">\\n        </span>\\n    </sw-grid-column>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\";","import template from './swag-paypal-overview-card.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-overview-card', {\n    template,\n\n    props: {\n        paymentMethods: {\n            type: Array,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            salesChannels: [],\n            config: null,\n        };\n    },\n\n    computed: {\n        pluginId() {\n            if (this.paymentMethods.length === 0) {\n                return '';\n            }\n\n            return this.paymentMethods[0].pluginId;\n        },\n    },\n\n    methods: {\n        async save() {\n            this.isLoading = true;\n\n            try {\n                const response = await this.$refs.swagPayPalConfigComponent.save();\n\n                if (response.payPalWebhookErrors) {\n                    const errorMessage = this.$tc('swag-paypal.settingForm.messageWebhookError');\n                    response.payPalWebhookErrors.forEach((error) => {\n                        this.createNotificationError({\n                            message: `${errorMessage}<br><br><ul><li>${error}</li></ul>`,\n                        });\n                    });\n                }\n\n                await this.$refs.swagPayPalCheckoutComponent.getPaymentMethodsAndMerchantIntegrations();\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        onChangeLoading(state) {\n            this.isLoading = state;\n        },\n    },\n});\n","export default \"{% block swag_paypal_overview_card %}\\n<sw-sales-channel-config\\n        {% if VUE3 %}\\n        v-model:value=\\\"config\\\"\\n        {% else %}\\n        v-model=\\\"config\\\"\\n        {% endif %}\\n        ref=\\\"swagPayPalConfigComponent\\\"\\n        domain=\\\"SwagPayPal.settings\\\">\\n\\n    {% block swag_paypal_overview_card_select %}\\n        <template #select>\\n            <div></div>\\n        </template>\\n    {% endblock %}\\n\\n    {% block swag_paypal_overview_card_content %}\\n        <template #content=\\\"{ actualConfigData, allConfigs, selectedSalesChannelId }\\\">\\n            <div v-if=\\\"actualConfigData\\\">\\n\\n                {% block swag_paypal_overview_card_checkout %}\\n                    <swag-paypal-checkout\\n                        ref=\\\"swagPayPalCheckoutComponent\\\"\\n                        :pluginId=\\\"pluginId\\\"\\n                        :allowShowCredentials=\\\"false\\\"\\n                        :actualConfigData=\\\"actualConfigData\\\"\\n                        :allConfigs=\\\"allConfigs\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        showSettingsLink\\n                        @on-save-settings=\\\"save\\\"\\n                        @on-deactivate-paypal-plus=\\\"save\\\"\\n                        @on-change-loading=\\\"onChangeLoading\\\"\\n                    />\\n                {% endblock %}\\n            </div>\\n        </template>\\n    {% endblock %}\\n\\n</sw-sales-channel-config>\\n{% endblock %}\\n\";","import template from './sw-settings-payment-list.html.twig';\nimport './sw-settings-payment-list.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-settings-payment-list', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    data() {\n        return {\n            merchantIntegrations: [],\n        };\n    },\n\n    methods: {\n        needsOnboarding(item) {\n            const integrationIds = Object.keys(this.merchantIntegrations);\n\n            if (!integrationIds.includes(item.id)) {\n                return false;\n            }\n\n            return this.merchantIntegrations[item.id].toUpperCase() === 'INACTIVE';\n        },\n\n        fetchMerchantIntegrations() {\n            this.SwagPayPalApiCredentialsService\n                .getMerchantInformation()\n                .then((response) => {\n                    this.merchantIntegrations = response.merchantIntegrations ?? [];\n                });\n        },\n    },\n});\n","export default \"{% block sw_settings_payment_list_column_active_editor %}\\n<sw-icon\\n    v-if=\\\"needsOnboarding(item)\\\"\\n    v-tooltip.left=\\\"{\\n        message: $tc('sw-settings-payment-list.needOnboardingTooltip'),\\n    }\\\"\\n    name=\\\"regular-lock\\\"\\n    small\\n/>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\\n{% block sw_settings_payment_list_column_active_label %}\\n<sw-icon\\n    v-if=\\\"needsOnboarding(item)\\\"\\n    v-tooltip.left=\\\"{\\n        message: $tc('sw-settings-payment-list.needOnboardingTooltip'),\\n    }\\\"\\n    name=\\\"regular-lock\\\"\\n    small\\n/>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\\n{% block sw_settings_payment_list_content_inner %}\\n    <swag-paypal-created-component-helper\\n        @on-created-component=\\\"fetchMerchantIntegrations\\\"\\n    />\\n\\n    {% parent %}\\n{% endblock %}\\n\";","import template from './sw-settings-payment-detail.html.twig';\nimport './sw-settings-payment-detail.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-settings-payment-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    data() {\n        return {\n            merchantIntegrations: [],\n        };\n    },\n\n    computed: {\n        disableActiveSwitch() {\n            return !this.acl.can('payment.editor') || this.needsOnboarding(this.paymentMethod.id);\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n\n            this.fetchMerchantIntegrations();\n        },\n\n        needsOnboarding(id) {\n            const integrationIds = Object.keys(this.merchantIntegrations);\n\n            if (!integrationIds.includes(id)) {\n                return false;\n            }\n\n            return this.merchantIntegrations[id].toUpperCase() === 'INACTIVE';\n        },\n\n        fetchMerchantIntegrations() {\n            this.SwagPayPalApiCredentialsService\n                .getMerchantInformation()\n                .then((response) => {\n                    this.merchantIntegrations = response.merchantIntegrations ?? [];\n                });\n        },\n    },\n});\n\n","export default \"{% block sw_settings_payment_detail_content_field_plugin %}\\n<template v-if=\\\"needsOnboarding(paymentMethod.id)\\\">\\n    <swag-paypal-plugin-box-with-onboarding\\n        v-if=\\\"!!paymentMethod.pluginId\\\"\\n        :plugin-id=\\\"paymentMethod.pluginId\\\"\\n        :payment-method=\\\"paymentMethod\\\"\\n    />\\n</template>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\\n{% block sw_settings_payment_detail_content_field_active %}\\n<template v-if=\\\"disableActiveSwitch\\\">\\n    <sw-switch-field\\n        {% if VUE3 %}\\n        v-model:value=\\\"paymentMethod.active\\\"\\n        {% else %}\\n        v-model=\\\"paymentMethod.active\\\"\\n        {% endif %}\\n        v-tooltip.left=\\\"{ message: $tc('sw-settings-payment-detail.tooltip') }\\\"\\n        class=\\\"sw-settings-payment-detail__field-active\\\"\\n        :disabled=\\\"disableActiveSwitch\\\"\\n        :label=\\\"$tc('sw-settings-payment.detail.labelActive')\\\"\\n    />\\n</template>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\";","export default \"{% block sw_settings_shipping_detail_tax_cost %}\\n\\n    {% block sw_settings_shipping_detail_paypal_default_carrier %}\\n    <sw-card\\n        v-if=\\\"isPayPalEnabled\\\"\\n        class=\\\"swag-paypal-settings-shipping-carrier\\\"\\n        position-identifier=\\\"swag-paypal-settings-shipping-carrier\\\"\\n    >\\n        {% block sw_settings_shipping_detail_paypal_default_carrier_title %}\\n        <template #title>\\n            <div class=\\\"sw-card__title\\\">\\n                {{ $tc('swag-paypal-settings-shipping-carrier.cardTitle') }}\\n                <sw-help-text :text=\\\"$tc('swag-paypal-settings-shipping-carrier.cardHelpText')\\\"></sw-help-text>\\n            </div>\\n        </template>\\n        {% endblock %}\\n\\n        {% block sw_settings_shipping_detail_paypal_default_carrier_description %}\\n            <div\\n                v-html=\\\"$tc('swag-paypal-settings-shipping-carrier.description')\\\"\\n                class=\\\"swag-paypal-settings-shipping-carrier__description\\\"\\n            ></div>\\n        {% endblock %}\\n\\n        {% block sw_settings_shipping_detail_paypal_default_carrier_input %}\\n        <sw-text-field\\n            {% if VUE3 %}\\n            v-model:value=\\\"payPalDefaultCarrier\\\"\\n            {% else %}\\n            v-model=\\\"payPalDefaultCarrier\\\"\\n            {% endif %}\\n            :label=\\\"$tc('swag-paypal-settings-shipping-carrier.inputLabel')\\\"\\n            :placeholder=\\\"$tc('swag-paypal-settings-shipping-carrier.inputPlaceholder')\\\"\\n        ></sw-text-field>\\n        {% endblock %}\\n\\n    </sw-card>\\n    {% endblock %}\\n\\n    {% parent %}\\n{% endblock %}\\n\";","import template from './sw-settings-shipping-detail.html.twig';\nimport './sw-settings-shipping-detail.scss';\n\nconst { Component, Utils } = Shopware;\n\nComponent.override('sw-settings-shipping-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    data() {\n        return {\n            isPayPalEnabled: false,\n        };\n    },\n\n    computed: {\n        shippingMethodCustomFields() {\n            if (this.shippingMethod.customFields) {\n                return this.shippingMethod.customFields;\n            }\n\n            return Utils.object.get(this.shippingMethod, 'translated.customFields', null);\n        },\n\n        payPalDefaultCarrier: {\n            get() {\n                if (this.shippingMethodCustomFields === null) {\n                    return '';\n                }\n\n                return this.shippingMethodCustomFields.swag_paypal_carrier || '';\n            },\n            set(value) {\n                Utils.object.set(this.shippingMethod, 'customFields.swag_paypal_carrier', value);\n            },\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n\n            this.fetchMerchantIntegrations();\n        },\n\n        fetchMerchantIntegrations() {\n            this.SwagPayPalApiCredentialsService\n                .getMerchantInformation()\n                .then((response) => {\n                    this.isPayPalEnabled =\n                        response.hasOwnProperty('merchantIntegrations')\n                        && response.merchantIntegrations !== null;\n                });\n        },\n    },\n});\n\n","/**\n * @deprecated tag:v8.0.0 - Will be removed without replacement.\n */\nexport const MERCHANT_LOCATION_GERMANY = 'germany';\n\n/**\n * @deprecated tag:v8.0.0 - Will be removed without replacement.\n */\nexport const MERCHANT_LOCATION_OTHER = 'other';\n\nexport default {\n    MERCHANT_LOCATION_GERMANY,\n    MERCHANT_LOCATION_OTHER,\n};\n","import template from './swag-paypal.html.twig';\nimport './swag-paypal.scss';\nimport constants from './swag-paypal-consts';\n\nconst { Component, Defaults } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { hasOwnProperty } = Shopware.Utils.object;\n\nComponent.register('swag-paypal', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n        'SwagPaypalPaymentMethodService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            isTestSuccessful: false,\n            isTestSandboxSuccessful: false,\n            clientIdFilled: false,\n            clientSecretFilled: false,\n            clientIdSandboxFilled: false,\n            clientSecretSandboxFilled: false,\n            sandboxChecked: false,\n            salesChannels: [],\n            config: {},\n            isSetDefaultPaymentSuccessful: false,\n            isSettingDefaultPaymentMethods: false,\n            savingDisabled: false,\n            messageBlankErrorState: null,\n            showCredentials: false,\n            allowShowCredentials: true,\n            ...constants,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        showSPBCard() {\n            if (hasOwnProperty(this.config, 'SwagPayPal.settings.merchantLocation') &&\n                    this.config['SwagPayPal.settings.merchantLocation'] !== null\n            ) {\n                return this.config['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_OTHER;\n            }\n\n            const defaultConfig = this.$refs.configComponent?.allConfigs.null;\n\n            if (!defaultConfig) {\n                return false;\n            }\n\n            return defaultConfig['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_OTHER;\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - Will be removed without replacement.\n         */\n        showPlusCard() {\n            if (hasOwnProperty(this.config, 'SwagPayPal.settings.merchantLocation') &&\n                    this.config['SwagPayPal.settings.merchantLocation'] !== null\n            ) {\n                return this.config['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_GERMANY;\n            }\n\n            const defaultConfig = this.$refs.configComponent?.allConfigs.null;\n\n            if (!defaultConfig) {\n                return false;\n            }\n\n            return defaultConfig['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_GERMANY;\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        clientIdErrorState() {\n            if (this.sandboxChecked || this.clientIdFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        clientSecretErrorState() {\n            if (this.sandboxChecked || this.clientSecretFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        clientIdSandboxErrorState() {\n            if (!this.sandboxChecked || this.clientIdSandboxFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        clientSecretSandboxErrorState() {\n            if (!this.sandboxChecked || this.clientSecretSandboxFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        hasError() {\n            return (!this.sandboxChecked && !(this.clientIdFilled && this.clientSecretFilled)) ||\n                (this.sandboxChecked && !(this.clientIdSandboxFilled && this.clientSecretSandboxFilled));\n        },\n\n        salesChannelCriteria() {\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.equalsAny('typeId', [\n                Defaults.storefrontSalesChannelTypeId,\n                Defaults.apiSalesChannelTypeId,\n            ]));\n\n            return criteria;\n        },\n\n        tab() {\n            return this.$route.params.tab || 'general';\n        },\n    },\n\n    watch: {\n        config: {\n            handler() {\n                const defaultConfig = this.$refs.configComponent?.allConfigs?.null;\n                const salesChannelId = this.$refs.configComponent?.selectedSalesChannelId;\n\n                if (salesChannelId === null) {\n                    this.clientIdFilled = !!this.config['SwagPayPal.settings.clientId'];\n                    this.clientSecretFilled = !!this.config['SwagPayPal.settings.clientSecret'];\n                    this.clientIdSandboxFilled = !!this.config['SwagPayPal.settings.clientIdSandbox'];\n                    this.clientSecretSandboxFilled = !!this.config['SwagPayPal.settings.clientSecretSandbox'];\n                    this.sandboxChecked = !!this.config['SwagPayPal.settings.sandbox'];\n                } else {\n                    this.clientIdFilled = !!this.config['SwagPayPal.settings.clientId']\n                        || !!defaultConfig['SwagPayPal.settings.clientId'];\n                    this.clientSecretFilled = !!this.config['SwagPayPal.settings.clientSecret']\n                        || !!defaultConfig['SwagPayPal.settings.clientSecret'];\n                    this.clientIdSandboxFilled = !!this.config['SwagPayPal.settings.clientIdSandbox']\n                        || !!defaultConfig['SwagPayPal.settings.clientIdSandbox'];\n                    this.clientSecretSandboxFilled = !!this.config['SwagPayPal.settings.clientSecretSandbox']\n                        || !!defaultConfig['SwagPayPal.settings.clientSecretSandbox'];\n                    this.sandboxChecked = !!this.config['SwagPayPal.settings.sandbox']\n                        || !!defaultConfig['SwagPayPal.settings.sandbox'];\n                }\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.$route.params.tab) {\n                this.$router.push({ name: 'swag.paypal.index', params: { tab: 'general' } });\n            }\n\n            this.isLoading = true;\n\n            this.salesChannelRepository.search(this.salesChannelCriteria, Shopware.Context.api).then(res => {\n                res.add({\n                    id: null,\n                    translated: {\n                        name: this.$tc('sw-sales-channel-switch.labelDefaultOption'),\n                    },\n                });\n\n                this.salesChannels = res;\n            }).finally(() => {\n                this.isLoading = false;\n            });\n\n            this.messageBlankErrorState = {\n                code: 1,\n                detail: this.$tc('swag-paypal.messageNotBlank'),\n            };\n        },\n\n        onSave() {\n            if (this.hasError) {\n                return;\n            }\n\n            this.save();\n        },\n\n        onChangeLoading(state) {\n            this.isLoading = state;\n        },\n\n        save() {\n            this.isLoading = true;\n\n            this.$refs.configComponent.save().then((response) => {\n                this.isSaveSuccessful = true;\n\n                if (response.payPalWebhookErrors) {\n                    const errorMessage = this.$tc('swag-paypal.settingForm.messageWebhookError');\n                    response.payPalWebhookErrors.forEach((error) => {\n                        this.createNotificationError({\n                            message: `${errorMessage}<br><br><ul><li>${error}</li></ul>`,\n                        });\n                    });\n                }\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onSetPaymentMethodDefault() {\n            this.isSettingDefaultPaymentMethods = true;\n\n            this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel(\n                this.$refs.configComponent?.selectedSalesChannelId,\n            ).then(() => {\n                this.isSettingDefaultPaymentMethods = false;\n                this.isSetDefaultPaymentSuccessful = true;\n            });\n        },\n\n        preventSave(mode) {\n            if (!mode) {\n                this.savingDisabled = false;\n                return;\n            }\n\n            this.savingDisabled = true;\n        },\n\n        onChangeCredentialsVisibility(visibility) {\n            this.showCredentials = visibility;\n        },\n    },\n});\n","export default \"{% block swag_paypal %}\\n    <sw-page class=\\\"swag-paypal\\\">\\n\\n        {% block swag_paypal_header %}\\n            <template #smart-bar-header>\\n                <h2>\\n                    {{ $tc('sw-settings.index.title') }}\\n                    <sw-icon name=\\\"regular-chevron-right-xs\\\" small></sw-icon>\\n                    {{ $tc('swag-paypal.header') }}\\n                </h2>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_actions %}\\n            <template #smart-bar-actions>\\n                {% block swag_paypal_actions_save %}\\n                    <sw-button-process\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"isSaveSuccessful\\\"\\n                        {% else %}\\n                        v-model=\\\"isSaveSuccessful\\\"\\n                        {% endif %}\\n                        class=\\\"sw-settings-login-registration__save-action\\\"\\n                        variant=\\\"primary\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        :disabled=\\\"isLoading || savingDisabled || hasError || !acl.can('swag_paypal.editor')\\\"\\n                        @click=\\\"onSave\\\">\\n                        {{ $tc('global.default.save') }}\\n                    </sw-button-process>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content %}\\n            <template #content>\\n\\n                {% block swag_paypal_content_card %}\\n                    <sw-card-view>\\n\\n                        {% block swag_paypal_content_tabs %}\\n                            <sw-tabs\\n                                default-item=\\\"general\\\"\\n                                position-identifier=\\\"swag-paypal-content-tabs\\\">\\n                                <template #default=\\\"{ active }\\\">\\n                                    <sw-tabs-item\\n                                        key=\\\"general\\\"\\n                                        :active-tab=\\\"active\\\"\\n                                        :route=\\\"{ name: 'swag.paypal.index', params: { tab: 'general' } }\\\">\\n                                        {{ $tc('swag-paypal.tabs.general') }}\\n                                    </sw-tabs-item>\\n                                    <sw-tabs-item\\n                                        key=\\\"storefront\\\"\\n                                        :active-tab=\\\"active\\\"\\n                                        :route=\\\"{ name: 'swag.paypal.index', params: { tab: 'storefront' } }\\\">\\n                                        {{ $tc('swag-paypal.tabs.storefront') }}\\n                                    </sw-tabs-item>\\n                                </template>\\n                            </sw-tabs>\\n                        {% endblock %}\\n\\n                        {# @deprecated tag:v8.0.0 - will be removed without replacement #}\\n                        {% block swag_paypal_content_card_shipping_alert %}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config %}\\n                            <sw-sales-channel-config\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"config\\\"\\n                                {% else %}\\n                                v-model=\\\"config\\\"\\n                                {% endif %}\\n                                ref=\\\"configComponent\\\"\\n                                domain=\\\"SwagPayPal.settings\\\">\\n\\n                                {% block swag_paypal_content_card_channel_config_sales_channel %}\\n                                    <template #select=\\\"{ onInput, selectedSalesChannelId }\\\">\\n\\n                                        {% block swag_paypal_content_card_channel_config_sales_channel_card %}\\n                                            <sw-card position-identifier=\\\"swag-paypal-sales-channel-card\\\"\\n                                                     :title=\\\"$tc('global.entities.sales_channel', 2)\\\">\\n\\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_title %}\\n                                                    <sw-single-select\\n                                                        {% if VUE3 %}\\n                                                        v-model:value=\\\"selectedSalesChannelId\\\"\\n                                                        {% else %}\\n                                                        v-model=\\\"selectedSalesChannelId\\\"\\n                                                        {% endif %}\\n                                                        labelProperty=\\\"translated.name\\\"\\n                                                        valueProperty=\\\"id\\\"\\n                                                        :isLoading=\\\"isLoading\\\"\\n                                                        :options=\\\"salesChannels\\\"\\n                                                        :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                                                        @change=\\\"onInput\\\">\\n                                                    </sw-single-select>\\n                                                {% endblock %}\\n\\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_footer %}\\n                                                    <template #footer>\\n\\n                                                        {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container %}\\n                                                        <sw-container columns=\\\"2fr 1fr\\\"\\n                                                                      gap=\\\"0px 30px\\\">\\n\\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_text %}\\n                                                                <p>{{ $tc('swag-paypal.saleschannelCard.button.description') }}</p>\\n                                                            {% endblock %}\\n\\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_button %}\\n                                                                <sw-button-process\\n                                                                    {% if VUE3 %}\\n                                                                    v-model:processSuccess=\\\"isSetDefaultPaymentSuccessful\\\"\\n                                                                    {% else %}\\n                                                                    v-model=\\\"isSetDefaultPaymentSuccessful\\\"\\n                                                                    {% endif %}\\n                                                                    :isLoading=\\\"isSettingDefaultPaymentMethods\\\"\\n                                                                    :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                                                                    @click=\\\"onSetPaymentMethodDefault\\\">\\n                                                                    {{ $tc('swag-paypal.saleschannelCard.button.label') }}\\n                                                                </sw-button-process>\\n                                                            {% endblock %}\\n\\n                                                        </sw-container>\\n                                                        {% endblock %}\\n\\n                                                    </template>\\n                                                {% endblock %}\\n\\n                                            </sw-card>\\n                                        {% endblock %}\\n\\n                                    </template>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_content_card_channel_config_cards %}\\n                                    <template #content=\\\"{ actualConfigData, allConfigs, selectedSalesChannelId }\\\">\\n\\n                                        {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                                        {% block swag_paypal_content_card_channel_config_checkout_card %}\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_cross_border %}\\n                                        <swag-paypal-cross-border\\n                                            v-if=\\\"tab === 'advanced'\\\"\\n                                            :isLoading=\\\"isLoading\\\"\\n                                            :actual-config-data=\\\"actualConfigData\\\"\\n                                            :all-configs=\\\"allConfigs\\\"\\n                                            :selected-sales-channel-id=\\\"selectedSalesChannelId\\\"\\n                                        />\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_credentials_card %}\\n                                            <swag-paypal-credentials v-if=\\\"tab === 'general'\\\"\\n                                                                     :actualConfigData=\\\"actualConfigData\\\"\\n                                                                     :allConfigs=\\\"allConfigs\\\"\\n                                                                     :selectedSalesChannelId=\\\"selectedSalesChannelId\\\"\\n                                                                     :clientIdErrorState=\\\"clientIdErrorState\\\"\\n                                                                     :clientSecretErrorState=\\\"clientSecretErrorState\\\"\\n                                                                     :clientIdSandboxErrorState=\\\"clientIdSandboxErrorState\\\"\\n                                                                     :clientSecretSandboxErrorState=\\\"clientSecretSandboxErrorState\\\"\\n                                                                     :clientIdFilled=\\\"clientIdFilled\\\"\\n                                                                     :clientSecretFilled=\\\"clientSecretFilled\\\"\\n                                                                     :clientIdSandboxFilled=\\\"clientIdSandboxFilled\\\"\\n                                                                     :clientSecretSandboxFilled=\\\"clientSecretSandboxFilled\\\"\\n                                                                     :isLoading=\\\"isLoading\\\">\\n                                            </swag-paypal-credentials>\\n                                        {% endblock %}\\n\\n                                        {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                                        {% block swag_paypal_content_card_channel_config_plus %}\\n                                            <swag-paypal-plus v-if=\\\"showPlusCard && tab === 'storefront'\\\"\\n                                                              :actualConfigData=\\\"actualConfigData\\\"\\n                                                              :allConfigs=\\\"allConfigs\\\"\\n                                                              :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-plus>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_behavior %}\\n                                            <swag-paypal-behavior v-if=\\\"tab === 'general'\\\"\\n                                                                  :actualConfigData=\\\"actualConfigData\\\"\\n                                                                  :allConfigs=\\\"allConfigs\\\"\\n                                                                  :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-behavior>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_express %}\\n                                            <swag-paypal-express v-if=\\\"tab === 'storefront'\\\"\\n                                                                 :actualConfigData=\\\"actualConfigData\\\"\\n                                                                 :allConfigs=\\\"allConfigs\\\"\\n                                                                 :selectedSalesChannelId=\\\"selectedSalesChannelId\\\"\\n                                                                 @preventSave=\\\"preventSave\\\">\\n                                            </swag-paypal-express>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_installment %}\\n                                            <swag-paypal-installment v-if=\\\"tab === 'storefront'\\\"\\n                                                                     :actualConfigData=\\\"actualConfigData\\\"\\n                                                                     :allConfigs=\\\"allConfigs\\\"\\n                                                                     :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-installment>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_acdc %}\\n                                            <swag-paypal-acdc v-if=\\\"tab === 'general'\\\"\\n                                                              :actualConfigData=\\\"actualConfigData\\\"\\n                                                              :allConfigs=\\\"allConfigs\\\"\\n                                                              :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-acdc>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_pui %}\\n                                            <swag-paypal-pui v-if=\\\"tab === 'general'\\\"\\n                                                             :actualConfigData=\\\"actualConfigData\\\"\\n                                                             :allConfigs=\\\"allConfigs\\\"\\n                                                             :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-pui>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_spb %}\\n                                            <swag-paypal-spb v-if=\\\"showSPBCard && tab === 'storefront'\\\"\\n                                                             :actualConfigData=\\\"actualConfigData\\\"\\n                                                             :allConfigs=\\\"allConfigs\\\"\\n                                                             :selectedSalesChannelId=\\\"selectedSalesChannelId\\\"\\n                                                             @preventSave=\\\"preventSave\\\">\\n                                            </swag-paypal-spb>\\n                                        {% endblock %}\\n                                    </template>\\n                                {% endblock %}\\n\\n                            </sw-sales-channel-config>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_loading %}\\n                            <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                        {% endblock %}\\n\\n                    </sw-card-view>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n    </sw-page>\\n{% endblock %}\\n\";","import './swag-paypal-settings-hint.scss';\nimport template from './swag-paypal-settings-hint.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-settings-hint', {\n    template,\n\n    props: {\n        hintText: {\n            type: String,\n            required: true,\n        },\n    },\n});\n","export default \"{% block swag_paypal_settings_hint %}\\n    <p class=\\\"swag-paypal-settings-hint\\\">\\n        {{ hintText }}\\n    </p>\\n{% endblock %}\\n\";","import template from './swag-paypal-acdc.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-acdc', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    methods: {\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_acdc %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-acdc\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.acdc.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_acdc_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-acdc-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_acdc_settings_detail_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.acdcForce3DS']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.acdcForce3DS']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.acdcForce3DS']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.acdcForce3DS\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.acdc.acdcForce3DS.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.acdc.acdcForce3DS.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-behavior.html.twig';\nimport constants from '../../page/swag-paypal/swag-paypal-consts';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-behavior', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            ...constants,\n        };\n    },\n\n    computed: {\n        intentOptions() {\n            return [\n                {\n                    id: 'CAPTURE',\n                    name: this.$tc('swag-paypal.settingForm.behavior.intent.CAPTURE'),\n                },\n                {\n                    id: 'AUTHORIZE',\n                    name: this.$tc('swag-paypal.settingForm.behavior.intent.AUTHORIZE'),\n                },\n            ];\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 Will be removed without replacement.\n         */\n        merchantLocationOptions() {\n            return [\n                {\n                    id: this.MERCHANT_LOCATION_GERMANY,\n                    name: this.$tc('swag-paypal.settingForm.behavior.merchantLocation.germany'),\n                },\n                {\n                    id: this.MERCHANT_LOCATION_OTHER,\n                    name: this.$tc('swag-paypal.settingForm.behavior.merchantLocation.other'),\n                },\n            ];\n        },\n\n        landingPageOptions() {\n            return [\n                {\n                    id: 'LOGIN',\n                    name: this.$tc('swag-paypal.settingForm.behavior.landingPage.options.login'),\n                },\n                {\n                    id: 'BILLING',\n                    name: this.$tc('swag-paypal.settingForm.behavior.landingPage.options.billing'),\n                },\n                {\n                    id: 'NO_PREFERENCE',\n                    name: this.$tc('swag-paypal.settingForm.behavior.landingPage.options.no_preference'),\n                },\n            ];\n        },\n\n        landingPageHint() {\n            let landingPageOption = this.actualConfigData['SwagPayPal.settings.landingPage'] || 'NO_PREFERENCE';\n            landingPageOption = landingPageOption.toLowerCase();\n            const translationKey = `swag-paypal.settingForm.behavior.landingPage.helpText.${landingPageOption}`;\n            return this.$tc(translationKey);\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 Will be removed without replacement.\n         */\n        loggingLevelOptions() {\n            return [\n                {\n                    value: 300,\n                    label: this.$tc('swag-paypal.settingForm.behavior.loggingLevel.options.basic'),\n                },\n                {\n                    value: 100,\n                    label: this.$tc('swag-paypal.settingForm.behavior.loggingLevel.options.advanced'),\n                },\n            ];\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 Will be removed without replacement.\n         */\n        loggingLevel: {\n            get() {\n                if (!this.allConfigs.null) {\n                    return 300;\n                }\n\n                return this.allConfigs.null['SwagPayPal.settings.loggingLevel'];\n            },\n            set(value) {\n                this.allConfigs.null['SwagPayPal.settings.loggingLevel'] = value;\n            },\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        productStreamRepository() {\n            return this.repositoryFactory.create('product_stream');\n        },\n\n        excludedProductCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n\n            return criteria;\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkArrayFieldInheritance(value) {\n            if (!Array.isArray(value)) {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_behavior %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-behavior\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.behavior.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_behavior_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-behavior-field\\\">\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_merchant_location %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.merchantLocation']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.merchantLocation']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.merchantLocation']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.merchantLocation.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.merchantLocation\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"merchantLocationOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_intent %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.intent']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.intent']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.intent']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.intent.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.intent\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"intentOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_submit_cart %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.submitCart']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.submitCart']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.submitCart']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.submitCart\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.behavior.submitCart.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.behavior.submitCart.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_brand_name %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.brandName']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.brandName']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.brandName']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-text-field name=\\\"SwagPayPal.settings.brandName\\\"\\n                                           :mapInheritance=\\\"props\\\"\\n                                           :label=\\\"$tc('swag-paypal.settingForm.behavior.brandName.label')\\\"\\n                                           :helpText=\\\"$tc('swag-paypal.settingForm.behavior.brandName.tooltipText')\\\"\\n                                           :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                           :value=\\\"props.currentValue\\\"\\n                                           {% if VUE3 %}\\n                                           @update:value=\\\"props.updateCurrentValue\\\"\\n                                           {% else %}\\n                                           @change=\\\"props.updateCurrentValue\\\"\\n                                           {% endif %}>\\n                            </sw-text-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_landing_page %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.landingPage']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.landingPage']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.landingPage']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.landingPage.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.landingPage\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"landingPageOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n\\n                            {% block swag_paypal_content_card_channel_config_behaviour_settings_landing_page_hint %}\\n                                <swag-paypal-settings-hint :hintText=\\\"landingPageHint\\\"></swag-paypal-settings-hint>\\n                            {% endblock %}\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_send_order_number %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.sendOrderNumber']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.sendOrderNumber']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.sendOrderNumber']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.sendOrderNumber\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.behavior.sendOrderNumber.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.behavior.sendOrderNumber.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_order_number %}\\n                    <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0px 30px\\\">\\n\\n                        {% block swag_paypal_content_card_channel_config_behavior_settings_order_number_prefix %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.orderNumberPrefix']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.orderNumberPrefix']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.orderNumberPrefix']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.orderNumberPrefix\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberPrefix.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberPrefix.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_behavior_settings_order_number_suffix %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.orderNumberSuffix']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.orderNumberSuffix']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.orderNumberSuffix']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.orderNumberSuffix\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberSuffix.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberSuffix.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                    </sw-container>\\n                {% endblock %}\\n\\n                {# @deprecated tag:v8.0.0 - will be removed #}\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_logging_level %}\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.excludedProductIds']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.excludedProductIds']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.excludedProductIds']\\\"\\n                        :customInheritationCheckFunction=\\\"checkArrayFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductIds.label')\\\"\\n                        :helpText=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductIds.tooltipText')\\\"\\n                    >\\n                        <template #content=\\\"props\\\">\\n                            <sw-entity-multi-id-select\\n                                name=\\\"SwagPayPal.settings.excludedProductIds\\\"\\n                                :repository=\\\"productRepository\\\"\\n                                :criteria=\\\"excludedProductCriteria\\\"\\n                                :mapInheritance=\\\"props\\\"\\n                                :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                :ids=\\\"props.currentValue\\\"\\n                                {% if VUE3 %}\\n                                @update:ids=\\\"props.updateCurrentValue\\\"\\n                                {% else %}\\n                                @change=\\\"props.updateCurrentValue\\\"\\n                                {% endif %}\\n                            >\\n\\n                                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids_label_property %}\\n                                    <template #selection-label-property=\\\"{ item }\\\">\\n                                        <sw-product-variant-info\\n                                            :variations=\\\"item.variation\\\"\\n                                        >\\n                                            {{ item.translated.name || item.name }}\\n                                        </sw-product-variant-info>\\n                                    </template>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids_result_label_property %}\\n                                    <template #result-label-property=\\\"{ item, searchTerm, highlightSearchTerm }\\\">\\n                                        <sw-product-variant-info\\n                                            :variations=\\\"item.variation\\\"\\n                                        >\\n                                            {{ item.translated.name || item.name }}\\n                                        </sw-product-variant-info>\\n                                    </template>\\n                                {% endblock %}\\n\\n                            </sw-entity-multi-id-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_streams_ids %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.excludedProductStreamIds']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.excludedProductStreamIds']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.excludedProductStreamIds']\\\"\\n                        :customInheritationCheckFunction=\\\"checkArrayFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductStreamIds.label')\\\"\\n                        :helpText=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductStreamIds.tooltipText')\\\"\\n                    >\\n                        <template #content=\\\"props\\\">\\n                            <sw-entity-multi-id-select\\n                                name=\\\"SwagPayPal.settings.excludedProductStreamIds\\\"\\n                                :repository=\\\"productStreamRepository\\\"\\n                                :mapInheritance=\\\"props\\\"\\n                                :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                :ids=\\\"props.currentValue\\\"\\n                                {% if VUE3 %}\\n                                @update:ids=\\\"props.updateCurrentValue\\\"\\n                                {% else %}\\n                                @change=\\\"props.updateCurrentValue\\\"\\n                                {% endif %}\\n                            ></sw-entity-multi-id-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-checkout.html.twig';\nimport './swag-paypal-checkout.scss';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-checkout', {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-credentials-loader',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        clientIdErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        clientSecretFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        clientIdSandboxFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        clientSecretSandboxFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n        // @deprecated tag:v8.0.0 - will be removed, credentials are separate now\n        allowShowCredentials: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        // @deprecated tag:v8.0.0 - will be removed\n        showSettingsLink: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            // @deprecated tag:v8.0.0 - will be removed, credentials are separate now\n            showCredentials: false,\n            paymentMethods: [],\n            merchantInformation: {\n                merchantIntegrations: {\n                    legalName: null,\n                    primaryEmail: null,\n                },\n                capabilities: [],\n            },\n            plusDeprecationModalOpen: false,\n            showHintMerchantIdMustBeEnteredManually: false,\n            isLoadingPaymentMethods: false,\n        };\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        paymentMethodRepository() {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        paymentMethodCriteria() {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addAssociation('media');\n\n            criteria.addFilter(Criteria.equals('plugin.name', 'SwagPayPal'));\n            criteria.addSorting(Criteria.sort('position', 'ASC'), true);\n\n            return criteria;\n        },\n\n        isLive() {\n            return !this.isSandbox;\n        },\n\n        isSandbox() {\n            return this.actualConfigData['SwagPayPal.settings.sandbox'];\n        },\n\n        liveButtonTitle() {\n            if (!this.actualConfigData['SwagPayPal.settings.clientSecret']) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.liveTitle');\n            }\n\n            if (this.isSandbox) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.changeLiveTitle');\n            }\n\n            if (!this.isOnboardingPPCPFinished) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.onboardingLiveTitle');\n            }\n\n            if (this.paymentMethods.some((pm) => this.onboardingStatus(pm) !== 'active')) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.restartOnboardingLiveTitle');\n            }\n\n            return this.$tc('swag-paypal.settingForm.checkout.button.changeLiveTitle');\n        },\n\n        sandboxButtonTitle() {\n            if (!this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.sandboxTitle');\n            }\n\n            if (this.isLive) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.changeSandboxTitle');\n            }\n\n            if (!this.isOnboardingPPCPFinished) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.onboardingSandboxTitle');\n            }\n\n            if (this.paymentMethods.find((pm) => this.onboardingStatus(pm) !== 'active')) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.restartOnboardingSandboxTitle');\n            }\n\n            return this.$tc('swag-paypal.settingForm.checkout.button.changeSandboxTitle');\n        },\n\n        sandboxToggleDisabled() {\n            return ((!this.actualConfigData['SwagPayPal.settings.clientSecret']\n                        && this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']\n                        && this.isSandbox)\n                || (this.actualConfigData['SwagPayPal.settings.clientSecret']\n                        && !this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']\n                        && this.isLive))\n                && !this.selectedSalesChannelId;\n        },\n\n        isOnboardingPPCPFinished() {\n            const sepaPaymentMethod = this.paymentMethods\n                .find((pm) => pm.formattedHandlerIdentifier === 'handler_swag_sepahandler');\n\n            if (!sepaPaymentMethod) {\n                return false;\n            }\n\n            return this.onboardingStatus(sepaPaymentMethod) === 'active';\n        },\n\n        showMerchantInformation() {\n            return this.isOnboardingPPCPFinished;\n        },\n\n        showSandboxToggle() {\n            return this.actualConfigData['SwagPayPal.settings.clientSecret']\n                || this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']\n                || this.selectedSalesChannelId;\n        },\n\n        merchantEmail() {\n            return this.merchantInformation.merchantIntegrations.primary_email\n                ?? this.merchantInformation.merchantIntegrations.tracking_id;\n        },\n    },\n\n    watch: {\n        isSandbox() {\n            this.$emit('on-save-settings');\n        },\n\n        isOnboardingPPCPFinished() {\n            // open the deactivate PayPalPLUS modal if ppcp onboarding was successful and PayPalPlus is still active\n            const plusCheckoutEnabled = this.actualConfigData['SwagPayPal.settings.plusCheckoutEnabled'];\n\n            if (!plusCheckoutEnabled) {\n                return;\n            }\n\n            this.plusDeprecationModalOpen = plusCheckoutEnabled && this.isOnboardingPPCPFinished;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            await this.getPaymentMethodsAndMerchantIntegrations();\n        },\n\n        // @deprecated tag:v8.0.0 - will be removed, credentials are separate now\n        updateShowCredentials() {\n            this.$emit('on-change-credentials-visibility', this.showCredentials);\n        },\n\n        deactivatePayPalPlus() {\n            this.$set(this.actualConfigData, 'SwagPayPal.settings.plusCheckoutEnabled', false);\n            this.$set(this.actualConfigData, 'SwagPayPal.settings.merchantLocation', 'other');\n            this.$set(this.actualConfigData, 'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled', false);\n            this.$emit('on-deactivate-paypal-plus');\n\n            this.plusDeprecationModalOpen = false;\n        },\n\n        async getPaymentMethodsAndMerchantIntegrations() {\n            this.isLoadingPaymentMethods = true;\n            await this.fetchMerchantIntegrations();\n            await this.getPaymentMethods();\n            this.isLoadingPaymentMethods = false;\n        },\n\n        async getPaymentMethods() {\n            this.paymentMethods = await this.paymentMethodRepository.search(this.paymentMethodCriteria, Context.api)\n                .then((response) => {\n                    return response.filter((paymentMethod) => {\n                        return paymentMethod.formattedHandlerIdentifier !== 'handler_swag_pospayment'\n                            && paymentMethod.formattedHandlerIdentifier !== 'handler_swag_trustlyapmhandler';\n                    });\n                });\n        },\n\n        async fetchMerchantIntegrations() {\n            this.merchantInformation = await this.SwagPayPalApiCredentialsService\n                .getMerchantInformation(this.selectedSalesChannelId)\n                .then((response) => {\n                    return response;\n                });\n            this.merchantIntegrations = this.merchantInformation.capabilities;\n        },\n\n        onboardingStatus(paymentMethod) {\n            return this.merchantInformation.capabilities[paymentMethod.id];\n        },\n\n        onChangePaymentMethodActive(paymentMethod) {\n            paymentMethod.active = !paymentMethod.active;\n\n            this.paymentMethodRepository.save(paymentMethod, Context.api)\n                .then(() => {\n                    const state = paymentMethod.active ? 'active' : 'inactive';\n\n                    this.createNotificationSuccess({\n                        message: this.$tc(\n                            `swag-paypal.settingForm.checkout.paymentMethodStatusChangedSuccess.${state}`,\n                            0,\n                            { name: paymentMethod.name },\n                        ),\n                    });\n                });\n        },\n\n        closeModal() {\n            this.plusDeprecationModalOpen = false;\n        },\n\n        onPayPalCredentialsLoadSuccess(clientId, clientSecret, merchantPayerId, sandbox) {\n            this.setConfig(clientId, clientSecret, merchantPayerId, sandbox);\n            this.$emit('on-save-settings');\n        },\n\n        onPayPalCredentialsLoadFailed(sandbox) {\n            this.setConfig('', '', '', sandbox);\n            this.createNotificationError({\n                message: this.$tc('swag-paypal.settingForm.credentials.button.messageFetchedError'),\n                duration: 10000,\n            });\n        },\n\n        setConfig(clientId, clientSecret, merchantPayerId, sandbox) {\n            const suffix = sandbox ? 'Sandbox' : '';\n            this.$set(this.actualConfigData, `SwagPayPal.settings.clientId${suffix}`, clientId);\n            this.$set(this.actualConfigData, `SwagPayPal.settings.clientSecret${suffix}`, clientSecret);\n            this.$set(this.actualConfigData, `SwagPayPal.settings.merchantPayerId${suffix}`, merchantPayerId);\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_checkout %}\\n<sw-card\\n    class=\\\"sw-card--grid\\\"\\n    position-identifier=\\\"swag-paypal-checkout\\\"\\n    :is-loading=\\\"isLoading || isLoadingPaymentMethods\\\"\\n    :title=\\\"$tc('swag-paypal.settingForm.checkout.cardTitle')\\\"\\n>\\n    <template #avatar>\\n        {% block swag_paypal_content_card_channel_config_checkout_avatar %}\\n        <img\\n            :src=\\\"assetFilter('swagpaypal/static/img/paypal-logo-avatar.svg')\\\"\\n            :alt=\\\"$tc('swag-paypal.settingForm.checkout.appImageAlt')\\\"\\n        >\\n        {% endblock %}\\n    </template>\\n\\n    <template #header-right>\\n        {% block swag_paypal_content_card_channel_config_checkout_settings_link %}\\n        <sw-internal-link\\n            v-if=\\\"showSettingsLink\\\"\\n            :routerLink=\\\"{ name: 'swag.paypal.index' }\\\"\\n        >\\n            {{ $tc('swag-paypal.settingForm.checkout.settingsLink') }}\\n        </sw-internal-link>\\n        {% endblock %}\\n    </template>\\n\\n    {% block swag_paypal_content_card_channel_config_checkout_container %}\\n    <div class=\\\"swag-paypal-checkout\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_box %}\\n        <div :class=\\\"{'swag-paypal-checkout__box': showMerchantInformation }\\\">\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_sandbox_switch %}\\n            <sw-inherit-wrapper v-if=\\\"showSandboxToggle\\\"\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% endif %}\\n                                class=\\\"swag-paypal-checkout__sandbox-toggle\\\"\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.sandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                <template #content=\\\"props\\\">\\n                    <sw-switch-field v-tooltip.left=\\\"{\\n                                         message: isSandbox ? $tc('swag-paypal.settingForm.checkout.sandbox.onlySandboxTooltip') : $tc('swag-paypal.settingForm.checkout.sandbox.onlyLiveTooltip'),\\n                                         disabled: !sandboxToggleDisabled,\\n                                     }\\\"\\n                                     name=\\\"SwagPayPal.settings.sandbox\\\"\\n                                     :mapInheritance=\\\"props\\\"\\n                                     :label=\\\"$tc('swag-paypal.settingForm.checkout.sandbox.label')\\\"\\n                                     :helpText=\\\"$tc('swag-paypal.settingForm.checkout.sandbox.helpText')\\\"\\n                                     :disabled=\\\"sandboxToggleDisabled || props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                     :value=\\\"props.currentValue\\\"\\n                                     @change=\\\"props.updateCurrentValue\\\">\\n                    </sw-switch-field>\\n                </template>\\n            </sw-inherit-wrapper>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_header %}\\n            <p\\n                v-if=\\\"!showMerchantInformation\\\"\\n                class=\\\"swag-paypal-checkout__header\\\"\\n            >\\n                {{ $tc('swag-paypal.settingForm.checkout.header') }}\\n            </p>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_description %}\\n            <p\\n                v-if=\\\"!showMerchantInformation\\\"\\n                class=\\\"swag-paypal-checkout__description\\\"\\n            >\\n                {{ $tc('swag-paypal.settingForm.checkout.description') }}\\n            </p>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_banner %}\\n            <sw-alert\\n                v-if=\\\"!isOnboardingPPCPFinished\\\"\\n                variant=\\\"info\\\"\\n                class=\\\"swag-paypal-checkout__banner\\\"\\n            >\\n                <span v-html=\\\"$tc('swag-paypal.settingForm.checkout.banner')\\\"></span>\\n            </sw-alert>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_merchant_information %}\\n            <p\\n                v-if=\\\"showMerchantInformation\\\"\\n                class=\\\"swag-paypal-checkout__merchant-information\\\"\\n            >\\n                {{ merchantEmail }}\\n                <br>\\n                {{ merchantInformation.merchantIntegrations.legal_name }}\\n            </p>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_onboarding %}\\n                {% block swag_paypal_content_card_channel_config_checkout_container_onboarding_button %}\\n                <a\\n                    class=\\\"sw-button sw-button--ghost\\\"\\n                    target=\\\"_blank\\\"\\n                    :href=\\\"onboardingUrlLive\\\"\\n                    :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                    data-paypal-onboard-complete=\\\"onboardingCallbackLive\\\"\\n                    data-paypal-button=\\\"true\\\"\\n                >\\n                    {{ liveButtonTitle }}\\n                </a>\\n                <a\\n                    class=\\\"swag-paypal-checkout__button-onboarding-sandbox\\\"\\n                    target=\\\"_blank\\\"\\n                    :href=\\\"onboardingUrlSandbox\\\"\\n                    :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                    data-paypal-onboard-complete=\\\"onboardingCallbackSandbox\\\"\\n                    data-paypal-button=\\\"true\\\"\\n                >\\n                    {{ sandboxButtonTitle }}\\n                </a>\\n                {% endblock %}\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods %}\\n        <p class=\\\"swag-paypal-checkout__payment-method-headline\\\">\\n            {{ $tc('swag-paypal.settingForm.checkout.paymentMethodText') }}\\n        </p>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods_items %}\\n        <div class=\\\"swag-paypal-checkout-payment-method_container\\\">\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods_items_item %}\\n            <swag-paypal-checkout-method\\n                v-for=\\\"paymentMethod in paymentMethods\\\"\\n                :key=\\\"paymentMethod.id\\\"\\n                :payment-method=\\\"paymentMethod\\\"\\n                :onboarding-status=\\\"onboardingStatus(paymentMethod)\\\"\\n            />\\n            {% endblock %}\\n\\n        </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_switch_show_credentials %}\\n        <sw-switch-field\\n            v-if=\\\"allowShowCredentials\\\"\\n            {% if VUE3 %}\\n            v-model:value=\\\"showCredentials\\\"\\n            {% else %}\\n            v-model=\\\"showCredentials\\\"\\n            {% endif %}\\n            :label=\\\"$tc('swag-paypal.settingForm.checkout.showCredentials')\\\"\\n            :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n            {% if VUE3 %}\\n            @update:value=\\\"updateShowCredentials\\\"\\n            {% else %}\\n            @change=\\\"updateShowCredentials\\\"\\n            {% endif %}\\n        />\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_credentials_slot %}\\n        <slot name=\\\"credentials\\\"></slot>\\n        {% endblock %}\\n\\n    </div>\\n    {% endblock %}\\n\\n    {% block sw_deactivate_paypal_plus_modal %}\\n    <sw-modal\\n        v-if=\\\"plusDeprecationModalOpen\\\"\\n        class=\\\"swag-paypal-checkout-modal\\\"\\n        :title=\\\"$tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.title')\\\"\\n        variant=\\\"default\\\"\\n        @modal-close=\\\"closeModal\\\"\\n    >\\n        {% block sw_deactivate_paypal_plus_modal_text %}\\n        <p class=\\\"swag-paypal-checkout-modal__text\\\">\\n            {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.text') }}\\n        </p>\\n        {% endblock %}\\n\\n        {% block sw_deactivate_paypal_plus_modal_warning %}\\n        <sw-alert\\n            class=\\\"swag-paypal-checkout-modal__warning\\\"\\n            variant=\\\"warning\\\"\\n        >\\n            {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.warning') }}\\n        </sw-alert>\\n        {% endblock %}\\n\\n        {% block sw_deactivate_paypal_plus_modal_footer %}\\n        <template #modal-footer>\\n            {% block sw_deactivate_paypal_plus_modal_cancel_button %}\\n            <sw-button @click=\\\"closeModal\\\">\\n                {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.button.cancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            {% block ssw_deactivate_paypal_plus_modal_confirm_button %}\\n            <sw-button\\n                variant=\\\"primary\\\"\\n                @click=\\\"deactivatePayPalPlus\\\"\\n            >\\n                {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.button.deactivate') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n\\n</sw-card>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_checkout_method %}\\n<div class=\\\"swag-paypal-checkout-method\\\">\\n\\n    {% block swag_paypal_checkout_method_icon %}\\n    <img\\n        v-if=\\\"paymentMethod.media\\\"\\n        class=\\\"swag-paypal-checkout-method__icon\\\"\\n        :src=\\\"paymentMethod.media.url\\\"\\n        :alt=\\\"paymentMethod.media.translated.alt\\\"\\n    >\\n    {% endblock %}\\n\\n    {% block swag_paypal_checkout_method_name %}\\n    <div class=\\\"swag-paypal-checkout-method__name\\\">\\n        {{ paymentMethod.translated.name }}\\n    </div>\\n    {% endblock %}\\n\\n    {% block swag_paypal_checkout_method_dynamic %}\\n    <div class=\\\"swag-paypal-checkout-method__dynamic\\\">\\n        {% block swag_paypal_checkout_method_pui_help_text %}\\n        <sw-help-text\\n            v-if=\\\"availabilityToolTip\\\"\\n            :text=\\\"availabilityToolTip\\\"\\n        />\\n        {% endblock %}\\n\\n        {% block swag_paypal_checkout_method_onboarding_status %}\\n        <sw-label\\n            v-tooltip=\\\"{\\n                message: onboardingStatusTooltip,\\n                position: 'top',\\n                disabled: !onboardingStatusTooltip,\\n            }\\\"\\n            class=\\\"swag-plugin-box-with-onboarding__status-label\\\"\\n            size=\\\"medium\\\"\\n            appearance=\\\"pill\\\"\\n            :variant=\\\"statusBadgeVariant\\\"\\n            :ghost=\\\"false\\\"\\n            :caps=\\\"false\\\"\\n        >\\n\\n            {% block swag_paypal_checkout_method_onboarding_status_badge %}\\n            <sw-color-badge\\n                class=\\\"swag-plugin-box-with-onboarding__status-badge\\\"\\n                rounded\\n                :color=\\\"statusBadgeColor\\\"\\n            />\\n            {% endblock %}\\n\\n            {% block swag_paypal_checkout_method_onboarding_status_text %}\\n            <span class=\\\"swag-plugin-box-with-onboarding__status-text\\\">\\n                {{ onboardingStatusText }}\\n            </span>\\n            {% endblock %}\\n\\n        </sw-label>\\n        {% endblock %}\\n\\n        {% block swag_paypal_checkout_method_edit_detail_link %}\\n        <router-link\\n            v-if=\\\"showEditLink\\\"\\n            class=\\\"swag-paypal-checkout-method__show-detail-link\\\"\\n            :to=\\\"editLink\\\"\\n        >\\n            {{ $tc('swag-paypal.settingForm.checkout.editDetail') }}\\n        </router-link>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    {% block swag_paypal_checkout_method_active_switch %}\\n    <sw-switch-field\\n        :label=\\\"$tc('swag-paypal.settingForm.checkout.switch.label')\\\"\\n        :disabled=\\\"paymentMethodToggleDisabled || !acl.can('swag_paypal.editor')\\\"\\n        :value=\\\"paymentMethod.active\\\"\\n        {% if VUE3 %}\\n        @update:value=\\\"onChangePaymentMethodActive\\\"\\n        {% else %}\\n        @change=\\\"onChangePaymentMethodActive\\\"\\n        {% endif %}\\n    />\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","import template from './swag-paypal-checkout-method.html.twig';\nimport './swag-paypal-checkout-method.scss';\n\nconst { Component, Context } = Shopware;\n\nComponent.register('swag-paypal-checkout-method', {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentMethod: {\n            type: Object,\n            required: true,\n        },\n        onboardingStatus: {\n            type: String,\n            required: false,\n            default: 'inactive',\n        },\n    },\n\n    data() {\n        return {\n            merchantIntegrations: {},\n        };\n    },\n\n    computed: {\n        paymentMethodRepository() {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        editLink() {\n            return {\n                name: 'sw.settings.payment.detail',\n                params: {\n                    id: this.paymentMethod.id,\n                },\n            };\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use `showEditLink` instead\n         */\n        needsOnboarding() {\n            return this.onboardingStatus?.toUpperCase() !== 'ACTIVE';\n        },\n\n        paymentMethodToggleDisabled() {\n            // should be able to deactivate active payment method\n            if (this.paymentMethod.active) {\n                return false;\n            }\n\n            return !this.showEditLink;\n        },\n\n        showEditLink() {\n            return ['active', 'limited', 'mybank', 'sofort'].includes(this.onboardingStatus);\n        },\n\n        statusBadgeVariant() {\n            let variant;\n\n            switch (this.onboardingStatus) {\n                case 'active': variant = 'success'; break;\n                case 'limited': case 'mybank': case 'sofort': variant = 'danger'; break;\n                case 'inactive': case 'ineligible': variant = 'neutral'; break;\n                case 'pending': variant = 'info'; break;\n                default: variant = 'neutral';\n            }\n\n            return variant;\n        },\n\n        statusBadgeColor() {\n            let variant;\n\n            switch (this.onboardingStatus) {\n                case 'active':\n                    variant = '#37D046';\n                    break;\n                case 'limited':\n                case 'mybank':\n                case 'sofort':\n                    variant = '#ff9800';\n                    break;\n                case 'inactive':\n                case 'ineligible':\n                    variant = '#52667A';\n                    break;\n                case 'pending':\n                    variant = '#189eff';\n                    break;\n                default:\n                    variant = '#189eff';\n            }\n\n            return variant;\n        },\n\n        onboardingStatusText() {\n            return this.$tc(`swag-paypal.settingForm.checkout.onboardingStatusText.${this.onboardingStatus}`);\n        },\n\n        onboardingStatusTooltip() {\n            const snippetKey = `swag-paypal.settingForm.checkout.onboardingStatusTooltip.${this.onboardingStatus}`;\n\n            if (!this.$te(snippetKey)) {\n                return null;\n            }\n\n            return this.$tc(snippetKey);\n        },\n\n        availabilityToolTip() {\n            const handlerElements = this.paymentMethod.formattedHandlerIdentifier.split('_');\n            const handlerName = handlerElements[handlerElements.length - 1];\n            const snippetKey = `swag-paypal.settingForm.checkout.availabilityToolTip.${handlerName}`;\n\n            if (!this.$te(snippetKey)) {\n                return null;\n            }\n\n            return this.$tc(snippetKey);\n        },\n    },\n\n    methods: {\n        onChangePaymentMethodActive() {\n            this.paymentMethod.active = !this.paymentMethod.active;\n\n            this.paymentMethodRepository.save(this.paymentMethod, Context.api)\n                .then(() => {\n                    const state = this.paymentMethod.active ? 'active' : 'inactive';\n\n                    this.createNotificationSuccess({\n                        message: this.$tc(\n                            `swag-paypal.settingForm.checkout.paymentMethodStatusChangedSuccess.${state}`,\n                            0,\n                            { name: this.paymentMethod.name },\n                        ),\n                    });\n                });\n        },\n    },\n});\n","import template from './swag-paypal-created-component-helper.html.twig';\n\nconst { Component } = Shopware;\n\n/* This component exists only to implement the createdComponent live-cycle\n * hook in without using it of the actual component. the reason is that there\n * are problems in the cloud with other plugins (e.g. Mollie) that already\n * overwrite created-Component. Since the order of plugin overrides is not deterministic,\n * race conditions can occur here.\n*/\n\nComponent.register('swag-paypal-created-component-helper', {\n    template,\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('on-created-component');\n        },\n    },\n});\n","export default \"{% block swag_paypal_created_component_helper %}\\n    {# only an empty element needed to render the component #}\\n    <div/>\\n{% endblock %}\\n\";","import template from './swag-paypal-credentials.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-credentials', {\n    template,\n\n    inject: [\n        'acl',\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        clientIdErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdFilled: {\n            type: Boolean,\n            required: true,\n        },\n        clientSecretFilled: {\n            type: Boolean,\n            required: true,\n        },\n        clientIdSandboxFilled: {\n            type: Boolean,\n            required: true,\n        },\n        clientSecretSandboxFilled: {\n            type: Boolean,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isTestingLive: false,\n            isTestingSandbox: false,\n            isTestLiveSuccessful: false,\n            isTestSandboxSuccessful: false,\n        };\n    },\n\n    computed: {\n        testLiveButtonDisabled() {\n            return this.isLoading || !this.clientSecretFilled || !this.clientIdFilled || this.isTestingLive;\n        },\n\n        testSandboxButtonDisabled() {\n            return this.isLoading || !this.clientSecretSandboxFilled || !this.clientIdSandboxFilled || this.isTestingSandbox;\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        onTest(sandbox) {\n            if (sandbox) {\n                this.isTestingSandbox = true;\n            } else {\n                this.isTestingLive = true;\n            }\n\n            const sandboxSetting = sandbox ? 'Sandbox' : '';\n            const clientId = this.actualConfigData[`SwagPayPal.settings.clientId${sandboxSetting}`] ||\n                    this.allConfigs.null[`SwagPayPal.settings.clientId${sandboxSetting}`];\n            const clientSecret = this.actualConfigData[`SwagPayPal.settings.clientSecret${sandboxSetting}`] ||\n                    this.allConfigs.null[`SwagPayPal.settings.clientSecret${sandboxSetting}`];\n\n            this.SwagPayPalApiCredentialsService.validateApiCredentials(\n                clientId,\n                clientSecret,\n                sandbox,\n            ).then((response) => {\n                const credentialsValid = response.credentialsValid;\n\n                if (credentialsValid) {\n                    if (sandbox) {\n                        this.isTestingSandbox = false;\n                        this.isTestSandboxSuccessful = true;\n                    } else {\n                        this.isTestingLive = false;\n                        this.isTestLiveSuccessful = true;\n                    }\n                }\n            }).catch((errorResponse) => {\n                if (errorResponse.response.data && errorResponse.response.data.errors) {\n                    let message = `<b>${this.$tc('swag-paypal.settingForm.messageTestError')}</b> `;\n                    message += errorResponse.response.data.errors.map((error) => {\n                        return error.detail;\n                    }).join(' / ');\n\n                    this.createNotificationError({\n                        message: message,\n                    });\n\n                    if (sandbox) {\n                        this.isTestingSandbox = false;\n                        this.isTestSandboxSuccessful = false;\n                    } else {\n                        this.isTestingLive = false;\n                        this.isTestLiveSuccessful = false;\n                    }\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_credentials %}\\n    <sw-card position-identifier=\\\"swag-paypal-credentials\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.credentials.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_credentials_card_container %}\\n            <sw-container>\\n\\n                {% block swag_paypal_content_card_channel_config_credentials_card_container_settings %}\\n                    <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-credentials-fields\\\">\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientId']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientId']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientId']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientId\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientId.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientId.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientIdErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientSecret']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientSecret']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientSecret']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientSecret\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientSecret.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientSecret.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientSecretErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_merchant_id %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.merchantPayerId']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.merchantPayerId']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.merchantPayerId']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.merchantPayerId\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerId.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerId.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test %}\\n                            <sw-button-process\\n                                {% if VUE3 %}\\n                                v-model:processSuccess=\\\"isTestLiveSuccessful\\\"\\n                                {% else %}\\n                                v-model=\\\"isTestLiveSuccessful\\\"\\n                                {% endif %}\\n                                class=\\\"swag-paypal-settings-credentials-fields__test-button\\\"\\n                                :isLoading=\\\"isTestingLive\\\"\\n                                :disabled=\\\"testLiveButtonDisabled\\\"\\n                                @click=\\\"onTest(false)\\\">\\n                                {{ $tc('swag-paypal.settingForm.testLive') }}\\n                            </sw-button-process>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.sandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-switch-field name=\\\"SwagPayPal.settings.sandbox\\\"\\n                                                     :mapInheritance=\\\"props\\\"\\n                                                     :label=\\\"$tc('swag-paypal.settingForm.credentials.sandbox.label')\\\"\\n                                                     :helpText=\\\"$tc('swag-paypal.settingForm.credentials.sandbox.tooltipText')\\\"\\n                                                     :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                     :value=\\\"props.currentValue\\\"\\n                                                     {% if VUE3 %}\\n                                                     @update:value=\\\"props.updateCurrentValue\\\"\\n                                                     {% else %}\\n                                                     @change=\\\"props.updateCurrentValue\\\"\\n                                                     {% endif %}>\\n                                    </sw-switch-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientIdSandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientIdSandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientIdSandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientIdSandbox\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientIdSandbox.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientIdSandbox.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientIdSandboxErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientSecretSandbox\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientSecretSandbox.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientSecretSandbox.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientSecretSandboxErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_merchant_id_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.merchantPayerIdSandbox\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerIdSandbox.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerIdSandbox.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test_sandbox %}\\n                            <sw-button-process\\n                                {% if VUE3 %}\\n                                v-model:processSuccess=\\\"isTestSandboxSuccessful\\\"\\n                                {% else %}\\n                                v-model=\\\"isTestSandboxSuccessful\\\"\\n                                {% endif %}\\n                                :isLoading=\\\"isTestingSandbox\\\"\\n                                :disabled=\\\"testSandboxButtonDisabled\\\"\\n                                @click=\\\"onTest(true)\\\">\\n                                {{ $tc('swag-paypal.settingForm.testSandbox') }}\\n                            </sw-button-process>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-cross-border.html.twig';\nimport './swag-paypal-cross-border.scss';\n\nShopware.Component.register('swag-paypal-cross-border', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        countryOverrideOptions() {\n            const options = [{\n                label: this.$tc('locale.en-AU'),\n                value: 'en-AU',\n            }, {\n                label: this.$tc('locale.de-DE'),\n                value: 'de-DE',\n            }, {\n                label: this.$tc('locale.es-ES'),\n                value: 'es-ES',\n            }, {\n                label: this.$tc('locale.fr-FR'),\n                value: 'fr-FR',\n            }, {\n                label: this.$tc('locale.en-GB'),\n                value: 'en-GB',\n            }, {\n                label: this.$tc('locale.it-IT'),\n                value: 'it-IT',\n            }, {\n                label: this.$tc('locale.en-US'),\n                value: 'en-US',\n            }].sort((a, b) => a.label.localeCompare(b.label));\n\n            return [{\n                value: null,\n                label: this.$tc('swag-paypal.cross-border.crossBorderBuyerCountryAuto'),\n            }, ...options];\n        },\n    },\n});\n","export default \"{% block swag_paypal_cross_border %}\\n<sw-card\\n    :title=\\\"$tc('swag-paypal.cross-border.cardTitle')\\\"\\n    :disabled=\\\"isLoading\\\"\\n    class=\\\"swag-paypal-cross-border\\\"\\n    position-identifier=\\\"swag-paypal-cross-border-card\\\"\\n>\\n\\n    {% block swag_paypal_cross_border_warning_text %}\\n    <sw-alert class=\\\"swag-paypal-cross-border__warning-text\\\" variant=\\\"warning\\\">\\n        {{ $t('swag-paypal.cross-border.warningText') }}\\n    </sw-alert>\\n    {% endblock %}\\n\\n    {% block swag_paypal_cross_border_info_text %}\\n    <span class=\\\"swag-paypal-cross-border__info-text\\\">\\n        {{ $tc('swag-paypal.cross-border.infoText') }}\\n    </span>\\n    {% endblock %}\\n\\n    {% block swag_paypal_cross_border_messaging_enabled %}\\n    <sw-inherit-wrapper\\n        {% if VUE3 %}\\n            v-model:value=\\\"actualConfigData['SwagPayPal.settings.crossBorderMessagingEnabled']\\\"\\n        {% else %}\\n            v-model=\\\"actualConfigData['SwagPayPal.settings.crossBorderMessagingEnabled']\\\"\\n        {% endif %}\\n        :inherited-value=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.crossBorderMessagingEnabled']\\\"\\n    >\\n        <template #content=\\\"props\\\">\\n            <sw-switch-field\\n                name=\\\"SwagPayPal.settings.crossBorderMessagingEnabled\\\"\\n                :map-inheritance=\\\"props\\\"\\n                :label=\\\"$tc('swag-paypal.cross-border.crossBorderMessagingEnable')\\\"\\n                :disabled=\\\"isLoading || props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                :value=\\\"props.currentValue\\\"\\n                bordered\\n                {% if VUE3 %}\\n                    @update:value=\\\"props.updateCurrentValue\\\"\\n                {% else %}\\n                    @change=\\\"props.updateCurrentValue\\\"\\n                {% endif %}\\n            />\\n        </template>\\n    </sw-inherit-wrapper>\\n    {% endblock %}\\n\\n    {% block swag_paypal_cross_border_buyer_country_override %}\\n    <sw-inherit-wrapper\\n        {% if VUE3 %}\\n            v-model:value=\\\"actualConfigData['SwagPayPal.settings.crossBorderBuyerCountry']\\\"\\n        {% else %}\\n            v-model=\\\"actualConfigData['SwagPayPal.settings.crossBorderBuyerCountry']\\\"\\n        {% endif %}\\n        :inherited-value=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.crossBorderBuyerCountry']\\\"\\n    >\\n        <template #content=\\\"props\\\">\\n            <sw-single-select\\n                name=\\\"SwagPayPal.settings.crossBorderBuyerCountry\\\"\\n                :map-inheritance=\\\"props\\\"\\n                :label=\\\"$tc('swag-paypal.cross-border.crossBorderBuyerCountryOverride')\\\"\\n                :disabled=\\\"isLoading || props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                :value=\\\"props.currentValue ?? null\\\"\\n                :options=\\\"countryOverrideOptions\\\"\\n                {% if VUE3 %}\\n                    @update:value=\\\"props.updateCurrentValue\\\"\\n                {% else %}\\n                    @change=\\\"props.updateCurrentValue\\\"\\n                {% endif %}\\n            />\\n        </template>\\n    </sw-inherit-wrapper>\\n    {% endblock %}\\n</sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-express.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-express', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        buttonColorOptions() {\n            return [\n                {\n                    id: 'blue',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.blue'),\n                },\n                {\n                    id: 'black',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.black'),\n                },\n                {\n                    id: 'gold',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.gold'),\n                },\n                {\n                    id: 'silver',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.silver'),\n                },\n                {\n                    id: 'white',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.white'),\n                },\n            ];\n        },\n        buttonShapeOptions() {\n            return [\n                {\n                    id: 'pill',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.pill'),\n                },\n                {\n                    id: 'rect',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.rect'),\n                },\n            ];\n        },\n\n        renderSettingsDisabled() {\n            return !this.acl.can('swag_paypal.editor') || (\n                !this.actualConfigData['SwagPayPal.settings.ecsDetailEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsCartEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsOffCanvasEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsProductDetailEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsListingEnabled']\n            );\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        preventSave(mode) {\n            this.$emit('preventSave', mode);\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_express %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-express\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.express.cardTitle')\\\"\\n             :subtitle=\\\"$tc('swag-paypal.settingForm.express.cardSubtitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_express_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-express-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_detail_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsDetailEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsDetailEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsDetailEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsDetailEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsDetailEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsDetailEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_cart_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsCartEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsCartEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsCartEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsCartEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsCartEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsCartEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_off_canvas_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsOffCanvasEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsOffCanvasEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsOffCanvasEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsOffCanvasEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsOffCanvasEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsOffCanvasEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_login_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsLoginEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsLoginEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsLoginEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsLoginEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsLoginEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsLoginEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_listing_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsListingEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsListingEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsListingEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsListingEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsListingEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsListingEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_button_color %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsButtonColor']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsButtonColor']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsButtonColor']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonColor.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.ecsButtonColor\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonColorOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_button_shape %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsButtonShape']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsButtonShape']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsButtonShape']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonShape.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.ecsButtonShape\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonShapeOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_button_locale %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsButtonLanguageIso']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsButtonLanguageIso']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsButtonLanguageIso']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <swag-paypal-locale-field name=\\\"SwagPayPal.settings.ecsButtonLanguageIso\\\"\\n                                                    :mapInheritance=\\\"props\\\"\\n                                                    :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonLanguageIso.label')\\\"\\n                                                    :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsButtonLanguageIso.helpText')\\\"\\n                                                    :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                                    :value=\\\"props.currentValue\\\"\\n                                                    {% if VUE3 %}\\n                                                    @update:value=\\\"props.updateCurrentValue\\\"\\n                                                    {% else %}\\n                                                    @change=\\\"props.updateCurrentValue\\\"\\n                                                    {% endif %}\\n                                                    @preventSave=\\\"preventSave\\\">\\n                            </swag-paypal-locale-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_show_pay_later %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsShowPayLater']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsShowPayLater']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsShowPayLater']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsShowPayLater\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsShowPayLater.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsShowPayLater.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-installment.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-installment', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_installment %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-installment\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.installment.cardTitle')\\\"\\n             :subtitle=\\\"$tc('swag-paypal.settingForm.installment.cardSubtitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_installment_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-installment-fields\\\">\\n\\n                {# @deprecated tag:v8.0.0 - will be removed #}\\n                {% block swag_paypal_content_card_channel_config_installment_settings_checkout_enabled %}\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_detail_page_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerDetailPageEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerDetailPageEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerDetailPageEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.detailPage.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.detailPage.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_cart_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerCartEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerCartEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerCartEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.cart.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.cart.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_off_canvas_cart_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerOffCanvasCartEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerOffCanvasCartEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerOffCanvasCartEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.offCanvasCart.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.offCanvasCart.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_login_page_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.installmentBannerEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerLoginPageEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerLoginPageEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerLoginPageEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.loginPage.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.loginPage.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_footer_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerFooterEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerFooterEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerFooterEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.footer.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.footer.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-plus.html.twig';\nimport './swag-paypal-plus.scss';\n\nconst { Component } = Shopware;\n\n/**\n * @deprecated tag:v8.0.0 - Will be removed without replacement.\n */\nComponent.register('swag-paypal-plus', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        isPayPalPLUSActive() {\n            return this.actualConfigData['SwagPayPal.settings.plusCheckoutEnabled'];\n        },\n\n        isPayPalPLUSInActive() {\n            return !this.isPayPalPLUSActive;\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        ifItWasNotActive() {\n            return !this.actualConfigData['SwagPayPal.settings.plusCheckoutEnabled'];\n        },\n    },\n});\n","export default \"{# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n{% block swag_paypal_content_card_channel_config_plus %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-plus\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.plus.cardTitle')\\\">\\n\\n        {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n        {% block swag_paypal_content_card_channel_config_plus_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-plus-fields\\\">\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_plus_settings_warning %}\\n                <template v-if=\\\"isPayPalPLUSActive\\\">\\n                    <sw-alert\\n                        variant=\\\"warning\\\"\\n                    >\\n                        <span v-html=\\\"$tc('swag-paypal.settingForm.plus.warning.active')\\\"></span>\\n                    </sw-alert>\\n                </template>\\n\\n                <template v-if=\\\"isPayPalPLUSInActive\\\">\\n                    <sw-alert\\n                        variant=\\\"info\\\"\\n                    >\\n                        <span v-html=\\\"$tc('swag-paypal.settingForm.plus.warning.inactive')\\\"></span>\\n                    </sw-alert>\\n                </template>\\n                {% endblock %}\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_plus_settings_onboarding %}\\n                    <p v-bind:class=\\\"{ 'swag-paypal-payal-plus-disabled': isPayPalPLUSInActive}\\\"\\n                       v-html=\\\"$tc('swag-paypal.settingForm.plus.introduction')\\\"></p>\\n                {% endblock %}\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_plus_settings_checkout_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.plusCheckoutEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.plusCheckoutEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.plusCheckoutEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.plusCheckoutEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.plus.plusCheckoutEnabled.label')\\\"\\n                                             :disabled=\\\"ifItWasNotActive() || props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n\\n                            {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                            {% block swag_paypal_content_card_channel_config_behaviour_settings_intent_hint %}\\n                                <swag-paypal-settings-hint :hintText=\\\"$tc('swag-paypal.settingForm.plus.hint')\\\">\\n                                </swag-paypal-settings-hint>\\n                            {% endblock %}\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pui.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pui', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_pui %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-pui\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.pui.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_pui_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-pui-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_pui_settings_customer_service_instructions %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.puiCustomerServiceInstructions']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.puiCustomerServiceInstructions']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.puiCustomerServiceInstructions']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-text-field name=\\\"SwagPayPal.settings.spbButtonLanguageIso\\\"\\n                                           :mapInheritance=\\\"props\\\"\\n                                           :label=\\\"$tc('swag-paypal.settingForm.pui.customerServiceInstructions.label')\\\"\\n                                           :helpText=\\\"$tc('swag-paypal.settingForm.pui.customerServiceInstructions.helpText')\\\"\\n                                           :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                           :value=\\\"props.currentValue\\\"\\n                                           {% if VUE3 %}\\n                                           @update:value=\\\"props.updateCurrentValue\\\"\\n                                           {% else %}\\n                                           @change=\\\"props.updateCurrentValue\\\"\\n                                           {% endif %}>\\n                            </sw-text-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-settings-icon.html.twig';\nimport './swag-paypal-settings-icon.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-settings-icon', {\n    template,\n});\n","export default \"{% block swag_paypal_settings_icon %}\\n    <icons-paypal-multicolor class=\\\"swag-paypal-settings-icon\\\"></icons-paypal-multicolor>\\n{% endblock %}\\n\";","import template from './swag-paypal-spb.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-spb', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        buttonColorOptions() {\n            return [\n                {\n                    id: 'blue',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.blue'),\n                },\n                {\n                    id: 'black',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.black'),\n                },\n                {\n                    id: 'gold',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.gold'),\n                },\n                {\n                    id: 'silver',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.silver'),\n                },\n                {\n                    id: 'white',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.white'),\n                },\n            ];\n        },\n        buttonShapeOptions() {\n            return [\n                {\n                    id: 'pill',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.pill'),\n                },\n                {\n                    id: 'rect',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.rect'),\n                },\n            ];\n        },\n\n        renderSettingsDisabled() {\n            return !this.acl.can('swag_paypal.editor') || !this.actualConfigData['SwagPayPal.settings.spbCheckoutEnabled'];\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        preventSave(mode) {\n            this.$emit('preventSave', mode);\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_spb %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-spb\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.spb.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_spb_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-spb-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_checkout_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbCheckoutEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbCheckoutEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbCheckoutEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.spbCheckoutEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.spb.spbCheckoutEnabled.label')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_alternaitve_payment_methods_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbAlternativePaymentMethodsEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbAlternativePaymentMethodsEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbAlternativePaymentMethodsEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_show_pay_later %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbShowPayLater']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbShowPayLater']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbShowPayLater']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.spbShowPayLater\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.spb.spbShowPayLater.label')\\\"\\n                                             :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_color %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbButtonColor']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbButtonColor']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbButtonColor']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonColor.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.spbButtonColor\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonColorOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_shape %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbButtonShape']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbButtonShape']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbButtonShape']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonShape.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.spbButtonShape\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonShapeOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_locale %}\\n                    <sw-inherit-wrapper\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbButtonLanguageIso']\\\"\\n                            {% else %}\\n                            v-model=\\\"actualConfigData['SwagPayPal.settings.spbButtonLanguageIso']\\\"\\n                            {% endif %}\\n                            :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbButtonLanguageIso']\\\"\\n                            :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <swag-paypal-locale-field name=\\\"SwagPayPal.settings.spbButtonLanguageIso\\\"\\n                                                    :mapInheritance=\\\"props\\\"\\n                                                    :label=\\\"$tc('swag-paypal.settingForm.spb.spbButtonLanguageIso.label')\\\"\\n                                                    :helpText=\\\"$tc('swag-paypal.settingForm.spb.spbButtonLanguageIso.helpText')\\\"\\n                                                    :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                                    :value=\\\"props.currentValue\\\"\\n                                                    @change=\\\"props.updateCurrentValue\\\"\\n                                                    @preventSave=\\\"preventSave\\\">\\n                            </swag-paypal-locale-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './sw-plugin-box-with-onboarding.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.extend('swag-paypal-plugin-box-with-onboarding', 'sw-plugin-box', {\n    template,\n\n    props: {\n        paymentMethod: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n        },\n    },\n});\n","export default \"{% block sw_plugin_box_container_button %}\\n<template>\\n    {% block swag_paypal_plugin_box_with_button_link_to_extension %}\\n        <sw-button\\n            variant=\\\"ghost\\\"\\n            size=\\\"small\\\"\\n            class=\\\"sw-plugin-box__button\\\"\\n            :router-link=\\\"{ path: '/swag/paypal/index' }\\\"\\n        >\\n            {{ $tc('sw-plugin-box.buttonPluginSettings') }}\\n        </sw-button>\\n    {% endblock %}\\n</template>\\n{% endblock %}\\n\";","export default \"{% block sw_text_field %}\\n    {% block swag_paypal_locale_field %}\\n        <div class=\\\"swag-paypal-locale-field\\\">\\n\\n            {% block swag_paypal_locale_field_contextual_field %}\\n                <sw-contextual-field class=\\\"sw-field--text\\\"\\n                                     v-bind=\\\"$attrs\\\"\\n                                     :name=\\\"formFieldName\\\"\\n                                     :error=\\\"error\\\"\\n                                     @inheritance-restore=\\\"$emit('inheritance-restore', $event)\\\"\\n                                     @inheritance-remove=\\\"$emit('inheritance-remove', $event)\\\"\\n                                     {% if VUE2 %}\\n                                     v-on=\\\"$listeners\\\"\\n                                     {% endif %}>\\n\\n                    <template #sw-field-input=\\\"{ identification, error, disabled, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }\\\">\\n                        <input type=\\\"text\\\"\\n                               :name=\\\"identification\\\"\\n                               :id=\\\"identification\\\"\\n                               :disabled=\\\"disabled\\\"\\n                               :value=\\\"currentValue\\\"\\n                               :placeHolder=\\\"placeholder\\\"\\n                               @input=\\\"onInput\\\"\\n                               @focus=\\\"setFocusClass\\\"\\n                               @blur=\\\"onBlur($event, removeFocusClass)\\\"\\n                               v-on=\\\"additionalListeners\\\">\\n                    </template>\\n                </sw-contextual-field>\\n            {% endblock %}\\n\\n            {% block swag_paypal_locale_field_information %}\\n                <p class=\\\"swag-paypal-locale-field__text\\\">\\n\\n                    {% block swag_paypal_locale_field_information_text %}\\n                        {{ $tc('swag-paypal.settingForm.locale-field.infobox.text') }}\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_locale_field_information_href %}\\n                        <sw-external-link class=\\\"swag-paypal-locale-field__text-href\\\"\\n                                          href=\\\"https://developer.paypal.com/docs/api/reference/locale-codes/\\\">\\n                            {{ $tc('swag-paypal.settingForm.locale-field.infobox.href') }}\\n                        </sw-external-link>\\n                    {% endblock %}\\n\\n                </p>\\n            {% endblock %}\\n\\n        </div>\\n    {% endblock %}\\n\\n{% endblock %}\\n\";","import template from './swag-paypal-locale-field.html.twig';\nimport './swag-paypal-locale-field.scss';\n\nconst { Component } = Shopware;\nconst { debounce } = Shopware.Utils;\n\nComponent.extend('swag-paypal-locale-field', 'sw-text-field', {\n    template,\n\n    inject: ['feature'],\n\n    data() {\n        return {\n            error: null,\n        };\n    },\n\n    methods: {\n        onInput: debounce(function onInput(event) {\n            this.checkValue(event.target.value);\n        }, 350),\n\n        onBlur(event, removeFocusClass) {\n            removeFocusClass();\n            this.checkValue(event.target.value);\n        },\n\n        checkValue(value) {\n            const localeCodeRegex = /^[a-z]{2}_[A-Z]{2}$/;\n\n            if (this.feature.isActive('VUE3')) {\n                this.$emit('update:value', value || '');\n            } else {\n                this.$emit('change', value || '');\n            }\n\n\n            if (!value || localeCodeRegex.exec(value)) {\n                this.preventSave(false);\n                this.error = null;\n                return;\n            }\n\n            this.preventSave(true);\n            this.error = {\n                code: 1,\n                detail: this.$tc('swag-paypal.settingForm.locale-field.error.detail'),\n            };\n        },\n\n        preventSave(mode) {\n            this.$emit('preventSave', mode);\n        },\n    },\n});\n","import './acl';\nimport './page/swag-paypal';\nimport './components/swag-paypal-settings-hint';\nimport './components/swag-paypal-acdc';\nimport './components/swag-paypal-behavior';\nimport './components/swag-paypal-checkout';\nimport './components/swag-paypal-checkout-method';\nimport './components/swag-paypal-created-component-helper';\nimport './components/swag-paypal-credentials';\nimport './components/swag-paypal-cross-border';\nimport './components/swag-paypal-express';\nimport './components/swag-paypal-installment';\nimport './components/swag-paypal-plus';\nimport './components/swag-paypal-pui';\nimport './components/swag-paypal-settings-icon';\nimport './components/swag-paypal-spb';\nimport './components/swag-paypal-plugin-box-with-onboarding';\nimport './components/swag-paypal-locale-field';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal', {\n    type: 'plugin',\n    name: 'SwagPayPal',\n    title: 'swag-paypal.general.mainMenuItemGeneral',\n    description: 'swag-paypal.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'regular-cog',\n\n    routes: {\n        index: {\n            component: 'swag-paypal',\n            path: ':tab?',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'swag_paypal.viewer',\n            },\n        },\n    },\n\n    settingsItem: {\n        group: 'plugins',\n        to: 'swag.paypal.index',\n        iconComponent: 'swag-paypal-settings-icon',\n        backgroundEnabled: true,\n        privilege: 'swag_paypal.viewer',\n    },\n});\n","export default \"{% block swag_paypal_payment_actions %}\\n    <div>\\n        <div class=\\\"swag-paypal-payment-actions__button-container\\\">\\n            <div class=\\\"swag-paypal-payment-actions__authorize-button-group\\\">\\n\\n                {% block swag_paypal_payment_actions_void %}\\n                    <sw-button v-if=\\\"showVoidButton\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('void')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.void') }}\\n                    </sw-button>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_capture %}\\n                    <sw-button v-if=\\\"captureableAmount > 0\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('capture')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.capture') }}\\n                    </sw-button>\\n                {% endblock %}\\n            </div>\\n\\n            {% block swag_paypal_payment_actions_refund %}\\n                <sw-button variant=\\\"primary\\\"\\n                           size=\\\"small\\\"\\n                           :disabled=\\\"refundableAmount <= 0 || !acl.can('order.editor')\\\"\\n                           @click=\\\"spawnModal('refund')\\\">\\n                    {{ $tc('swag-paypal-payment.buttons.label.refund') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </div>\\n\\n        {% block swag_paypal_payment_actions_modal %}\\n                {% block swag_paypal_payment_actions_modal_capture %}\\n                    <swag-paypal-payment-action-capture v-if=\\\"modalType === 'capture'\\\"\\n                                                        :orderId=\\\"orderId\\\"\\n                                                        :paymentResource=\\\"paymentResource\\\"\\n                                                        :maxCaptureValue=\\\"captureableAmount\\\"\\n                                                        @modal-close=\\\"closeModal\\\">\\n                    </swag-paypal-payment-action-capture>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_modal_refund %}\\n                    <swag-paypal-payment-action-refund v-if=\\\"modalType === 'refund'\\\"\\n                                                       :orderId=\\\"orderId\\\"\\n                                                       :paymentResource=\\\"paymentResource\\\"\\n                                                       @modal-close=\\\"closeModal\\\">\\n                    </swag-paypal-payment-action-refund>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_modal_void %}\\n                    <swag-paypal-payment-action-void v-if=\\\"modalType === 'void'\\\"\\n                                                     :orderId=\\\"orderId\\\"\\n                                                     :paymentResource=\\\"paymentResource\\\"\\n                                                     @modal-close=\\\"closeModal\\\">\\n                    </swag-paypal-payment-action-void>\\n                {% endblock %}\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-capture.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-capture', {\n    template,\n\n    inject: ['SwagPayPalPaymentService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        maxCaptureValue: {\n            type: Number,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isFinalCapture: true,\n            captureValue: this.maxCaptureValue,\n            isLoading: true,\n            currency: this.paymentResource.transactions[0].amount.currency,\n        };\n    },\n\n    computed: {\n        showHint() {\n            return this.isFinalCapture && this.captureValue !== this.maxCaptureValue;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = false;\n        },\n\n        capture() {\n            const captureAmount = this.captureValue;\n            const currency = this.currency;\n            const isFinalCapture = this.isFinalCapture;\n            const resourceType = this.paymentResource.intent;\n            const resourceId = this.getResourceId(this.paymentResource);\n\n            this.isLoading = true;\n            this.SwagPayPalPaymentService.capturePayment(\n                this.orderId,\n                resourceType,\n                resourceId,\n                captureAmount,\n                currency,\n                isFinalCapture,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.captureAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n\n        getResourceId(paymentResource) {\n            let relatedResourceId = null;\n            paymentResource.transactions[0].related_resources.forEach((relatedResource) => {\n                if (relatedResource.authorization) {\n                    relatedResourceId = relatedResource.authorization.id;\n                }\n                if (relatedResource.order) {\n                    relatedResourceId = relatedResource.order.id;\n                }\n            });\n            return relatedResourceId;\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_action_capture %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.capture`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_capture_max_amount %}\\n            <sw-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"maxCaptureValue\\\"\\n                    {% else %}\\n                    v-model=\\\"maxCaptureValue\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.maxAmount')\\\"\\n                    :disabled=\\\"true\\\">\\n            </sw-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_value %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureValue\\\"\\n                    {% else %}\\n                    v-model=\\\"captureValue\\\"\\n                    {% endif %}\\n                    :max=\\\"maxCaptureValue\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.currentAmount')\\\">\\n                <template #suffix>\\n                    {{ currency }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_is_final_capture %}\\n            <sw-checkbox-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"isFinalCapture\\\"\\n                    {% else %}\\n                    v-model=\\\"isFinalCapture\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.isFinal')\\\">\\n            </sw-checkbox-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_hint %}\\n            <sw-alert v-if=\\\"showHint\\\">\\n                {{ $tc('swag-paypal-payment.captureAction.isFinalHint') }}\\n            </sw-alert>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_submit_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"capture\\\">\\n                    {{ $tc('swag-paypal-payment.captureAction.button.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_payment_action_refund %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.refund`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_refund_invoice_select %}\\n            <sw-select-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"selectedCaptureId\\\"\\n                    {% else %}\\n                    v-model=\\\"selectedCaptureId\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.invoiceSelect.label')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"preserveCapture\\\"\\n                    {% else %}\\n                    @change=\\\"preserveCapture\\\"\\n                    {% endif %}>\\n                <option v-for=\\\"capture in captures\\\"\\n                        :value=\\\"capture.id\\\">\\n                    {{ capture.label }}\\n                </option>\\n            </sw-select-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_invoice_number %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundInvoiceNumber\\\"\\n                    {% elseif %}\\n                    v-model=\\\"refundInvoiceNumber\\\"\\n                    {% endif %}\\n                    maxLength=\\\"127\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_reason %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundReason\\\"\\n                    {% elseif %}\\n                    v-model=\\\"refundReason\\\"\\n                    {% endif %}\\n                    maxLength=\\\"30\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundReason.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundReason.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_amount %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"refundAmount\\\"\\n                    {% endif %}\\n                    :max=\\\"refundableAmount\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.label')\\\"\\n                    :helpText=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.helpText')\\\">\\n                <template #suffix>\\n                    {{ selectedCapture.currency }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_description %}\\n            <sw-textarea-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundDescription\\\"\\n                    {% else %}\\n                    v-model=\\\"refundDescription\\\"\\n                    {% endif %}\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundDescription.placeholder')\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundDescription.label')\\\">\\n            </sw-textarea-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_confirm_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"refund\\\">\\n                    {{ $tc('swag-paypal-payment.refundAction.confirmButton.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export const REFUNDED_STATE = 'refunded';\nexport const VOIDED_STATE = 'voided';\nexport const CAPTURED_STATE = 'captured';\nexport const COMPLETED_STATE = 'completed';\nexport const CAPTURE_RESOURCE_TYPE = 'capture';\nexport const SALE_RESOURCE_TYPE = 'sale';\nexport const FAILED_STATE = 'failed';\nexport const DENIED_STATE = 'denied';\nexport const CANCELLED_STATE = 'cancelled';\n\nexport default {\n    REFUNDED_STATE,\n    VOIDED_STATE,\n    CAPTURED_STATE,\n    COMPLETED_STATE,\n    CAPTURE_RESOURCE_TYPE,\n    SALE_RESOURCE_TYPE,\n    FAILED_STATE,\n    DENIED_STATE,\n    CANCELLED_STATE,\n};\n","import template from './swag-paypal-payment-action-refund.html.twig';\nimport {\n    REFUNDED_STATE,\n    SALE_RESOURCE_TYPE,\n    CAPTURE_RESOURCE_TYPE,\n} from '../../swag-paypal-payment-consts';\n\nconst { Component, Filter } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-refund', {\n    template,\n\n    inject: ['SwagPayPalPaymentService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            captures: [],\n            selectedCapture: {},\n            existingRefunds: [],\n            refundAmount: 0,\n            refundableAmount: 0,\n            refundDescription: '',\n            refundReason: '',\n            refundInvoiceNumber: '',\n            isLoading: true,\n            selectedCaptureId: '',\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getRefundableCaptures();\n            this.mapRefunds();\n            this.selectedCaptureId = this.captures[0].id;\n            this.isLoading = false;\n            this.preserveCapture();\n            this.refundAmount = Number(this.captures[0].refundableAmount);\n        },\n\n        getRefundableCaptures() {\n            const relatedResources = this.paymentResource.transactions[0].related_resources;\n\n            this.captures = relatedResources.reduce((accumulator, relatedResource) => {\n                if (relatedResource.sale) {\n                    const sale = relatedResource.sale;\n\n                    if (sale.state !== REFUNDED_STATE) {\n                        accumulator.push(this.formatCapture(sale, SALE_RESOURCE_TYPE));\n                    }\n                }\n\n                if (relatedResource.capture) {\n                    const capture = relatedResource.capture;\n\n                    if (capture.state !== REFUNDED_STATE) {\n                        accumulator.push(this.formatCapture(capture, CAPTURE_RESOURCE_TYPE));\n                    }\n                }\n\n                if (relatedResource.refund) {\n                    this.existingRefunds.push(relatedResource.refund);\n                }\n\n                return accumulator;\n            }, this.captures);\n        },\n\n        formatCapture(resource, resourceType) {\n            const createDate = this.dateFilter(resource.create_time);\n\n            return {\n                label: `${createDate} (${resource.amount.total} ${resource.amount.currency})` +\n                    ` - ${resource.id} [${resource.state}]`,\n                id: resource.id,\n                refundableAmount: resource.amount.total,\n                currency: resource.amount.currency,\n                type: resourceType,\n            };\n        },\n\n        mapRefunds() {\n            this.existingRefunds.forEach((refund) => {\n                const capture = this.captures.find((resource) => {\n                    switch (resource.type) {\n                        case CAPTURE_RESOURCE_TYPE:\n                            return (refund.capture_id === resource.id);\n                        case SALE_RESOURCE_TYPE:\n                            return (refund.sale_id === resource.id);\n                        default:\n                            return false;\n                    }\n                });\n\n                if (capture) {\n                    let refundAmount = Number(refund.amount.total);\n                    if (refundAmount < 0) {\n                        refundAmount *= -1.0;\n                    }\n                    capture.refundableAmount -= refundAmount;\n                }\n            });\n        },\n\n        preserveCapture() {\n            const capture = this.captures.find((selectedCapture) => {\n                return selectedCapture.id === this.selectedCaptureId;\n            });\n\n            this.selectedCapture = capture;\n            this.refundableAmount = Number(capture.refundableAmount);\n            this.refundAmount = Number(capture.refundableAmount);\n        },\n\n        refund() {\n            this.isLoading = true;\n\n            let refundAmount = this.refundAmount;\n            const description = this.refundDescription;\n            const currency = this.selectedCapture.currency;\n            const resourceType = this.selectedCapture.type;\n            const resourceId = this.selectedCapture.id;\n            const reason = this.refundReason;\n            const invoiceNumber = this.refundInvoiceNumber;\n\n            if (refundAmount === 0) {\n                refundAmount = this.refundableAmount;\n            }\n\n            this.SwagPayPalPaymentService.refundPayment(\n                this.orderId,\n                resourceType,\n                resourceId,\n                refundAmount,\n                currency,\n                description,\n                reason,\n                invoiceNumber,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.refundAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_paymemnt_action_void %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.void`)\\\"\\n              @modal-close=\\\"closeModal\\\">\\n\\n        {% block swag_paypal_paymemnt_action_void_headline %}\\n            <p>{{ $tc('swag-paypal-payment.voidAction.confirm.message') }}</p>\\n        {% endblock %}\\n\\n        <template #modal-footer>\\n\\n            {% block swag_paypal_paymemnt_action_void_cancel_button %}\\n                <sw-button @click=\\\"closeModal\\\">\\n                    {{ $tc('global.default.no') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n            {% block swag_paypal_paymemnt_action_void_confirm_button %}\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"voidPayment\\\">\\n                    {{ $tc('swag-paypal-payment.voidAction.confirm.button.confirm') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </template>\\n\\n        <sw-loader v-if=\\\"isLoading\\\"\\n                   size=\\\"43px\\\">\\n        </sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-void.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-void', {\n    template,\n\n    inject: ['SwagPayPalPaymentService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n        };\n    },\n\n    methods: {\n        voidPayment() {\n            this.isLoading = true;\n            const resourceType = this.paymentResource.intent;\n            const resourceId = this.getResourceId();\n            const orderId = this.$route.params.id;\n\n            this.SwagPayPalPaymentService.voidPayment(this.orderId, resourceType, resourceId, orderId).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.voidAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.closeModal();\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n\n        getResourceId() {\n            const firstRelatedResource = this.paymentResource.transactions[0].related_resources[0];\n\n            if (firstRelatedResource.order) {\n                return firstRelatedResource.order.id;\n            }\n\n            return firstRelatedResource.authorization.id;\n        },\n\n        closeModal() {\n            this.$emit('modal-close');\n        },\n    },\n});\n","import template from './swag-paypal-payment-actions.html.twig';\nimport './swag-paypal-payment-actions.scss';\nimport './extensions/swag-paypal-payment-action-capture';\nimport './extensions/swag-paypal-payment-action-refund';\nimport './extensions/swag-paypal-payment-action-void';\nimport {\n    VOIDED_STATE,\n    CAPTURED_STATE,\n    COMPLETED_STATE,\n    CANCELLED_STATE,\n    FAILED_STATE,\n} from './swag-paypal-payment-consts';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-payment-actions', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            modalType: '',\n            refundableAmount: 0,\n            captureableAmount: 0,\n            showVoidButton: false,\n            relatedResources: null,\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.relatedResources = this.paymentResource.transactions[0].related_resources;\n            this.setPaymentActionAmounts();\n            this.setShowVoidButton();\n            this.captureableAmount = this.formatAmount(this.captureableAmount);\n            this.refundableAmount = this.formatAmount(this.refundableAmount);\n        },\n\n        spawnModal(modalType) {\n            this.modalType = modalType;\n        },\n\n        closeModal() {\n            this.modalType = '';\n        },\n\n        setPaymentActionAmounts() {\n            if (this.relatedResources === null) {\n                return;\n            }\n\n            this.relatedResources.forEach((relatedResource) => {\n                if (relatedResource.authorization) {\n                    if (relatedResource.authorization.state !== COMPLETED_STATE) {\n                        this.captureableAmount += Number(relatedResource.authorization.amount.total);\n                    }\n                }\n\n                if (relatedResource.order) {\n                    if (relatedResource.order.state !== COMPLETED_STATE) {\n                        this.captureableAmount += Number(relatedResource.order.amount.total);\n                    }\n                }\n\n                if (relatedResource.sale) {\n                    this.refundableAmount += Number(relatedResource.sale.amount.total);\n                }\n\n                if (relatedResource.capture) {\n                    const captureAmount = Number(relatedResource.capture.amount.total);\n                    this.captureableAmount -= captureAmount;\n                    this.refundableAmount += captureAmount;\n                }\n\n                if (relatedResource.refund) {\n                    if (relatedResource.refund.state !== FAILED_STATE\n                        && relatedResource.refund.state !== CANCELLED_STATE\n                    ) {\n                        let refund = Number(relatedResource.refund.amount.total);\n                        if (refund > 0) {\n                            refund *= -1.0;\n                        }\n                        this.refundableAmount += refund;\n                    }\n                }\n            });\n        },\n\n        setShowVoidButton() {\n            if (this.relatedResources === null) {\n                return;\n            }\n\n            const firstRelatedResource = this.relatedResources[0];\n\n            if (!firstRelatedResource) {\n                return;\n            }\n\n            const nonVoidAbleStates = [VOIDED_STATE, CAPTURED_STATE, COMPLETED_STATE];\n\n            if (firstRelatedResource.sale) {\n                return;\n            }\n\n            if (firstRelatedResource.order) {\n                const order = firstRelatedResource.order;\n                if (nonVoidAbleStates.includes(order.state)) {\n                    this.captureableAmount = 0;\n                    return;\n                }\n\n                this.showVoidButton = true;\n            }\n\n            if (firstRelatedResource.authorization) {\n                const authorization = firstRelatedResource.authorization;\n                if (nonVoidAbleStates.includes(authorization.state)) {\n                    this.captureableAmount = 0;\n                    return;\n                }\n\n                this.showVoidButton = true;\n            }\n        },\n\n        formatAmount(value) {\n            return Number(`${Math.round(`${value}e2`)}e-2`);\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_actions_v2 %}\\n    <div>\\n        <div class=\\\"swag-paypal-payment-actions-v2__button-container\\\">\\n            <div>\\n                {% block swag_paypal_payment_actions_v2_void %}\\n                    <sw-button v-if=\\\"showVoidButton\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('void')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.void') }}\\n                    </sw-button>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_v2_capture %}\\n                    <sw-button v-if=\\\"captureableAmount > 0\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('capture')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.capture') }}\\n                    </sw-button>\\n                {% endblock %}\\n            </div>\\n\\n            {% block swag_paypal_payment_actions_v2_refund %}\\n                <sw-button variant=\\\"primary\\\"\\n                           size=\\\"small\\\"\\n                           :disabled=\\\"refundableAmount <= 0 || !acl.can('order.editor')\\\"\\n                           @click=\\\"spawnModal('refund')\\\">\\n                    {{ $tc('swag-paypal-payment.buttons.label.refund') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </div>\\n\\n        {% block swag_paypal_payment_actions_v2_modal %}\\n            {% block swag_paypal_payment_actions_v2_modal_refund %}\\n                <swag-paypal-payment-action-v2-refund\\n                        v-if=\\\"modalType === 'refund'\\\"\\n                        :orderTransactionId=\\\"orderTransactionId\\\"\\n                        :paypalOrder=\\\"paypalOrder\\\"\\n                        :paypalPartnerAttributionId=\\\"paypalPartnerAttributionId\\\"\\n                        @modal-close=\\\"closeModal\\\">\\n                </swag-paypal-payment-action-v2-refund>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_actions_v2_modal_capture %}\\n                <swag-paypal-payment-action-v2-capture\\n                        v-if=\\\"modalType === 'capture'\\\"\\n                        :orderTransactionId=\\\"orderTransactionId\\\"\\n                        :paypalOrder=\\\"paypalOrder\\\"\\n                        :paypalPartnerAttributionId=\\\"paypalPartnerAttributionId\\\"\\n                        :captureableAmount=\\\"captureableAmount\\\"\\n                        @modal-close=\\\"closeModal\\\">\\n                </swag-paypal-payment-action-v2-capture>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_actions_v2_modal_void %}\\n                <swag-paypal-payment-action-v2-void\\n                        v-if=\\\"modalType === 'void'\\\"\\n                        :orderTransactionId=\\\"orderTransactionId\\\"\\n                        :paypalOrder=\\\"paypalOrder\\\"\\n                        :paypalPartnerAttributionId=\\\"paypalPartnerAttributionId\\\"\\n                        @modal-close=\\\"closeModal\\\">\\n                </swag-paypal-payment-action-v2-void>\\n            {% endblock %}\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-v2-capture.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-v2-capture', {\n    template,\n\n    inject: ['SwagPayPalOrderService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n\n        captureableAmount: {\n            type: Number,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            authorization: {},\n            isFinalCapture: true,\n            captureAmount: this.captureableAmount,\n            captureInvoiceNumber: '',\n            captureNoteToPayer: '',\n            currencyCode: '',\n            isLoading: true,\n        };\n    },\n\n    computed: {\n        showHint() {\n            return this.isFinalCapture && this.captureAmount !== this.captureableAmount;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.authorization = this.paypalOrder.purchase_units[0].payments.authorizations[0];\n            this.currencyCode = this.authorization.amount.currency_code;\n            this.isLoading = false;\n        },\n\n        capture() {\n            this.isLoading = true;\n\n            let captureAmount = this.captureAmount;\n            if (captureAmount === 0) {\n                captureAmount = this.captureableAmount;\n            }\n\n            this.SwagPayPalOrderService.captureAuthorization(\n                this.orderTransactionId,\n                this.authorization.id,\n                this.currencyCode,\n                captureAmount,\n                this.captureInvoiceNumber,\n                this.captureNoteToPayer,\n                this.paypalPartnerAttributionId,\n                this.isFinalCapture,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.captureAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_action_capture_v2 %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.capture`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_capture_v2_max_amount %}\\n            <sw-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureableAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"captureableAmount\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.maxAmount')\\\"\\n                    :disabled=\\\"true\\\">\\n                <template #suffix v-if=\\\"currencyCode\\\">\\n                    {{ currencyCode }}\\n                </template>\\n            </sw-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_amount %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"captureAmount\\\"\\n                    {% endif %}\\n                    :max=\\\"captureableAmount\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.currentAmount')\\\">\\n                <template #suffix v-if=\\\"currencyCode\\\">\\n                    {{ currencyCode }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_invoice_number %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureInvoiceNumber\\\"\\n                    {% else %}\\n                    v-model=\\\"captureInvoiceNumber\\\"\\n                    {% endif %}\\n                    maxLength=\\\"127\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.captureInvoiceNumber.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.captureAction.captureInvoiceNumber.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_note_to_payer %}\\n            <swag-paypal-textarea-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureNoteToPayer\\\"\\n                    {% else %}\\n                    v-model=\\\"captureNoteToPayer\\\"\\n                    {% endif %}\\n                    maxLength=\\\"255\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.captureAction.captureNoteToPayer.placeholder')\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.captureNoteToPayer.label')\\\">\\n            </swag-paypal-textarea-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_is_final_capture %}\\n            <sw-checkbox-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"isFinalCapture\\\"\\n                    {% else %}\\n                    v-model=\\\"isFinalCapture\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.isFinal')\\\">\\n            </sw-checkbox-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_hint %}\\n            <sw-alert v-if=\\\"showHint\\\">\\n                {{ $tc('swag-paypal-payment.captureAction.isFinalHint') }}\\n            </sw-alert>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_confirm_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"capture\\\">\\n                    {{ $tc('swag-paypal-payment.captureAction.button.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_payment_action_refund_v2 %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.refund`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_refund_v2_capture_select %}\\n            <sw-select-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"selectedCaptureId\\\"\\n                    {% else %}\\n                    v-model=\\\"selectedCaptureId\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.invoiceSelect.label')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"setCapture\\\"\\n                    {% else %}\\n                    @change=\\\"setCapture\\\"\\n                    {% endif %}>\\n                <option v-for=\\\"capture in captures\\\"\\n                        :value=\\\"capture.id\\\">\\n                    {{ dateFilter(capture.create_time) }} ({{ capture.amount.value }} {{ capture.amount.currency_code }}) - {{ capture.id }} [{{ capture.status }}]\\n                </option>\\n            </sw-select-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_invoice_number %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundInvoiceNumber\\\"\\n                    {% else %}\\n                    v-model=\\\"refundInvoiceNumber\\\"\\n                    {% endif %}\\n                    maxLength=\\\"127\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_amount %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"refundAmount\\\"\\n                    {% endif %}\\n                    :max=\\\"Number(selectedCapture.amount.value)\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.label')\\\"\\n                    :helpText=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.helpText')\\\">\\n                <template #suffix>\\n                    {{ selectedCapture.amount.currency_code }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_note_to_payer %}\\n            <swag-paypal-textarea-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundNoteToPayer\\\"\\n                    {% else %}\\n                    v-model=\\\"refundNoteToPayer\\\"\\n                    {% endif %}\\n                    maxLength=\\\"255\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundNoteToPayer.placeholder')\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundNoteToPayer.label')\\\">\\n            </swag-paypal-textarea-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_confirm_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"refund\\\">\\n                    {{ $tc('swag-paypal-payment.refundAction.confirmButton.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export const ORDER_CREATED = 'CREATED';\nexport const ORDER_SAVED = 'SAVED';\nexport const ORDER_APPROVED = 'APPROVED';\nexport const ORDER_VOIDED = 'VOIDED';\nexport const ORDER_COMPLETED = 'COMPLETED';\nexport const ORDER_PAYER_ACTION_REQUIRED = 'PAYER_ACTION_REQUIRED';\n\nexport const ORDER_CAPTURE_COMPLETED = 'COMPLETED';\nexport const ORDER_CAPTURE_DECLINED = 'DECLINED';\nexport const ORDER_CAPTURE_PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED';\nexport const ORDER_CAPTURE_PENDING = 'PENDING';\nexport const ORDER_CAPTURE_REFUNDED = 'REFUNDED';\n\nexport const ORDER_AUTHORIZATION_CREATED = 'CREATED';\nexport const ORDER_AUTHORIZATION_CAPTURED = 'CAPTURED';\nexport const ORDER_AUTHORIZATION_DENIED = 'DENIED';\nexport const ORDER_AUTHORIZATION_EXPIRED = 'EXPIRED';\nexport const ORDER_AUTHORIZATION_PARTIALLY_CAPTURED = 'PARTIALLY_CAPTURED';\nexport const ORDER_AUTHORIZATION_VOIDED = 'VOIDED';\nexport const ORDER_AUTHORIZATION_PENDING = 'PENDING';\n\nexport const ORDER_REFUND_CANCELLED = 'CANCELLED';\nexport const ORDER_REFUND_PENDING = 'PENDING';\nexport const ORDER_REFUND_COMPLETED = 'COMPLETED';\n\nexport default {\n    ORDER_CREATED,\n    ORDER_SAVED,\n    ORDER_APPROVED,\n    ORDER_VOIDED,\n    ORDER_COMPLETED,\n    ORDER_PAYER_ACTION_REQUIRED,\n\n    ORDER_CAPTURE_COMPLETED,\n    ORDER_CAPTURE_DECLINED,\n    ORDER_CAPTURE_PARTIALLY_REFUNDED,\n    ORDER_CAPTURE_PENDING,\n    ORDER_CAPTURE_REFUNDED,\n\n    ORDER_AUTHORIZATION_CREATED,\n    ORDER_AUTHORIZATION_CAPTURED,\n    ORDER_AUTHORIZATION_DENIED,\n    ORDER_AUTHORIZATION_EXPIRED,\n    ORDER_AUTHORIZATION_PARTIALLY_CAPTURED,\n    ORDER_AUTHORIZATION_VOIDED,\n    ORDER_AUTHORIZATION_PENDING,\n\n    ORDER_REFUND_CANCELLED,\n    ORDER_REFUND_PENDING,\n    ORDER_REFUND_COMPLETED,\n};\n","import template from './swag-paypal-payment-action-v2-refund.html.twig';\nimport { ORDER_CAPTURE_REFUNDED } from '../../../swag-paypal-payment-details-v2/swag-paypal-order-consts';\n\nconst { Component, Filter } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-v2-refund', {\n    template,\n\n    inject: ['SwagPayPalOrderService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            captures: [],\n            selectedCapture: {},\n            refundAmount: 0,\n            refundInvoiceNumber: '',\n            refundNoteToPayer: '',\n            selectedCaptureId: '',\n            isLoading: true,\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getRefundableCaptures();\n            const firstCapture = this.captures[0];\n            this.selectedCaptureId = firstCapture.id;\n            this.selectedCapture = firstCapture;\n            this.refundAmount = Number(firstCapture.amount.value);\n            this.isLoading = false;\n        },\n\n        getRefundableCaptures() {\n            const rawCaptures = this.paypalOrder.purchase_units[0].payments.captures;\n            const refundableCaptures = [];\n\n            rawCaptures.forEach((capture) => {\n                if (capture.status !== ORDER_CAPTURE_REFUNDED) {\n                    refundableCaptures.push(capture);\n                }\n            });\n\n            this.captures = refundableCaptures;\n        },\n\n        setCapture() {\n            this.selectedCapture = this.captures.find((selectedCapture) => {\n                return selectedCapture.id === this.selectedCaptureId;\n            });\n\n            this.refundAmount = Number(this.selectedCapture.amount.value);\n        },\n\n        refund() {\n            this.isLoading = true;\n\n            let refundAmount = this.refundAmount;\n            if (refundAmount === 0) {\n                refundAmount = this.selectedCapture.amount.value;\n            }\n\n            this.SwagPayPalOrderService.refundCapture(\n                this.orderTransactionId,\n                this.selectedCapture.id,\n                this.paypalOrder.id,\n                this.selectedCapture.amount.currency_code,\n                refundAmount,\n                this.refundInvoiceNumber,\n                this.refundNoteToPayer,\n                this.paypalPartnerAttributionId,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.refundAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_paymemnt_action_v2_void %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.void`)\\\"\\n              @modal-close=\\\"closeModal\\\">\\n\\n        {% block swag_paypal_paymemnt_action_v2_void_headline %}\\n            <p>{{ $tc('swag-paypal-payment.voidAction.confirm.message') }}</p>\\n        {% endblock %}\\n\\n        <template #modal-footer>\\n\\n            {% block swag_paypal_paymemnt_action_v2_void_cancel_button %}\\n                <sw-button @click=\\\"closeModal\\\">\\n                    {{ $tc('global.default.no') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n            {% block swag_paypal_paymemnt_action_v2_void_confirm_button %}\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"voidPayment\\\">\\n                    {{ $tc('swag-paypal-payment.voidAction.confirm.button.confirm') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </template>\\n\\n        <sw-loader v-if=\\\"isLoading\\\" size=\\\"43px\\\">\\n        </sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-v2-void.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-v2-void', {\n    template,\n\n    inject: ['SwagPayPalOrderService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n        };\n    },\n\n    methods: {\n        voidPayment() {\n            this.isLoading = true;\n            const authorization = this.paypalOrder.purchase_units[0].payments.authorizations[0];\n\n            this.SwagPayPalOrderService.voidAuthorization(\n                this.orderTransactionId,\n                authorization.id,\n                this.paypalPartnerAttributionId,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.voidAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.closeModal();\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n\n        closeModal() {\n            this.$emit('modal-close');\n        },\n    },\n});\n","import template from './swag-paypal-payment-actions-v2.html.twig';\nimport './extensions/swag-paypal-payment-action-v2-capture';\nimport './extensions/swag-paypal-payment-action-v2-refund';\nimport './extensions/swag-paypal-payment-action-v2-void';\nimport './swag-paypal-payment-actions-v2.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-payment-actions-v2', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n\n        refundableAmount: {\n            type: Number,\n            required: true,\n        },\n\n        captureableAmount: {\n            type: Number,\n            required: true,\n        },\n\n        showVoidButton: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            modalType: '',\n        };\n    },\n\n    methods: {\n        spawnModal(modalType) {\n            this.modalType = modalType;\n        },\n\n        closeModal() {\n            this.modalType = '';\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_details_v1 %}\\n    <div class=\\\"swag-paypal-payment-details_v1\\\">\\n        <sw-card position-identifier=\\\"swag-paypal-payment-details-v1\\\"\\n                 :title=\\\"$tc('swag-paypal-payment.paymentDetails.cardTitle')\\\">\\n            <template #grid>\\n\\n                {% block swag_paypal_payment_actions_section %}\\n                    <sw-card-section secondary\\n                                     slim>\\n                        <swag-paypal-payment-actions :orderId=\\\"orderId\\\" :paymentResource=\\\"paymentResource\\\">\\n                        </swag-paypal-payment-actions>\\n                    </sw-card-section>\\n                {% endblock %}\\n\\n                <sw-card-section divider=\\\"top\\\">\\n                    <sw-container columns=\\\"1fr\\\"\\n                                  gap=\\\"0px 30px\\\">\\n\\n                        {% block swag_paypal_payment_detail_invoice %}\\n                            {% block swag_paypal_payment_detail_invoice_heading %}\\n                                <h3>\\n                                    {{ $tc('swag-paypal-payment.paymentDetails.invoice.heading') }}\\n                                </h3>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_invoice_list %}\\n                                <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                    <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.totalAmount') }}</dt>\\n                                    <dd>{{ amount.total }} {{ currency }}</dd>\\n\\n                                    <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.subTotal') }}</dt>\\n                                    <dd> {{ amount.details.subtotal }} {{ currency }}</dd>\\n\\n                                    <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.shipping') }}</dt>\\n                                    <dd> {{ amount.details.shipping }} {{ currency }}</dd>\\n                                </sw-description-list>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_payment %}\\n                                {% block swag_paypal_payment_detail_payment_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.payment.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_payment_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.intent') }}</dt>\\n                                        <dd>{{ $tc(`swag-paypal.settingForm.behavior.intent.${paymentResource.intent}`) }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.paymentId') }}</dt>\\n                                        <dd>{{ paymentResource.id }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.cartId') }}</dt>\\n                                        <dd>{{ paymentResource.cart }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.state') }}</dt>\\n                                        <dd>{{ paymentResource.state }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.createTime') }}</dt>\\n                                        <dd>{{ createDateTime }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.updateTime') }}</dt>\\n                                        <dd>{{ updateDateTime }}</dd>\\n                                    </sw-description-list>\\n                                {% endblock %}\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_customer %}\\n                                {% block swag_paypal_payment_detail_customer_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.customer.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_customer_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.customer.payerId') }}</dt>\\n                                        <dd>{{ payerId }}</dd>\\n                                    </sw-description-list>\\n                                {% endblock %}\\n                            {% endblock %}\\n                        {% endblock %}\\n\\n                    </sw-container>\\n                </sw-card-section>\\n            </template>\\n        </sw-card>\\n\\n        {% block swag_paypal_payment_transaction_history_card %}\\n            <sw-card position-identifier=\\\"swag-paypal-payment-transaction-history-v1\\\"\\n                     :title=\\\"$tc('swag-paypal-payment.transactionHistory.cardTitle')\\\">\\n                <template #grid>\\n\\n                    {% block swag_paypal_payment_transaction_history_grid %}\\n                        <sw-data-grid :dataSource=\\\"relatedResources\\\"\\n                                      :columns=\\\"relatedResourceColumns\\\"\\n                                      :showActions=\\\"false\\\"\\n                                      :showSelection=\\\"false\\\">\\n                        </sw-data-grid>\\n                    {% endblock %}\\n\\n                </template>\\n            </sw-card>\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-details-v1.html.twig';\n\nconst { Component, Filter } = Shopware;\n\nComponent.register('swag-paypal-payment-details-v1', {\n    template,\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            relatedResources: [],\n            createDateTime: '',\n            updateDateTime: '',\n            currency: '',\n            amount: {},\n            payerId: '',\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        relatedResourceColumns() {\n            return [\n                {\n                    property: 'type',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.type'),\n                    rawData: true,\n                },\n                {\n                    property: 'total',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.amount'),\n                    rawData: true,\n                },\n                {\n                    property: 'id',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.trackingId'),\n                    rawData: true,\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.state'),\n                    rawData: true,\n                },\n                {\n                    property: 'transactionFee',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.transactionFee'),\n                    rawData: true,\n                },\n                {\n                    property: 'paymentMode',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.paymentMode'),\n                    rawData: true,\n                },\n                {\n                    property: 'create',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.createTime'),\n                    rawData: true,\n                },\n                {\n                    property: 'update',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.updateTime'),\n                    rawData: true,\n                },\n            ];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.createDateTime = this.formatDate(this.paymentResource.create_time);\n            this.updateDateTime = this.formatDate(this.paymentResource.update_time);\n            this.amount = this.paymentResource.transactions[0].amount;\n            this.currency = this.paymentResource.transactions[0].amount.currency;\n            if (this.paymentResource.payer && this.paymentResource.payer.payer_info) {\n                this.payerId = this.paymentResource.payer.payer_info.payer_id;\n            }\n\n            this.setRelatedResources();\n        },\n\n        setRelatedResources() {\n            const rawRelatedResources = this.paymentResource.transactions[0].related_resources;\n            if (rawRelatedResources === null) {\n                return;\n            }\n\n            rawRelatedResources.forEach((relatedResource) => {\n                if (relatedResource.sale) {\n                    this.pushRelatedResource('sale', relatedResource.sale);\n                }\n\n                if (relatedResource.authorization) {\n                    this.pushRelatedResource('authorization', relatedResource.authorization);\n                }\n\n                if (relatedResource.order) {\n                    this.pushRelatedResource('order', relatedResource.order);\n                }\n\n                if (relatedResource.refund) {\n                    this.pushRelatedResource('refund', relatedResource.refund);\n                }\n\n                if (relatedResource.capture) {\n                    this.pushRelatedResource('capture', relatedResource.capture);\n                }\n            });\n        },\n\n        pushRelatedResource(type, relatedResource) {\n            let transactionFee = null;\n            const currency = relatedResource.amount.currency;\n            if (relatedResource.transaction_fee) {\n                transactionFee = `${relatedResource.transaction_fee.value} ${currency}`;\n            }\n\n            this.relatedResources.push({\n                id: relatedResource.id,\n                type: this.$tc(`swag-paypal-payment.transactionHistory.states.${type}`),\n                total: `${relatedResource.amount.total} ${currency}`,\n                create: this.formatDate(relatedResource.create_time),\n                createRaw: relatedResource.create_time,\n                update: this.formatDate(relatedResource.update_time),\n                transactionFee: transactionFee,\n                status: relatedResource.state,\n                paymentMode: relatedResource.payment_mode,\n            });\n\n            this.relatedResources.sort((a, b) => {\n                const dateA = new Date(a.createRaw);\n                const dateB = new Date(b.createRaw);\n\n                return dateA - dateB;\n            });\n        },\n\n        formatDate(dateTime) {\n            return this.dateFilter(dateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_details_v2 %}\\n    <div class=\\\"swag-paypal-payment-details_v2\\\">\\n        <sw-card position-identifier=\\\"swag-paypal-payment-details-v2\\\"\\n                 :title=\\\"$tc('swag-paypal-payment.paymentDetails.cardTitle')\\\">\\n            <template #grid>\\n\\n                {% block swag_paypal_payment_actions_section %}\\n                    <sw-card-section secondary slim>\\n                        <swag-paypal-payment-actions-v2\\n                                :orderTransactionId=\\\"orderTransaction.id\\\"\\n                                :paypalOrder=\\\"paypalOrder\\\"\\n                                :paypalPartnerAttributionId=\\\"orderTransaction.customFields.swag_paypal_partner_attribution_id\\\"\\n                                :refundableAmount=\\\"refundableAmount\\\"\\n                                :captureableAmount=\\\"captureableAmount\\\"\\n                                :showVoidButton=\\\"showVoidButton\\\">\\n                        </swag-paypal-payment-actions-v2>\\n                    </sw-card-section>\\n                {% endblock %}\\n\\n                <sw-card-section divider=\\\"top\\\">\\n\\n                        {% block swag_paypal_payment_detail_invoice %}\\n                            {% block swag_paypal_payment_detail_invoice_heading %}\\n                                <h3>\\n                                    {{ $tc('swag-paypal-payment.paymentDetails.invoice.heading') }}\\n                                </h3>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_invoice_list %}\\n                                <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n\\n                                    {% block swag_paypal_payment_detail_invoice_list_total %}\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.totalAmount') }}</dt>\\n                                        <dd>{{ amount.value }} {{ currency }}</dd>\\n                                    {% endblock %}\\n\\n                                    <template v-if=\\\"amount.breakdown\\\">\\n                                        {% block swag_paypal_payment_detail_invoice_list_sub_total %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.subTotal') }}</dt>\\n                                            <dd> {{ amount.breakdown.item_total.value }} {{ currency }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_discount %}\\n                                            <template v-if=\\\"amount.breakdown.discount\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.discount') }}</dt>\\n                                                <dd> {{ amount.breakdown.discount.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_handling %}\\n                                            <template v-if=\\\"amount.breakdown.handling\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.handling') }}</dt>\\n                                                <dd> {{ amount.breakdown.handling.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_insurance %}\\n                                            <template v-if=\\\"amount.breakdown.insurance\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.insurance') }}</dt>\\n                                                <dd> {{ amount.breakdown.insurance.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_shipping %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.shipping') }}</dt>\\n                                            <dd> {{ amount.breakdown.shipping.value }} {{ currency }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_shipping_discount %}\\n                                            <template v-if=\\\"amount.breakdown.insurance\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.shipping_discount') }}</dt>\\n                                                <dd> {{ amount.breakdown.shipping_discount.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n                                    </template>\\n\\n                                </sw-description-list>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_payment %}\\n                                {% block swag_paypal_payment_detail_payment_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.payment.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_payment_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        {% block swag_paypal_payment_detail_payment_list_intent %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.intent') }}</dt>\\n                                            <dd>{{ $tc(`swag-paypal.settingForm.behavior.intent.${paypalOrder.intent}`) }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_id %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.paymentId') }}</dt>\\n                                            <dd>{{ paypalOrder.id }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_status %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.state') }}</dt>\\n                                            <dd>{{ paypalOrder.status }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_create_time %}\\n                                        <template v-if=\\\"createDateTime\\\">\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.createTime') }}</dt>\\n                                            <dd>{{ createDateTime }}</dd>\\n                                        </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_update_time %}\\n                                        <template v-if=\\\"updateDateTime\\\">\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.updateTime') }}</dt>\\n                                            <dd>{{ updateDateTime }}</dd>\\n                                        </template>\\n                                        {% endblock %}\\n\\n                                    </sw-description-list>\\n                                {% endblock %}\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_customer %}\\n                            <template v-if=\\\"payerId\\\">\\n\\n                                {% block swag_paypal_payment_detail_customer_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.customer.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_customer_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.customer.payerId') }}</dt>\\n                                        <dd>{{ payerId }}</dd>\\n                                    </sw-description-list>\\n                                {% endblock %}\\n\\n                            </template>\\n                            {% endblock %}\\n                        {% endblock %}\\n\\n                </sw-card-section>\\n            </template>\\n        </sw-card>\\n\\n        {% block swag_paypal_payment_pui_details %}\\n            <swag-paypal-pui-details v-if=\\\"puiDetails\\\"\\n                                     :details=\\\"puiDetails\\\"\\n                                     :purchase-unit-amount=\\\"amount\\\"\\n            ></swag-paypal-pui-details>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_transaction_history_card %}\\n            <sw-card position-identifier=\\\"swag-paypal-payment-transaction-history-v2\\\"\\n                     :title=\\\"$tc('swag-paypal-payment.transactionHistory.cardTitle')\\\">\\n                <template #grid>\\n\\n                    {% block swag_paypal_payment_transaction_history_grid %}\\n                        <sw-data-grid :dataSource=\\\"payments\\\"\\n                                      :columns=\\\"paymentColumns\\\"\\n                                      :showActions=\\\"false\\\"\\n                                      :showSelection=\\\"false\\\">\\n                        </sw-data-grid>\\n                    {% endblock %}\\n                </template>\\n            </sw-card>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-details-v2.html.twig';\nimport {\n    ORDER_AUTHORIZATION_CREATED,\n    ORDER_AUTHORIZATION_PARTIALLY_CAPTURED,\n    ORDER_AUTHORIZATION_PENDING,\n} from './swag-paypal-order-consts';\n\nconst { Component, Filter } = Shopware;\n\nComponent.register('swag-paypal-payment-details-v2', {\n    template,\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransaction: {\n            type: Object,\n            required: true,\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use orderTransaction instead\n         */\n        orderTransactionId: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use orderTransaction instead\n         */\n        paypalPartnerAttributionId: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            payments: [],\n            createDateTime: '',\n            updateDateTime: '',\n            currency: '',\n            amount: {},\n            payerId: '',\n            refundableAmount: 0,\n            captureableAmount: 0,\n            showVoidButton: false,\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        paymentColumns() {\n            return [\n                {\n                    property: 'type',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.type'),\n                    rawData: true,\n                },\n                {\n                    property: 'id',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.trackingId'),\n                    rawData: true,\n                },\n                {\n                    property: 'total',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.amount'),\n                    rawData: true,\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.state'),\n                    rawData: true,\n                },\n                {\n                    property: 'transactionFee',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.transactionFee'),\n                    rawData: true,\n                },\n                {\n                    property: 'create',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.createTime'),\n                    rawData: true,\n                },\n                {\n                    property: 'update',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.updateTime'),\n                    rawData: true,\n                },\n            ];\n        },\n\n        puiDetails() {\n            return this.orderTransaction.customFields.swag_paypal_pui_payment_instruction;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.createDateTime = this.formatDate(this.paypalOrder.create_time);\n            this.updateDateTime = this.formatDate(this.paypalOrder.update_time);\n            this.amount = this.paypalOrder.purchase_units[0].amount;\n            this.currency = this.amount.currency_code;\n            this.payerId = this.paypalOrder.payer?.payer_id ?? '';\n\n            this.setPayments();\n        },\n\n        setPayments() {\n            const payments = this.paypalOrder.purchase_units[0].payments;\n            if (payments === null) {\n                return;\n            }\n\n            const rawAuthorizations = payments.authorizations;\n            const rawCaptures = payments.captures;\n            const rawRefunds = payments.refunds;\n\n            if (rawAuthorizations !== null) {\n                rawAuthorizations.forEach((authorization) => {\n                    this.pushPayment('authorization', authorization);\n                    const authStatus = authorization.status;\n                    if (authStatus === ORDER_AUTHORIZATION_CREATED\n                        || authStatus === ORDER_AUTHORIZATION_PARTIALLY_CAPTURED\n                    ) {\n                        this.captureableAmount += Number(authorization.amount.value);\n                        this.showVoidButton = true;\n                    }\n                    if (authStatus === ORDER_AUTHORIZATION_PENDING) {\n                        this.showVoidButton = true;\n                    }\n                });\n            }\n\n            if (rawCaptures !== null) {\n                rawCaptures.forEach((capture) => {\n                    this.pushPayment('capture', capture);\n                    const captureAmount = Number(capture.amount.value);\n                    this.refundableAmount += captureAmount;\n                    this.captureableAmount -= captureAmount;\n                });\n            }\n\n            if (rawRefunds !== null) {\n                rawRefunds.forEach((refund) => {\n                    this.pushPayment('refund', refund);\n                    this.refundableAmount -= Number(refund.amount.value);\n                });\n            }\n\n            this.refundableAmount = this.formatAmount(this.refundableAmount);\n            this.captureableAmount = this.formatAmount(this.captureableAmount);\n        },\n\n        pushPayment(type, payment) {\n            this.payments.push({\n                id: payment.id,\n                type: this.$tc(`swag-paypal-payment.transactionHistory.states.${type}`),\n                total: `${payment.amount.value} ${payment.amount.currency_code}`,\n                create: this.formatDate(payment.create_time),\n                createRaw: payment.create_time,\n                update: this.formatDate(payment.update_time),\n                transactionFee: this.getTransactionFee(type, payment),\n                status: payment.status,\n            });\n\n            this.payments.sort((a, b) => {\n                const dateA = new Date(a.createRaw);\n                const dateB = new Date(b.createRaw);\n\n                return dateA - dateB;\n            });\n        },\n\n        getTransactionFee(type, payment) {\n            if (type === 'capture') {\n                const sellerReceivableBreakdown = payment.seller_receivable_breakdown;\n                if (sellerReceivableBreakdown === null) {\n                    return null;\n                }\n\n                const paypalFee = sellerReceivableBreakdown.paypal_fee;\n                if (paypalFee == null) {\n                    return null;\n                }\n\n                return `${paypalFee.value} ${paypalFee.currency_code}`;\n            }\n\n            if (type === 'refund') {\n                const sellerPayableBreakdown = payment.seller_payable_breakdown;\n                if (sellerPayableBreakdown === null) {\n                    return null;\n                }\n\n                const paypalFee = sellerPayableBreakdown.paypal_fee;\n                if (paypalFee === null) {\n                    return null;\n                }\n\n                return `${paypalFee.value} ${paypalFee.currency_code}`;\n            }\n\n            return null;\n        },\n\n        formatDate(dateTime) {\n            return this.dateFilter(dateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n\n        formatAmount(value) {\n            return Number(`${Math.round(`${value}e2`)}e-2`);\n        },\n    },\n});\n","import template from './swag-paypal-pui-details.html.twig';\nimport './swag-paypal-pui-details.scss';\n\nconst { Component } = Shopware;\nconst domUtils = Shopware.Utils.dom;\n\nComponent.register('swag-paypal-pui-details', {\n    template,\n\n    props: {\n        details: {\n            type: Object,\n            required: true,\n        },\n\n        purchaseUnitAmount: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    computed: {\n        copyText() {\n            return `${this.$tc('swag-paypal-payment.puiDetails.bank')} ${this.bankName}\n${this.$tc('swag-paypal-payment.puiDetails.iban')} ${this.iban}\n${this.$tc('swag-paypal-payment.puiDetails.bic')} ${this.bic}\n${this.$tc('swag-paypal-payment.puiDetails.accountHolder')} ${this.accountHolderName}\n${this.$tc('swag-paypal-payment.puiDetails.amount')} ${this.amount}\n${this.$tc('swag-paypal-payment.puiDetails.reference')} ${this.reference}`;\n        },\n\n        bankName() {\n            return this.details.deposit_bank_details.bank_name;\n        },\n\n        iban() {\n            return this.details.deposit_bank_details.iban;\n        },\n\n        bic() {\n            return this.details.deposit_bank_details.bic;\n        },\n\n        accountHolderName() {\n            return this.details.deposit_bank_details.account_holder_name;\n        },\n\n        reference() {\n            return this.details.payment_reference;\n        },\n\n        amount() {\n            return `${this.purchaseUnitAmount.value} ${this.purchaseUnitAmount.currency_code}`;\n        },\n    },\n\n    methods: {\n        async onCopy() {\n            if (!navigator?.clipboard) {\n                // non-https polyfill\n                domUtils.copyToClipboard(this.copyText);\n\n                return;\n            }\n\n            await navigator.clipboard.writeText(this.copyText);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pui_details %}\\n    <sw-card\\n        position-identifier=\\\"swag-paypal-pui-details\\\"\\n        :title=\\\"$tc('swag-paypal-payment.puiDetails.cardTitle')\\\">\\n\\n        {% block swag_paypal_pui_details_textarea %}\\n        <div class=\\\"swag-paypal-pui-details__textarea\\\">\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.bank') }}</b> {{ bankName }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.iban') }}</b> {{ iban }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.bic') }}</b> {{ bic }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.accountHolder') }}</b> {{ accountHolderName }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.amount') }}</b> {{ amount }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.reference') }}</b> {{ reference }}<br>\\n        </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pui_details_copy_button %}\\n        <sw-button\\n            class=\\\"swag-paypal-pui-details__copy-button\\\"\\n            variant=\\\"ghost\\\"\\n            size=\\\"small\\\"\\n            @click=\\\"onCopy\\\">\\n            {{ $tc('swag-paypal-payment.puiDetails.buttonCopy') }}\\n        </sw-button>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-text-field.html.twig';\n\nconst { Component } = Shopware;\n\n/**\n * @protected\n * @description Simple text field. But this one allows attribute downpassing to the input field instead of the block.\n * @status ready\n * @example-type dynamic\n * @component-example\n * <swag-paypal-text-field label=\"Name\" placeholder=\"placeholder goes here...\"></swag-paypal-text-field>\n */\nComponent.extend('swag-paypal-text-field', 'sw-text-field', {\n    template,\n});\n","export default \"{% block sw_text_field %}\\n    <sw-contextual-field\\n            v-bind=\\\"$attrs\\\"\\n            {% if VUE2 %}\\n            v-on=\\\"$listeners\\\"\\n            {% endif %}\\n            class=\\\"sw-field--text\\\"\\n            :name=\\\"formFieldName\\\"\\n            @inheritance-restore=\\\"$emit('inheritance-restore', $event)\\\"\\n            @inheritance-remove=\\\"$emit('inheritance-remove', $event)\\\">\\n\\n        <template v-if=\\\"hasPrefix\\\" #sw-contextual-field-prefix=\\\"{ disabled, identification }\\\">\\n            <slot name=\\\"prefix\\\" v-bind=\\\"{disabled, identification}\\\"></slot>\\n        </template>\\n\\n        <template #sw-field-input=\\\"{ identification, error, disabled, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }\\\">\\n            <input v-bind=\\\"$attrs\\\"\\n                   v-on=\\\"additionalListeners\\\"\\n                   type=\\\"text\\\"\\n                   :name=\\\"identification\\\"\\n                   :id=\\\"identification\\\"\\n                   :disabled=\\\"disabled\\\"\\n                   :value=\\\"currentValue\\\"\\n                   :placeHolder=\\\"placeholder\\\"\\n                   @input=\\\"onInput\\\"\\n                   @change=\\\"onChange\\\"\\n                   @focus=\\\"setFocusClass\\\"\\n                   @blur=\\\"removeFocusClass\\\">\\n        </template>\\n\\n        <template v-if=\\\"copyable || hasSuffix\\\" #sw-contextual-field-suffix=\\\"{disabled, identification}\\\">\\n            <slot name=\\\"suffix\\\" v-bind=\\\"{ identification }\\\"></slot>\\n            <sw-field-copyable v-if=\\\"copyable\\\"\\n                               :displayName=\\\"identification\\\"\\n                               :copyableText=\\\"currentValue\\\"\\n                               :tooltip=\\\"copyableTooltip\\\">\\n            </sw-field-copyable>\\n        </template>\\n    </sw-contextual-field>\\n{% endblock %}\\n\";","import template from './swag-paypal-textarea-field.html.twig';\n\nconst { Component } = Shopware;\n\n/**\n * @protected\n * @description textarea input field. But this one allows attribute downpassing to the input field instead of the block.\n * @status ready\n * @example-type static\n * @component-example\n * <swag-paypal-textarea-field label=\"Name\" placeholder=\"placeholder goes here...\"></swag-paypal-textarea-field>\n */\nComponent.extend('swag-paypal-textarea-field', 'sw-textarea-field', {\n    template,\n});\n","export default \"{% block sw_block_field %}\\n    <sw-block-field\\n            v-bind=\\\"$attrs\\\"\\n            class=\\\"sw-field--textarea\\\"\\n            :name=\\\"formFieldName\\\">\\n\\n        <template #sw-field-input=\\\"{identification, helpText, error, disabled, setFocusClass, removeFocusClass }\\\">\\n            <textarea v-bind=\\\"$attrs\\\"\\n                      :id=\\\"identification\\\"\\n                      :name=\\\"identification\\\"\\n                      :placeholder=\\\"placeholder\\\"\\n                      :disabled=\\\"disabled\\\"\\n                      :value=\\\"currentValue\\\"\\n                      @change=\\\"onChange\\\"\\n                      @input=\\\"onInput\\\"\\n                      @focus=\\\"setFocusClass\\\"\\n                      @blur=\\\"removeFocusClass\\\">\\n            </textarea>\\n        </template>\\n    </sw-block-field>\\n{% endblock %}\\n\";","export default \"{% block sw_order_detail_content_tabs_general %}\\n    {% parent %}\\n\\n    <sw-tabs-item v-if=\\\"isPayPalPayment\\\"\\n                  :route=\\\"{ name: 'swag.paypal.payment.detail', params: { id: $route.params.id } }\\\"\\n                  :title=\\\"$tc('swag-paypal.header')\\\">\\n        {{ $tc('swag-paypal.header') }}\\n    </sw-tabs-item>\\n{% endblock %}\\n\\n\\n{% block sw_order_detail_actions_slot_smart_bar_actions %}\\n    <template v-if=\\\"isEditable\\\">\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\";","import template from './sw-order-detail.html.twig';\n\nconst { Component, Context } = Shopware;\nconst { hasOwnProperty } = Shopware.Utils.object;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-detail', {\n    template,\n\n    data() {\n        return {\n            isPayPalPayment: false,\n        };\n    },\n\n    computed: {\n        isEditable() {\n            return !this.isPayPalPayment || this.$route.name !== 'swag.paypal.payment.detail';\n        },\n    },\n\n    watch: {\n        orderId: {\n            deep: true,\n            handler() {\n                if (!this.orderId) {\n                    return;\n                }\n\n                const orderRepository = this.repositoryFactory.create('order');\n                const orderCriteria = new Criteria(1, 1);\n                orderCriteria.addAssociation('transactions');\n                orderCriteria\n                    .getAssociation('transactions')\n                    .addSorting(Criteria.sort('createdAt', 'DESC'))\n                    .setLimit(1);\n\n                orderRepository.get(this.orderId, Context.api, orderCriteria).then((order) => {\n                    const transaction = order.transactions.last();\n                    if (!transaction) {\n                        return;\n                    }\n\n                    this.isPayPalPayment = hasOwnProperty(transaction, 'customFields') &&\n                        (hasOwnProperty(transaction.customFields, 'swag_paypal_order_id') ||\n                         hasOwnProperty(transaction.customFields, 'swag_paypal_transaction_id'));\n                });\n            },\n            immediate: true,\n        },\n    },\n});\n","import template from './sw-order-detail-details.html.twig';\nimport './sw-order-detail-details.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-order-detail-details', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n    ],\n\n    data() {\n        return {\n            isPayPalSandbox: false,\n        };\n    },\n\n    computed: {\n        transaction() {\n            return this.order?.transactions.last();\n        },\n\n        payPalResourceId() {\n            return this.transaction?.customFields?.swag_paypal_resource_id;\n        },\n\n        payPalCarrier() {\n            return this.order?.deliveries?.first().shippingMethod?.customFields?.swag_paypal_carrier ?? '';\n        },\n\n        payPalOrderLink() {\n            const prefix = this.isPayPalSandbox ? 'sandbox' : 'www';\n\n            return `https://${prefix}.paypal.com/activity/payment/${this.payPalResourceId}`;\n        },\n\n        payPalCarrierDescription() {\n            return this.$tc('sw-order-detail.payPalCarrierDescription', 1, { orderLink: this.payPalOrderLink });\n        },\n    },\n\n    watch: {\n        payPalResourceId: {\n            async handler(value) {\n                if (!value) {\n                    return;\n                }\n\n                const salesChannelConfig = await this.systemConfigApiService.getValues(\n                    'SwagPayPal.settings',\n                    this.order.salesChannelId,\n                );\n\n                if (salesChannelConfig.hasOwnProperty('SwagPayPal.settings.sandbox')) {\n                    this.isPayPalSandbox = salesChannelConfig['SwagPayPal.settings.sandbox'];\n                }\n\n                const config = await this.systemConfigApiService.getValues('SwagPayPal.settings');\n\n                this.isPayPalSandbox = config['SwagPayPal.settings.sandbox'];\n            },\n            immediate: true,\n        },\n    },\n});\n","export default \"{% block sw_order_detail_details_shipping_tracking_codes %}\\n    {% parent %}\\n\\n    {% block sw_order_detail_details_shipping_paypal_carrier %}\\n    <div class=\\\"swag-paypal-order-carrier\\\"\\n         v-if=\\\"payPalResourceId\\\">\\n        <sw-text-field\\n            {% if VUE3 %}\\n            v-model:value=\\\"payPalCarrier\\\"\\n            {% else %}\\n            v-model=\\\"payPalCarrier\\\"\\n            {% endif %}\\n            disabled\\n            :label=\\\"$tc('sw-order-detail.payPalCarrierLabel')\\\"\\n            :helpText=\\\"$tc('sw-order-detail.payPalCarrierHelpText')\\\"\\n            :placeholder=\\\"$tc('sw-order-detail.payPalCarrierPlaceholder')\\\"\\n        />\\n\\n        <div\\n            v-html=\\\"payPalCarrierDescription\\\"\\n            class=\\\"swag-paypal-order-carrier__description\\\"\\n        >\\n        </div>\\n    </div>\\n    {% endblock %}\\n\\n{% endblock %}\\n\";","import template from './sw-order-user-card.html.twig';\nimport './sw-order-user-card.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-order-user-card', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n    ],\n\n    data() {\n        return {\n            isPayPalSandbox: false,\n        };\n    },\n\n    computed: {\n        transaction() {\n            return this.currentOrder.transactions?.last();\n        },\n\n        payPalResourceId() {\n            return this.transaction?.customFields?.swag_paypal_resource_id;\n        },\n\n        payPalCarrier() {\n            return this.delivery?.shippingMethod?.customFields?.swag_paypal_carrier ?? '';\n        },\n\n        payPalOrderLink() {\n            const prefix = this.isPayPalSandbox ? 'sandbox' : 'www';\n\n            return `https://${prefix}.paypal.com/activity/payment/${this.payPalResourceId}`;\n        },\n\n        payPalCarrierDescription() {\n            return this.$tc('sw-order-detail.payPalCarrierDescription', 1, { orderLink: this.payPalOrderLink });\n        },\n    },\n\n    watch: {\n        payPalResourceId: {\n            async handler(value) {\n                if (!value) {\n                    return;\n                }\n\n                const salesChannelConfig = await this.systemConfigApiService.getValues(\n                    'SwagPayPal.settings',\n                    this.currentOrder.salesChannelId,\n                );\n\n                if (salesChannelConfig.hasOwnProperty('SwagPayPal.settings.sandbox')) {\n                    this.isPayPalSandbox = salesChannelConfig['SwagPayPal.settings.sandbox'];\n                }\n\n                const config = await this.systemConfigApiService.getValues('SwagPayPal.settings');\n\n                this.isPayPalSandbox = config['SwagPayPal.settings.sandbox'];\n            },\n            immediate: true,\n        },\n    },\n});\n","export default \"{% block sw_order_detail_base_secondary_info_order_overview_right_column_slot %}\\n    {% parent %}\\n\\n    {% block sw_detail_base_secondary_info_order_overview_paypal_carrier %}\\n    <template v-if=\\\"payPalResourceId\\\">\\n        <dt>\\n            {{ $tc('sw-order-detail.payPalCarrierLabel') }}\\n            <sw-help-text :text=\\\"$tc('sw-order-detail.payPalCarrierHelpText')\\\" />\\n        </dt>\\n\\n        <dd>\\n            <div>\\n                {{ payPalCarrier ? payPalCarrier : $tc('sw-order-detail.payPalCarrierPlaceholder') }}\\n            </div>\\n\\n            <div\\n                v-html=\\\"payPalCarrierDescription\\\"\\n                class=\\\"sw-user-card__paypal-carrier-description\\\"\\n            >\\n            </div>\\n        </dd>\\n    </template>\\n    {% endblock %}\\n\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_payment_detail %}\\n    <div class=\\\"swag-paypal-payment-detail\\\">\\n\\n        {% block swag_paypal_payment_detail_components %}\\n            <component v-if=\\\"!isLoading && showPayPalPayment\\\"\\n                       :is=\\\"'swag-paypal-payment-details-v1'\\\"\\n                       :paymentResource=\\\"paymentResource\\\"\\n                       :orderId=\\\"order.id\\\">\\n            </component>\\n\\n            <component v-if=\\\"!isLoading && showPayPalOrder\\\"\\n                       :is=\\\"'swag-paypal-payment-details-v2'\\\"\\n                       :paypalOrder=\\\"paypalOrder\\\"\\n                       :orderTransaction=\\\"orderTransaction\\\"\\n                       :orderTransactionId=\\\"orderTransaction.id\\\"\\n                       :paypalPartnerAttributionId=\\\"orderTransaction.customFields.swag_paypal_partner_attribution_id\\\">\\n            </component>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_detail_error_page %}\\n            {% block swag_paypal_payment_detail_error_page_canceled %}\\n                <div v-if=\\\"showCanceledPaymentError\\\">\\n                    <sw-empty-state\\n                            :title=\\\"$tc('swag-paypal-payment.errorPage.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-payment.errorPage.canceledPaymentContent')\\\"\\n                            icon=\\\"regular-shopping-bag\\\"\\n                            color=\\\"#A092F0\\\">\\n                    </sw-empty-state>\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_detail_error_page_sandbox_live %}\\n                <div v-if=\\\"showSandboxLiveError\\\">\\n                    <sw-empty-state\\n                            :title=\\\"$tc('swag-paypal-payment.errorPage.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-payment.errorPage.sandboxLiveContent')\\\"\\n                            icon=\\\"regular-shopping-bag\\\"\\n                            color=\\\"#A092F0\\\">\\n                    </sw-empty-state>\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_detail_error_page_other %}\\n                <div v-if=\\\"showGeneralError\\\">\\n                    <sw-empty-state\\n                            :title=\\\"$tc('swag-paypal-payment.errorPage.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-payment.errorPage.other')\\\"\\n                            icon=\\\"regular-shopping-bag\\\"\\n                            color=\\\"#A092F0\\\">\\n                    </sw-empty-state>\\n                </div>\\n            {% endblock %}\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-detail.html.twig';\nimport './swag-paypal-payment-detail.scss';\n\nconst { Component, Filter, Context } = Shopware;\nconst { isEmpty } = Shopware.Utils.types;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('swag-paypal-payment-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalPaymentService',\n        'SwagPayPalOrderService',\n        'repositoryFactory',\n    ],\n\n    mixins: ['notification'],\n\n    data() {\n        return {\n            order: {},\n            orderTransaction: {},\n            paypalOrder: {},\n            paymentResource: {},\n            isLoading: true,\n            orderTransactionState: null,\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        stateFailedCancelled() {\n            return this.orderTransactionState === 'failed' || this.orderTransactionState === 'cancelled';\n        },\n\n        showCanceledPaymentError() {\n            return this.isLoading === false\n                && this.showPayPalPayment === false\n                && this.showPayPalOrder === false\n                && this.stateFailedCancelled === true;\n        },\n\n        showSandboxLiveError() {\n            return this.isLoading === false\n                && this.showPayPalPayment === false\n                && this.showPayPalOrder === false\n                && this.stateFailedCancelled === false;\n        },\n\n        showGeneralError() {\n            return this.isLoading === false\n                && this.showPayPalPayment === false\n                && this.showPayPalOrder === false\n                && this.showCanceledPaymentError === false\n                && this.showSandboxLiveError === false;\n        },\n\n        showPayPalPayment() {\n            return isEmpty(this.paymentResource) === false;\n        },\n\n        showPayPalOrder() {\n            return isEmpty(this.paypalOrder) === false;\n        },\n    },\n\n    watch: {\n        '$route'() {\n            this.resetDataAttributes();\n            this.createdComponent();\n        },\n\n        'order.orderNumber'() {\n            this.emitIdentifier();\n        },\n\n        isLoading(value) {\n            this.$emit('loading-change', value);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('loading-change', true);\n            const orderId = this.$route.params.id;\n            const orderRepository = this.repositoryFactory.create('order');\n            const orderCriteria = new Criteria(1, 1);\n            orderCriteria.addAssociation('transactions.stateMachineState');\n            orderCriteria\n                .getAssociation('transactions')\n                .addSorting(Criteria.sort('createdAt', 'DESC'))\n                .setLimit(1);\n\n            orderRepository.get(orderId, Context.api, orderCriteria).then((order) => {\n                this.order = order;\n                this.orderTransaction = order.transactions.last();\n                this.orderTransactionState = this.orderTransaction.stateMachineState.technicalName;\n\n                if (this.orderTransaction.customFields === null) {\n                    this.isLoading = false;\n\n                    return;\n                }\n\n                const paypalPaymentId = this.orderTransaction.customFields.swag_paypal_transaction_id;\n                if (paypalPaymentId) {\n                    this.handlePayPalPayment(paypalPaymentId);\n                }\n                const paypalOrderId = this.orderTransaction.customFields.swag_paypal_order_id;\n                if (paypalOrderId) {\n                    this.handlePayPalOrder(paypalOrderId);\n                }\n            });\n        },\n\n        handlePayPalOrder(paypalOrderId) {\n            this.SwagPayPalOrderService.getOrderDetails(this.orderTransaction.id, paypalOrderId).then((paypalOrder) => {\n                this.paypalOrder = paypalOrder;\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        handlePayPalPayment(paypalPaymentId) {\n            this.SwagPayPalPaymentService.getPaymentDetails(this.order.id, paypalPaymentId).then((payment) => {\n                this.paymentResource = payment;\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        handleError(errorResponse) {\n            try {\n                this.createNotificationError({\n                    message: `${this.$tc('swag-paypal-payment.paymentDetails.error.title')}: ${\n                        errorResponse.response.data.errors[0].detail}`,\n                    autoClose: false,\n                });\n            } catch (e) {\n                this.createNotificationError({\n                    message: `${this.$tc('swag-paypal-payment.paymentDetails.error.title')}: ${errorResponse.message}`,\n                    autoClose: false,\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        emitIdentifier() {\n            const orderNumber = this.order !== null ? this.order.orderNumber : '';\n            this.$emit('identifier-change', orderNumber);\n        },\n\n        resetDataAttributes() {\n            this.isLoading = true;\n            this.paypalOrder = {};\n        },\n    },\n});\n","import './component/swag-paypal-payment-actions';\nimport './component/swag-paypal-payment-actions-v2';\nimport './component/swag-paypal-payment-details-v1';\nimport './component/swag-paypal-payment-details-v2';\nimport './component/swag-paypal-pui-details';\nimport './component/swag-paypal-text-field';\nimport './component/swag-paypal-textarea-field';\nimport './extension/sw-order-detail';\nimport './extension/sw-order-detail-details';\nimport './extension/sw-order-user-card';\nimport './page/swag-paypal-payment-detail';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal-payment', {\n    type: 'plugin',\n    name: 'SwagPayPal',\n    title: 'swag-paypal-payment.general.title',\n    description: 'swag-paypal-payment.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#2b52ff',\n\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.order.detail') {\n            currentRoute.children.push({\n                component: 'swag-paypal-payment-detail',\n                name: 'swag.paypal.payment.detail',\n                isChildren: true,\n                path: '/sw/order/detail/:id/paypal',\n                meta: {\n                    parentPath: 'sw.order.index',\n                    privilege: 'order.viewer',\n                },\n            });\n        }\n        next(currentRoute);\n    },\n});\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalApiCredentialsService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    validateApiCredentials(clientId, clientSecret, sandboxActive) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `_action/${this.getApiBasePath()}/validate-api-credentials`,\n                {\n                    params: { clientId, clientSecret, sandboxActive },\n                    headers: headers,\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getApiCredentials(authCode, sharedId, nonce, sandboxActive, additionalParams = {}, additionalHeaders = {}) {\n        const params = additionalParams;\n        const headers = this.getBasicHeaders(additionalHeaders);\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/get-api-credentials`,\n                { authCode, sharedId, nonce, sandboxActive },\n                { params, headers },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @param {string=} salesChannelId\n     */\n    getMerchantInformation(salesChannelId = null) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `_action/${this.getApiBasePath()}/merchant-information`,\n                {\n                    params: { salesChannelId },\n                    headers: headers,\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default SwagPayPalApiCredentialsService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPosSettingApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/pos') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * Checks, if an access token for this user data can be created\n     *\n     * @param {string} apiKey\n     * @param {string|null} salesChannelId\n     * @returns {Promise|Object}\n     */\n    validateApiCredentials(apiKey, salesChannelId = null) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`_action/${this.getApiBasePath()}/validate-api-credentials`, { apiKey, salesChannelId }, { headers })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * Fetch necessary information for the sales channel from Zettle (e.g. currency)\n     * and insert into salesChannel Object\n     *\n     * @param {Object} salesChannel\n     * @param {Boolean} forceLanguage\n     * @returns {Promise|Object}\n     */\n    fetchInformation(salesChannel, forceLanguage = false) {\n        const headers = this.getBasicHeaders();\n        const apiKey = salesChannel.extensions.paypalPosSalesChannel.apiKey;\n\n        return this.httpClient\n            .post(`${this.getApiBasePath()}/fetch-information`, { apiKey }, { headers })\n            .then((response) => {\n                const data = ApiService.handleResponse(response);\n                delete data.extensions;\n\n                if (data.languageId !== null && (salesChannel.id === null || forceLanguage)) {\n                    salesChannel.languages.length = 0;\n                    salesChannel.languages.push({\n                        id: data.languageId,\n                    });\n                } else {\n                    delete data.languageId;\n                }\n\n                Object.assign(salesChannel, data);\n\n                salesChannel.currencies.length = 0;\n                salesChannel.currencies.push({\n                    id: data.currencyId,\n                });\n\n                salesChannel.countries.length = 0;\n                salesChannel.countries.push({\n                    id: data.countryId,\n                });\n\n                return data;\n            });\n    }\n\n    /**\n     * Clone product visibilility from one sales channel to another\n     *\n     * @param {String} toSalesChannelId\n     * @param {String} fromSalesChannelId\n     * @returns {Promise|Object}\n     */\n    cloneProductVisibility(fromSalesChannelId, toSalesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/clone-product-visibility`,\n                { fromSalesChannelId, toSalesChannelId },\n                { headers },\n            ).then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * Get product count from Zettle and cloned Sales Channel\n     *\n     * @param {String} salesChannelId\n     * @param {String|null} cloneSalesChannelId\n     * @returns {Promise|Object}\n     */\n    getProductCount(salesChannelId, cloneSalesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `${this.getApiBasePath()}/product-count`,\n                {\n                    params: { salesChannelId, cloneSalesChannelId },\n                    headers,\n                },\n            ).then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @returns {string}\n     */\n    generateApiUrl() {\n        const scopes = [\n            'READ:PURCHASE',\n            'READ:FINANCE',\n            'READ:USERINFO',\n            'READ:PRODUCT',\n            'WRITE:PRODUCT',\n        ];\n\n        // eslint-disable-next-line max-len\n        return `https://my.izettle.com/apps/api-keys?name=Shopware%20integration&scopes=${scopes.join('%20')}&utm_source=local_partnership&utm_medium=ecommerce&utm_campaign=shopware`;\n    }\n}\n\nexport default SwagPayPalPosSettingApiService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPosApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/pos') {\n        super(httpClient, loginService, apiEndpoint);\n        this.basicConfig = {\n            timeout: 300000,\n        };\n    }\n\n    startCompleteSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startProductSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}/products`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startInventorySync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}/inventory`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startImageSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}/images`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startLogCleanup(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/log/cleanup/${salesChannelId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    abortSync(runId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/abort/${runId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    resetSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/reset/${salesChannelId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getProductLog(salesChannelId, page = 1, limit = 10) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.get(\n            `${this.getApiBasePath()}/product-log/${salesChannelId}`,\n            {\n                ...this.basicConfig,\n                headers,\n                params: { page, limit },\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPayPalPosApiService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPosWebhookRegisterService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/pos') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    registerWebhook(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`_action/${this.getApiBasePath()}/webhook/registration/${salesChannelId}`, {}, { headers })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    unregisterWebhook(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .delete(`_action/${this.getApiBasePath()}/webhook/registration/${salesChannelId}`, {}, { headers })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default SwagPayPalPosWebhookRegisterService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPaymentService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    getPaymentDetails(orderId, payPalPaymentId) {\n        const apiRoute = `${this.getApiBasePath()}/payment-details/${orderId}/${payPalPaymentId}`;\n        return this.httpClient.get(\n            apiRoute,\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    capturePayment(orderId, resourceType, resourceId, captureAmount, currency, isFinalCapture) {\n        const apiRoute = `_action/${this.getApiBasePath()}/capture-payment/${resourceType}/${resourceId}/${orderId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                captureAmount: captureAmount,\n                currency: currency,\n                captureIsFinal: isFinalCapture,\n            },\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    refundPayment(orderId, resourceType, resourceId, refundAmount, currency, description, reason, invoiceNumber) {\n        const apiRoute = `_action/${this.getApiBasePath()}/refund-payment/${resourceType}/${resourceId}/${orderId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                refundAmount: refundAmount,\n                currency: currency,\n                description: description,\n                reason: reason,\n                refundInvoiceNumber: invoiceNumber,\n            },\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    voidPayment(orderId, resourceType, resourceId) {\n        const apiRoute = `_action/${this.getApiBasePath()}/void-payment/${resourceType}/${resourceId}/${orderId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {},\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPayPalPaymentService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalOrderService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal-v2') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} paypalOrderId\n     */\n    getOrderDetails(orderTransactionId, paypalOrderId) {\n        const apiRoute = `${this.getApiBasePath()}/order/${orderTransactionId}/${paypalOrderId}`;\n\n        return this.httpClient.get(\n            apiRoute,\n            this.getDefaultOptions(),\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} captureId\n     * @param {String} paypalOrderId\n     * @param {String} currency\n     * @param {String|Number} amount\n     * @param {String} invoiceNumber\n     * @param {String} noteToPayer\n     * @param {String} partnerAttributionId\n     */\n    refundCapture(\n        orderTransactionId,\n        captureId,\n        paypalOrderId,\n        currency,\n        amount,\n        invoiceNumber,\n        noteToPayer,\n        partnerAttributionId,\n    ) {\n        const params = `/${orderTransactionId}/${captureId}/${paypalOrderId}`;\n        const apiRoute = `${this.getApiBasePath('', '_action')}/refund-capture${params}`;\n\n        return this.doPostRequest(apiRoute, partnerAttributionId, {\n            currency,\n            amount,\n            invoiceNumber,\n            noteToPayer,\n        });\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} authorizationId\n     * @param {String} currency\n     * @param {String|Number} amount\n     * @param {String} invoiceNumber\n     * @param {String} noteToPayer\n     * @param {String} partnerAttributionId\n     * @param {Boolean} isFinal\n     */\n    captureAuthorization(\n        orderTransactionId,\n        authorizationId,\n        currency,\n        amount,\n        invoiceNumber,\n        noteToPayer,\n        partnerAttributionId,\n        isFinal,\n    ) {\n        const params = `/${orderTransactionId}/${authorizationId}`;\n        const apiRoute = `${this.getApiBasePath('', '_action')}/capture-authorization${params}`;\n\n        return this.doPostRequest(apiRoute, partnerAttributionId, {\n            currency,\n            amount,\n            invoiceNumber,\n            noteToPayer,\n            isFinal,\n        });\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} authorizationId\n     * @param {String} partnerAttributionId\n     */\n    voidAuthorization(orderTransactionId, authorizationId, partnerAttributionId) {\n        const params = `/${orderTransactionId}/${authorizationId}`;\n        const apiRoute = `${this.getApiBasePath('', '_action')}/void-authorization${params}`;\n\n        return this.doPostRequest(apiRoute, partnerAttributionId);\n    }\n\n    /**\n     * @param {String} apiRoute\n     * @param {String} partnerAttributionId\n     * @param {Object} requestParameters\n     */\n    doPostRequest(apiRoute, partnerAttributionId, requestParameters = {}) {\n        const params = { partnerAttributionId, ...requestParameters };\n        return this.httpClient.post(\n            apiRoute,\n            params,\n            this.getDefaultOptions(),\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getDefaultOptions() {\n        return {\n            headers: this.getBasicHeaders(),\n            version: Shopware.Context.api.apiVersion,\n        };\n    }\n}\n\nexport default SwagPayPalOrderService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPaypalPaymentMethodService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * Sets the default payment method to PayPal for the given Sales Channel id.\n     *\n     * @param {String|null} salesChannelId\n     *\n     * @returns {Promise}\n     */\n    setDefaultPaymentForSalesChannel(salesChannelId = null) {\n        const apiRoute = `_action/${this.getApiBasePath()}/saleschannel-default`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                salesChannelId,\n            },\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPaypalPaymentMethodService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalDisputeApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/dispute') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * Get a list of all disputes.\n     * Provide a sales channel ID if you have different merchant accounts for your sales channels.\n     * Disputes could also be filtered by their state.\n     *\n     * @param {String|null} salesChannelId\n     * @param {String|null} disputeStateFilter\n     *\n     * @returns {Promise}\n     */\n    list(salesChannelId = null, disputeStateFilter = null) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.get(\n            this.getApiBasePath(),\n            {\n                params: { salesChannelId, disputeStateFilter },\n                headers,\n                version: Shopware.Context.api.apiVersion,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * Get the details of a dispute\n     *\n     * @param {String} disputeId\n     * @param {String|null} salesChannelId\n     *\n     * @returns {Promise}\n     */\n    detail(disputeId, salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.get(\n            `${this.getApiBasePath()}/${disputeId}`,\n            {\n                params: { salesChannelId },\n                headers,\n                version: Shopware.Context.api.apiVersion,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPayPalDisputeApiService;\n","import SwagPayPalApiCredentialsService from '../core/service/api/swag-paypal-api-credentials.service';\nimport SwagPayPalPosSettingApiService from '../core/service/api/swag-paypal-pos-setting.api.service';\nimport SwagPayPalPosApiService from '../core/service/api/swag-paypal-pos.api.service';\nimport SwagPayPalPosWebhookRegisterService from '../core/service/api/swag-paypal-pos-webhook-register.service';\nimport SwagPayPalPaymentService from '../core/service/api/swag-paypal-payment.service';\nimport SwagPayPalOrderService from '../core/service/api/swag-paypal-order.service';\nimport SwagPaypalPaymentMethodService from '../core/service/api/swag-paypal-payment-method.service';\nimport SwagPayPalDisputeApiService from '../core/service/api/swag-paypal-dispute.api.service';\n\nconst { Application } = Shopware;\n\nconst initContainer = Application.getContainer('init');\n\nApplication.addServiceProvider(\n    'SwagPayPalApiCredentialsService',\n    (container) => new SwagPayPalApiCredentialsService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPosSettingApiService',\n    (container) => new SwagPayPalPosSettingApiService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPosApiService',\n    (container) => new SwagPayPalPosApiService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPosWebhookRegisterService',\n    (container) => new SwagPayPalPosWebhookRegisterService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPaymentService',\n    (container) => new SwagPayPalPaymentService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalOrderService',\n    (container) => new SwagPayPalOrderService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPaypalPaymentMethodService',\n    (container) => new SwagPaypalPaymentMethodService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalDisputeApiService',\n    (container) => new SwagPayPalDisputeApiService(initContainer.httpClient, container.loginService),\n);\n","import deDeSnippets from '../module/extension/sw-first-run-wizard/snippets/de-DE.json';\nimport enGBSnippets from '../module/extension/sw-first-run-wizard/snippets/en-GB.json';\n\nShopware.Locale.extend('de-DE', deDeSnippets);\nShopware.Locale.extend('en-GB', enGBSnippets);\n","export default (() => {\n    const context = require.context('./svg', false, /svg$/);\n\n    return context.keys().reduce((accumulator, item) => {\n        const componentName = item.split('.')[1].split('/')[1];\n        const component = {\n            name: componentName,\n            functional: true,\n            render(createElement, elementContext) {\n                const data = elementContext.data;\n\n                return createElement('span', {\n                    class: [data.staticClass, data.class],\n                    style: data.style,\n                    attrs: data.attrs,\n                    on: data.on,\n                    domProps: {\n                        innerHTML: context(item),\n                    },\n                });\n            },\n        };\n\n        accumulator.push(component);\n        return accumulator;\n    }, []);\n})();\n","import iconComponents from '../app/assets/icons/icons';\n\nconst { Component } = Shopware;\n\nexport default (() => {\n    return iconComponents.map((component) => {\n        return Component.register(component.name, component);\n    });\n})();\n","import template from './swag-paypal-pos-status.html.twig';\nimport './swag-paypal-pos-status.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-status', {\n    template,\n\n    props: {\n        title: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        status: {\n            type: String,\n            required: true,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        disabledText: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        icon: {\n            type: String,\n            required: true,\n        },\n        iconAnimated: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        subIcon: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        showSubStatus: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n        variant: {\n            type: String,\n            default: 'info',\n            validValues: ['info', 'warning', 'error', 'success'],\n            validator(value) {\n                return ['info', 'warning', 'error', 'success'].includes(value);\n            },\n        },\n        subVariant: {\n            type: String,\n            default: 'info',\n            validValues: ['info', 'warning', 'error', 'success'],\n            validator(value) {\n                return ['info', 'warning', 'error', 'success'].includes(value);\n            },\n        },\n    },\n\n    computed: {\n        statusClasses() {\n            return {\n                'swag-paypal-pos-status': true,\n                [`swag-paypal-pos-status--${this.variant}`]: true,\n                'swag-paypal-pos-status--disabled': this.disabled,\n            };\n        },\n\n        iconClasses() {\n            return {\n                'swag-paypal-pos-status__icon': true,\n                'swag-paypal-pos-status__icon-animated': this.iconAnimated,\n            };\n        },\n\n        subIconClasses() {\n            return [\n                'swag-paypal-pos-status__subicon',\n                `swag-paypal-pos-status--${this.subVariant}`,\n            ];\n        },\n\n        showSubIcon() {\n            return this.subIcon !== null && this.subIcon !== undefined && this.subIcon !== this.icon;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_status %}\\n    <sw-card position-identifier=\\\"swag-paypal-pos-status\\\"\\n             :class=\\\"statusClasses\\\"\\n             :isLoading=\\\"isLoading\\\"\\n             :title=\\\"title\\\">\\n\\n        {% block swag_paypal_pos_status_icon %}\\n            <div class=\\\"swag-paypal-pos-status__icon-base\\\">\\n                <sw-icon :class=\\\"iconClasses\\\"\\n                         :name=\\\"icon\\\">\\n                </sw-icon>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_status %}\\n            <div class=\\\"swag-paypal-pos-status__status\\\">\\n                <slot name=\\\"status\\\">{{ status }}</slot>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_detail %}\\n            <div class=\\\"swag-paypal-pos-status__detail\\\">\\n                <slot name=\\\"detail\\\"></slot>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_substatus %}\\n            <div v-if=\\\"showSubStatus\\\" class=\\\"swag-paypal-pos-status__substatus\\\">\\n\\n                {% block swag_paypal_pos_status_substatus_icon %}\\n                    <sw-icon v-if=\\\"showSubIcon\\\"\\n                             :class=\\\"subIconClasses\\\"\\n                             :name=\\\"subIcon\\\">\\n                    </sw-icon>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_status_substatus_content %}\\n                    <span>\\n                        <slot name=\\\"substatus\\\"></slot>\\n                    </span>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_actions %}\\n            <div class=\\\"swag-paypal-pos-status__actions\\\">\\n                <slot name=\\\"actions\\\"></slot>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_disabled %}\\n            <div v-if=\\\"disabled\\\" class=\\\"swag-paypal-pos-status__disabled\\\">\\n                <slot name=\\\"disabledText\\\">{{ disabledText }}</slot>\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-account.html.twig';\nimport './swag-paypal-pos-account.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-account', {\n    template,\n\n    inject: [\n        'SwagPayPalPosSettingApiService',\n        'repositoryFactory',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            require: false,\n            default: null,\n        },\n        lastRun: {\n            type: Object,\n            require: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isError: false,\n            merchantInfo: null,\n        };\n    },\n\n    computed: {\n        accountName() {\n            if (this.isError) {\n                return this.$tc('swag-paypal-pos.account.errorName');\n            }\n\n            if (!this.merchantInfo) {\n                return this.$tc('swag-paypal-pos.account.loadingName');\n            }\n\n            return this.merchantInfo.name;\n        },\n\n        accountEmail() {\n            if (this.isError) {\n                return this.$tc('swag-paypal-pos.account.errorEmail');\n            }\n\n            if (!this.merchantInfo) {\n                return this.$tc('swag-paypal-pos.account.loadingEmail');\n            }\n\n            return this.merchantInfo.contactEmail;\n        },\n\n        connectionStatusText() {\n            if (this.isError) {\n                return this.$tc('swag-paypal-pos.account.noConnectionStatus');\n            }\n\n            return this.$tc('swag-paypal-pos.account.connectedStatus');\n        },\n\n        connectionStatusVariant() {\n            if (this.isError) {\n                return 'danger';\n            }\n\n            return 'success';\n        },\n\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        salesChannel() {\n            this.loadMerchantData();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadMerchantData();\n        },\n\n        loadMerchantData() {\n            this.isError = false;\n            this.isLoading = true;\n\n            if (this.salesChannel === null) {\n                return Promise.resolve();\n            }\n\n            return this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel)\n                .then(({ merchantInformation }) => {\n                    this.merchantInfo = merchantInformation;\n                    this.isError = false;\n                }).catch(() => {\n                    this.merchantInfo = null;\n                    this.isError = true;\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_account %}\\n    <sw-card class=\\\"swag-paypal-pos-account\\\"\\n             position-identifier=\\\"swag-paypal-pos-account\\\"\\n             :title=\\\"$tc('sw-sales-channel.detail.titleAccount')\\\"\\n             :isLoading=\\\"isLoading\\\">\\n\\n        {% block swag_paypal_pos_account_grid %}\\n            <sw-container columns=\\\"min-content 1fr\\\" align=\\\"center\\\">\\n\\n                {% block swag_paypal_pos_account_grid_logo %}\\n                    <img class=\\\"swag-paypal-pos-account__logo\\\"\\n                         alt=\\\"Zettle Logo\\\"\\n                         :src=\\\"assetFilter('/swagpaypal/static/img/paypal-pos-logo.svg')\\\">\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_account_grid_container %}\\n                    <div class=\\\"swag-paypal-pos-account__container\\\">\\n\\n                        {% block swag_paypal_pos_account_grid_container_info %}\\n                            <div class=\\\"swag-paypal-pos-account__account-info\\\">\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_name %}\\n                                    <div class=\\\"swag-paypal-pos-account__name\\\">\\n                                        {{ accountName }}\\n                                    </div>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_email %}\\n                                    <div class=\\\"swag-paypal-pos-account__email\\\">\\n                                        {{ accountEmail }}\\n                                    </div>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_link %}\\n                                    <sw-external-link href=\\\"https://my.zettle.com\\\"\\n                                                      class=\\\"swag-paypal-pos-account__manage-link\\\">\\n\\n                                        {% block swag_paypal_pos_account_grid_container_info_link_text %}\\n                                            {{ $tc('swag-paypal-pos.account.manageAccount') }}\\n                                        {% endblock %}\\n\\n                                    </sw-external-link>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_edit_button %}\\n                                    {# ToDo PPI-109 - Implement edit connection functionality #}\\n                                    <sw-button v-if=\\\"false\\\"\\n                                               class=\\\"swag-paypal-pos-account__edit-connection-button\\\"\\n                                               size=\\\"small\\\"\\n                                               block>\\n                                        {{ $tc('swag-paypal-pos.account.editConnection') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_account_grid_container_status %}\\n                            <div class=\\\"swag-paypal-pos-account__status-container\\\">\\n\\n                                {% block swag_paypal_pos_account_grid_container_status_label %}\\n                                    <sw-label class=\\\"swag-paypal-pos-account__status-label\\\"\\n                                              size=\\\"medium\\\"\\n                                              appearance=\\\"pill\\\"\\n                                              :variant=\\\"connectionStatusVariant\\\"\\n                                              :ghost=\\\"false\\\"\\n                                              :caps=\\\"false\\\">\\n\\n                                        {% block swag_paypal_pos_account_grid_container_status_label_badge %}\\n                                            <sw-color-badge class=\\\"swag-paypal-pos-account__status-color-badge\\\"\\n                                                            rounded\\n                                                            :variant=\\\"connectionStatusVariant\\\">\\n                                            </sw-color-badge>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_pos_account_grid_container_status_label_text %}\\n                                            <span class=\\\"swag-paypal-pos-account__status-text\\\">\\n                                                {{ connectionStatusText }}\\n                                            </span>\\n                                        {% endblock %}\\n                                    </sw-label>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_status_updated %}\\n                                    <div v-if=\\\"lastRun\\\"\\n                                         class=\\\"swag-paypal-pos-account__status-updated\\\">\\n                                        {{ $tc('swag-paypal-pos.account.lastUpdated') }} {{ dateFilter(lastRun.updatedAt, {\\n                                            hour: '2-digit',\\n                                            minute: '2-digit',\\n                                            second: '2-digit',\\n                                            day: '2-digit',\\n                                            month: 'short',\\n                                            year: 'numeric'\\n                                        }) }}\\n                                    </div>\\n                                {% endblock %}\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-status-view.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-status-view', {\n    template,\n\n    props: {\n        lastFinishedRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        lastCompleteRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        isLoading: {\n            type: Boolean,\n            default: false,\n        },\n        isSyncing: {\n            type: Boolean,\n            default: false,\n        },\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        syncErrors: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            statusErrorLevel: null,\n            statusCompleteErrorLevel: null,\n            iconConfig: {\n                syncing: 'regular-sync',\n                warning: 'regular-exclamation-triangle',\n                error: 'regular-times-xs',\n                success: 'regular-checkmark',\n                noRunYet: 'regular-blocked-circle',\n            },\n        };\n    },\n\n    computed: {\n        status() {\n            if (this.isSyncing) {\n                return 'syncing';\n            }\n            if (this.noRunYet) {\n                return 'noRunYet';\n            }\n            return this.statusErrorLevel;\n        },\n\n        statusVariant() {\n            if (this.isSyncing || this.noRunYet) {\n                return 'info';\n            }\n            return this.statusErrorLevel;\n        },\n\n        statusIcon() {\n            return this.iconConfig[this.status] || 'regular-info-circle';\n        },\n\n        statusIconComplete() {\n            return this.iconConfig[this.statusCompleteErrorLevel];\n        },\n\n        noRunYet() {\n            return this.salesChannel === null\n                || this.salesChannel.id === null\n                || this.lastFinishedRun === null;\n        },\n\n        incompleteLastRun() {\n            return this.salesChannel !== null && this.salesChannel.id !== null\n                && this.lastFinishedRun !== null && this.lastCompleteRun !== null\n                && this.lastFinishedRun.id !== this.lastCompleteRun.id;\n        },\n\n        statusTitle() {\n            let title = this.$tc(`swag-paypal-pos.detail.overview.status.message.${this.status}`);\n            if (this.incompleteLastRun) {\n                const task = this.$tc(`swag-paypal-pos.detail.overview.status.task.${this.lastFinishedRun.task}`);\n                if (!this.isSyncing) {\n                    title += ` (${task})`;\n                }\n            }\n\n            if (this.lastFinishedRun && this.lastFinishedRun.status === 'cancelled' && !this.isSyncing) {\n                title = this.$tc('swag-paypal-pos.detail.overview.status.message.aborted');\n            }\n\n            return title;\n        },\n\n        disabled() {\n            return this.salesChannel !== null && this.salesChannel.id !== null && this.salesChannel.active === false;\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        lastFinishedRun: {\n            handler() {\n                this.statusErrorLevel = this.getHighestLevel(this.lastFinishedRun);\n            },\n            immediate: true,\n        },\n        lastCompleteRun: {\n            handler() {\n                this.statusCompleteErrorLevel = this.getHighestLevel(this.lastCompleteRun);\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        getHighestLevel(run) {\n            if (run === null) {\n                return null;\n            }\n\n            if (run.status === 'cancelled') {\n                return 'info';\n            }\n\n            const level = Math.max(...run.logs.map((log) => { return log.level; }));\n            if (level >= 400) {\n                return 'error';\n            }\n\n            if (level >= 300) {\n                return 'warning';\n            }\n\n            return 'success';\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_status_view %}\\n    <swag-paypal-pos-status :disabled=\\\"disabled\\\"\\n                            :disabledText=\\\"$tc('swag-paypal-pos.detail.overview.status.disabled')\\\"\\n                            :icon=\\\"statusIcon\\\"\\n                            :subIcon=\\\"statusIconComplete\\\"\\n                            :iconAnimated=\\\"isSyncing\\\"\\n                            :isLoading=\\\"isLoading || status === null\\\"\\n                            :status=\\\"statusTitle\\\"\\n                            :showSubStatus=\\\"incompleteLastRun\\\"\\n                            :title=\\\"$tc('swag-paypal-pos.detail.overview.titleSync')\\\"\\n                            :variant=\\\"statusVariant\\\"\\n                            :subVariant=\\\"statusCompleteErrorLevel\\\">\\n\\n        {% block swag_paypal_pos_status_view_actions %}\\n            <template #actions>\\n                <slot name=\\\"actions\\\"></slot>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_view_detail %}\\n            <template #detail v-if=\\\"isSyncing\\\">\\n\\n                {% block swag_paypal_pos_status_view_detail_syncing %}\\n                    {{ $tc('swag-paypal-pos.detail.overview.status.syncingDetail') }}\\n                {% endblock %}\\n            </template>\\n\\n            <template #detail v-if=\\\"!isSyncing && lastFinishedRun\\\">\\n                <div>\\n                    {% block swag_paypal_pos_status_view_detail_static %}\\n                        {{ $tc('swag-paypal-pos.detail.overview.status.lastSynced') }}:\\n                        {{ dateFilter(lastFinishedRun.updatedAt, {\\n                            hour: '2-digit',\\n                            minute: '2-digit',\\n                            second: '2-digit',\\n                            day: '2-digit',\\n                            month: 'short',\\n                            year: 'numeric'\\n                        }) }}\\n                    {% endblock %}\\n                </div>\\n\\n                {% block swag_paypal_pos_status_view_detail_errors %}\\n                    <sw-alert v-if=\\\"syncErrors\\\"\\n                              variant=\\\"error\\\"\\n                              :closable=\\\"true\\\"\\n                              :title=\\\"$tc('swag-paypal-pos.detail.overview.syncErrorTitle')\\\">\\n                        <ul>\\n                            <li v-for=\\\"error in syncErrors\\\">{{ error.detail }} ({{ error.code }})</li>\\n                        </ul>\\n                    </sw-alert>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_view_substatus %}\\n            <template #substatus v-if=\\\"incompleteLastRun\\\">\\n                {{ $tc('swag-paypal-pos.detail.overview.status.lastSyncedComplete') }}:\\n                {{ dateFilter(lastCompleteRun.updatedAt, {\\n                    hour: '2-digit',\\n                    minute: '2-digit',\\n                    second: '2-digit',\\n                    day: '2-digit',\\n                    month: 'short',\\n                    year: 'numeric'\\n                }) }}\\n            </template>\\n        {% endblock %}\\n    </swag-paypal-pos-status>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-boolean-radio.html.twig';\nimport './swag-paypal-pos-boolean-radio.scss';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-pos-boolean-radio', {\n    template,\n\n    model: {\n        prop: 'value',\n        event: 'change',\n    },\n\n    inject: ['feature'],\n\n    props: {\n        value: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        optionTrue: {\n            type: Object,\n            required: true,\n            validator(value) {\n                return value.hasOwnProperty('name');\n            },\n        },\n\n        optionFalse: {\n            type: Object,\n            required: true,\n            validator(value) {\n                return value.hasOwnProperty('name');\n            },\n        },\n    },\n\n    data() {\n        return {\n            inputId: utils.createId(),\n        };\n    },\n\n    computed: {\n        options() {\n            return [\n                {\n                    value: true,\n                    ...this.optionTrue,\n                },\n                {\n                    value: false,\n                    ...this.optionFalse,\n                },\n            ];\n        },\n\n        castedValue: {\n            get() {\n                return this.value;\n            },\n\n            set(val) {\n                if (this.feature.isActive('VUE3')) {\n                    this.$emit('update:value', val);\n\n                    return;\n                }\n\n                this.$emit('change', val);\n            },\n        },\n\n        name() {\n            return `swag-paypal-pos-boolean-radio-${this.inputId}`;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_boolean_radio %}\\n    <sw-radio-field\\n        {% if VUE3 %}\\n        v-model:value=\\\"castedValue\\\"\\n        {% else %}\\n        v-model=\\\"castedValue\\\"\\n        {% endif %}\\n        v-bind=\\\"$attrs\\\"\\n        class=\\\"swag-paypal-pos-boolean-radio\\\"\\n        :name=\\\"name\\\"\\n        :options=\\\"options\\\">\\n    </sw-radio-field>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_detail_logs %}\\n    {% block swag_paypal_pos_detail_logs_grid %}\\n        <sw-data-grid identifier=\\\"swag-paypal-pos-detail-logs\\\"\\n                      :columns=\\\"columns\\\"\\n                      :dataSource=\\\"logs\\\"\\n                      :isLoading=\\\"isLoading || loadingLogs\\\"\\n                      :showActions=\\\"true\\\"\\n                      :showSelection=\\\"false\\\"\\n                      :showSettings=\\\"true\\\"\\n                      :allowColumnEdit=\\\"true\\\"\\n                      :sortBy=\\\"sortBy\\\"\\n                      :sortDirection=\\\"sortDirection\\\"\\n                      :skeletonItemAmount=\\\"limit\\\"\\n                      @column-sort=\\\"onSortColumn\\\">\\n\\n            {% block swag_paypal_pos_detail_logs_grid_pagination %}\\n                <template #pagination>\\n                    <sw-pagination :limit=\\\"limit\\\"\\n                                   :page=\\\"page\\\"\\n                                   :total=\\\"total\\\"\\n                                   :total-visible=\\\"7\\\"\\n                                   @page-change=\\\"onPageChange\\\">\\n                    </sw-pagination>\\n                </template>\\n            {% endblock %}\\n\\n            {% block swag_paypal_pos_detail_logs_grid_column_date %}\\n                <template #column-date=\\\"{ item }\\\">\\n\\n                    {% block swag_paypal_pos_detail_logs_grid_column_date_formatted %}\\n                        <template v-if=\\\"item.createdAt\\\">\\n                            {{ dateFilter(item.createdAt, {\\n                                hour: '2-digit',\\n                                minute: '2-digit',\\n                                day: '2-digit',\\n                                month: '2-digit',\\n                                year: '2-digit'\\n                            }) }}\\n                        </template>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_detail_logs_grid_column_date_empty %}\\n                        <template v-else>\\n                            {{ $tc('swag-paypal-pos.detail.logs.noEntry') }}\\n                        </template>\\n                    {% endblock %}\\n\\n                </template>\\n            {% endblock %}\\n\\n            {% block swag_paypal_pos_detail_logs_grid_column_state %}\\n                <template #column-state=\\\"{ item }\\\">\\n\\n                    {% block swag_paypal_pos_detail_logs_grid_column_state_label %}\\n                        <sw-label v-if=\\\"item.level\\\"\\n                                  appearance=\\\"pill\\\"\\n                                  :variant=\\\"getLabelVariantForItem(item)\\\">\\n                            {{ $tc(getLabelForItem(item)) }}\\n                        </sw-label>\\n                    {% endblock %}\\n\\n                </template>\\n            {% endblock %}\\n\\n        </sw-data-grid>\\n    {% endblock %}\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-detail-logs.html.twig';\nimport './swag-paypal-pos-detail-logs.scss';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-detail-logs', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-pos-log-label',\n        'listing',\n    ],\n\n    props: {\n        runId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            logs: [],\n            limit: 10,\n            sortBy: 'createdAt',\n            sortDirection: 'DESC',\n            loadingLogs: false,\n            isLoading: false,\n            disableRouteParams: true,\n        };\n    },\n\n    computed: {\n        logRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run_log');\n        },\n\n        columns() {\n            return [{\n                property: 'date',\n                dataIndex: 'createdAt',\n                label: 'swag-paypal-pos.detail.syncedProducts.columns.date',\n                width: '140px',\n                sortable: true,\n            }, {\n                property: 'state',\n                dataIndex: 'level',\n                label: 'swag-paypal-pos.detail.syncedProducts.columns.state',\n                width: '120px',\n                sortable: true,\n            }, {\n                property: 'message',\n                dataIndex: 'message',\n                label: 'swag-paypal-pos.detail.logs.columnLastSync',\n                sortable: true,\n            }];\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        getListCriteria() {\n            const params = this.getMainListingParams();\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addFilter(Criteria.equals('runId', this.runId));\n            criteria.addAssociation('posSalesChannelRun');\n\n            criteria.addSorting(Criteria.sort(params.sortBy, params.sortDirection, params.naturalSorting));\n            criteria.addSorting(Criteria.sort('level', 'DESC'));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            return criteria;\n        },\n\n        getList() {\n            this.loadingLogs = true;\n            return this.logRepository.search(this.getListCriteria(), Context.api).then((result) => {\n                this.logs = result;\n                this.total = result.total;\n                this.page = result.criteria.page;\n                this.limit = result.criteria.limit;\n                this.loadingLogs = false;\n            });\n        },\n\n        getLabelVariantForItem(item) {\n            if (item.posSalesChannelRun && item.posSalesChannelRun.status === 'cancelled') {\n                return 'info';\n            }\n\n            return this.getLabelVariant(item.level);\n        },\n\n        getLabelForItem(item) {\n            if (item.posSalesChannelRun && item.posSalesChannelRun.status === 'cancelled') {\n                return 'swag-paypal-pos.detail.logs.states.aborted';\n            }\n\n            return this.getLabel(item.level);\n        },\n    },\n});\n","import template from './swag-paypal-pos-getting-started.html.twig';\nimport './swag-paypal-pos-getting-started.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-getting-started', {\n    template,\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_getting_started %}\\n    <sw-card position-identifier=\\\"swag-paypal-pos-getting-started\\\"\\n             :title=\\\"$tc('swag-paypal-pos.gettingStarted.cardTitle')\\\">\\n\\n        {% block swag_paypal_pos_getting_started_reader %}\\n            <sw-container\\n                    class=\\\"swag-paypal-pos-getting-started__container-reader\\\"\\n                    columns=\\\"1fr 3fr\\\"\\n                    justify=\\\"left\\\"\\n                    align=\\\"center\\\">\\n\\n                {% block swag_paypal_pos_getting_started_reader_image %}\\n                    <img class=\\\"swag-paypal-pos-getting-started__image\\\"\\n                         :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-reader.png')\\\"\\n                         :alt=\\\"$tc('swag-paypal-pos.gettingStarted.readerImageAlt')\\\"/>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_getting_started_reader_description %}\\n                    <div class=\\\"swag-paypal-pos-getting-started__description\\\">\\n\\n                        {% block swag_paypal_pos_getting_started_reader_description_headline %}\\n                            <div class=\\\"swag-paypal-pos-getting-started__description-headline\\\">\\n                                {{ $tc('swag-paypal-pos.gettingStarted.readerHeadline') }}\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_getting_started_reader_description_text %}\\n                            <div class=\\\"swag-paypal-pos-getting-started__description-text\\\">\\n                                {{ $tc('swag-paypal-pos.gettingStarted.readerText') }}\\n\\n                                {% block swag_paypal_pos_getting_started_reader_description_link %}\\n                                    <sw-external-link :href=\\\"$tc('swag-paypal-pos.gettingStarted.readerLinkTarget')\\\"\\n                                                      class=\\\"swag-paypal-pos-getting-started__description-text-link\\\">\\n                                        {{ $tc('swag-paypal-pos.gettingStarted.readerLinkText') }}\\n                                    </sw-external-link>\\n                                {% endblock %}\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_getting_started_app %}\\n            <sw-container\\n                    class=\\\"swag-paypal-pos-getting-started__container-app\\\"\\n                    columns=\\\"1fr 3fr\\\"\\n                    justify=\\\"left\\\"\\n                    align=\\\"center\\\">\\n\\n                {% block swag_paypal_pos_getting_started_app_image %}\\n                    <img class=\\\"swag-paypal-pos-getting-started__image\\\"\\n                         :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-app.png')\\\"\\n                         :alt=\\\"$tc('swag-paypal-pos.gettingStarted.appImageAlt')\\\"/>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_getting_started_app_description %}\\n                    <div class=\\\"swag-paypal-pos-getting-started__description \\\">\\n\\n                        {% block swag_paypal_pos_getting_started_app_description_headline %}\\n                            <div class=\\\"swag-paypal-pos-getting-started__description-headline\\\">\\n                                {{ $tc('swag-paypal-pos.gettingStarted.appHeadline') }}\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_getting_started_app_description_text %}\\n                            <div v-html=\\\"$tc('swag-paypal-pos.gettingStarted.appText')\\\"\\n                                 class=\\\"swag-paypal-pos-getting-started__description-text\\\">\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-continue-setup.html.twig';\nimport './swag-paypal-pos-continue-setup.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-continue-setup', {\n    template,\n\n    methods: {\n        onContinueSetup() {\n            this.$router.push(\n                {\n                    name: 'swag.paypal.pos.wizard.customization',\n                    params: { id: this.$route.params.id },\n                },\n            );\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_continue_setup %}\\n    <sw-card position-identifier=\\\"swag-paypal-pos-continue-setup\\\"\\n             :title=\\\"$tc('swag-paypal-pos.detail.overview.continueSetup.cardTitle')\\\">\\n\\n        {% block swag_paypal_pos_continue_setup_container %}\\n            <div class=\\\"swag-paypal-pos__continue-setup\\\">\\n\\n                {% block swag_paypal_pos_continue_setup_container_headline %}\\n                    <h6>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.headline') }}</h6>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_continue_setup_container_firstLine %}\\n                    <p>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.firstLine') }}</p>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_continue_setup_container_secondLine %}\\n                    <p>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.secondLine') }}</p>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_continue_setup_button %}\\n            <sw-button variant=\\\"ghost\\\"\\n                       @click=\\\"onContinueSetup\\\">\\n                {{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.headline') }}\\n            </sw-button>\\n        {% endblock %}\\n\\n    </sw-card>\\n{% endblock %}\\n\";","import { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-menu', {\n    computed: {\n        buildMenuTree() {\n            const menuItems = this.$super('buildMenuTree');\n\n            const posIds = [];\n            this.salesChannels.forEach((salesChannel) => {\n                if (salesChannel.type.id === PAYPAL_POS_SALES_CHANNEL_TYPE_ID) {\n                    posIds.push(salesChannel.id);\n                }\n            });\n\n            menuItems.forEach((menuItem) => {\n                if (posIds.includes(menuItem.id)) {\n                    menuItem.path = 'swag.paypal.pos.detail';\n                }\n            });\n\n            return menuItems;\n        },\n    },\n});\n","import { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-modal', {\n\n    methods: {\n        onAddChannel(salesChannelTypeId) {\n            if (this.isPayPalPosSalesChannel(salesChannelTypeId)) {\n                this.onCloseModal();\n                this.$router.push({ name: 'swag.paypal.pos.wizard' });\n\n                return;\n            }\n\n            this.$super('onAddChannel', salesChannelTypeId);\n        },\n\n        isPayPalPosSalesChannel(salesChannelTypeId) {\n            return salesChannelTypeId === PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos %}\\n    <sw-page class=\\\"swag-paypal-pos\\\">\\n\\n        {% block swag_paypal_pos_header %}\\n            <template #smart-bar-header>\\n                <h2>\\n                    {{ $tc('swag-paypal-pos.header') }}\\n                </h2>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_actions %}\\n            <template #smart-bar-actions>\\n                <sw-button v-for=\\\"button in buttonConfig\\\"\\n                           size=\\\"small\\\"\\n                           {% if VUE2 %}\\n                           :key=\\\"button.key\\\"\\n                           {% endif %}\\n                           :disabled=\\\"button.disabled\\\"\\n                           :isLoading=\\\"button.isLoading || isLoading\\\"\\n                           :variant=\\\"button.variant\\\"\\n                           @click=\\\"onButtonClick(button.action)\\\">\\n                    {{ button.label }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_content %}\\n            <template #content>\\n                <sw-card-view>\\n\\n                    {% block swag_paypal_pos_content_tabs %}\\n                        <sw-tabs v-if=\\\"!isLoading\\\" position-identifier=\\\"swag_paypal_pos_content_tabs\\\" class=\\\"swag-paypal-pos__tabs\\\">\\n\\n                            {%  block swag_paypal_pos_content_tab_base %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.overview', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.overview')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.overview') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_synced_products %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.syncedProducts', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.syncedProducts')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.syncedProducts') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_settings %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.settings', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.settings')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.settings') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_runs %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.runs', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.runs')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.runs') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_help %}\\n                                <sw-tabs-item href=\\\"https://www.izettle.com/help/articles/1083274-what-is-pos\\\"\\n                                              target=\\\"_blank\\\"\\n                                              class=\\\"swag-paypal-pos__tab-help\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.help')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.help') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n                        </sw-tabs>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_content_account %}\\n                        <swag-paypal-pos-account :lastRun=\\\"lastRun\\\"\\n                                                 :salesChannel=\\\"salesChannel\\\">\\n                        </swag-paypal-pos-account>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_content_card %}\\n                        {% if VUE3 %}\\n                            <router-view\\n                              v-if=\\\"!isLoading\\\"\\n                              :key=\\\"$route.params.id\\\"\\n                              v-slot=\\\"{ Component }\\\">\\n                               <component\\n                                   :is=\\\"Component\\\"\\n                                   :salesChannel=\\\"salesChannel\\\"\\n                                   :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                   :lastRun=\\\"lastRun\\\"\\n                                   :lastCompleteRun=\\\"lastCompleteRun\\\"\\n                                   @buttons-update=\\\"updateButtons\\\"\\n                                   @load-sales-channel=\\\"loadSalesChannel\\\"\\n                                   @run-update=\\\"loadLastRun\\\"\\n                                   @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\"\\n                               />\\n                            </router-view>\\n                        {% else %}\\n                            <router-view v-if=\\\"!isLoading\\\"\\n                                         :key=\\\"$route.params.id\\\"\\n                                         :salesChannel=\\\"salesChannel\\\"\\n                                         :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                         :lastRun=\\\"lastRun\\\"\\n                                         :lastCompleteRun=\\\"lastCompleteRun\\\"\\n                                         @buttons-update=\\\"updateButtons\\\"\\n                                         @load-sales-channel=\\\"loadSalesChannel\\\"\\n                                         @run-update=\\\"loadLastRun\\\"\\n                                         @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\">\\n                            </router-view>\\n                        {% endif %}\\n\\n                        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_disclaimer_hero %}\\n                        <sw-card v-show=\\\"!isLoading\\\"\\n                                 class=\\\"swag-paypal-pos__disclaimer-card\\\"\\n                                 position-identifier=\\\"swag-paypal-pos-disclaimer\\\"\\n                                 :hero=\\\"true\\\">\\n\\n                            {% block swag_paypal_pos_disclaimer_container %}\\n                                <div class=\\\"swag-paypal-pos__disclaimer\\\">\\n\\n                                    {% block swag_paypal_pos_disclaimer_title %}\\n                                        <div class=\\\"swag-paypal-pos__disclaimer-title disclaimer-content\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.disclaimer.headline') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_disclaimer_subtitle %}\\n                                        <div class=\\\"swag-paypal-pos__disclaimer-subtitle disclaimer-content\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.disclaimer.subheadline') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_disclaimer_link %}\\n                                        <a :href=\\\"$tc('swag-paypal-pos.detail.disclaimer.linkTarget')\\\"\\n                                           class=\\\"link swag-paypal-pos__disclaimer-link disclaimer-content\\\"\\n                                           target=\\\"_blank\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.disclaimer.linkText') }}\\n                                        </a>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card>\\n                    {% endblock %}\\n                </sw-card-view>\\n            </template>\\n        {% endblock %}\\n    </sw-page>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos.html.twig';\nimport './swag-paypal-pos.scss';\nimport { PAYPAL_POS_SALES_CHANNEL_EXTENSION } from '../../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos', {\n    template,\n\n    inject: [\n        'salesChannelService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'placeholder',\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            previousApiKey: null,\n            salesChannel: {},\n            lastRun: null,\n            lastCompleteRun: null,\n            cloneSalesChannelId: null,\n            buttonConfig: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.title,\n        };\n    },\n\n    computed: {\n        title() {\n            return [\n                this.$tc('global.sw-admin-menu.textShopwareAdmin'),\n                this.$tc('sw-sales-channel.general.titleMenuItems'),\n                this.$tc('swag-paypal-pos.general.moduleTitle'),\n            ].reverse().join(' | ');\n        },\n\n        paypalPosSalesChannelRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n\n        salesChannelCriteria() {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addAssociation(PAYPAL_POS_SALES_CHANNEL_EXTENSION);\n            criteria.addAssociation('countries');\n            criteria.addAssociation('currencies');\n            criteria.addAssociation('domains');\n            criteria.addAssociation('languages');\n\n            return criteria;\n        },\n    },\n\n    watch: {\n        '$route.params.id'() {\n            this.loadSalesChannel();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadSalesChannel();\n        },\n\n        loadSalesChannel() {\n            if (!this.$route.params.id) {\n                return Promise.resolve();\n            }\n\n            if (this.salesChannel) {\n                this.salesChannel = null;\n            }\n\n            this.isLoading = true;\n            return this.salesChannelRepository\n                .get(this.$route.params.id, Shopware.Context.api, this.salesChannelCriteria)\n                .then((entity) => {\n                    this.salesChannel = entity;\n                    this.previousApiKey = entity.extensions.paypalPosSalesChannel.apiKey;\n                    this.updateRun();\n                    this.isLoading = false;\n                });\n        },\n\n        updateCloneSalesChannel(cloneSalesChannelId) {\n            this.cloneSalesChannelId = cloneSalesChannelId;\n        },\n\n        updateButtons(buttonConfig) {\n            this.buttonConfig = buttonConfig;\n        },\n\n        onButtonClick(action) {\n            if (typeof action === 'string') {\n                this.redirect(action);\n                return;\n            }\n\n            if (typeof action !== 'function') {\n                return;\n            }\n\n            action.call();\n        },\n\n        updateRun() {\n            setTimeout(this.updateRun, 20000);\n            return this.loadLastRun();\n        },\n\n        loadLastRun(needComplete = false) {\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.equals('salesChannelId', this.salesChannel.id));\n            criteria.addFilter(Criteria.not('AND', [Criteria.equals('status', 'in_progress')]));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            if (needComplete) {\n                criteria.addFilter(Criteria.equals('task', 'complete'));\n            } else {\n                criteria.addAssociation('logs');\n            }\n\n            return this.runRepository.search(criteria, Shopware.Context.api).then((result) => {\n                if (needComplete) {\n                    this.lastCompleteRun = result.first();\n                    this.$forceUpdate();\n                    return;\n                }\n\n                this.lastRun = result.first();\n                if (this.lastRun !== null && this.lastRun.task !== 'complete') {\n                    this.loadLastRun(true);\n                } else {\n                    this.lastCompleteRun = this.lastRun;\n                }\n                this.$forceUpdate();\n            });\n        },\n    },\n});\n","import template from './swag-paypal-pos-detail-synced-products.html.twig';\nimport './swag-paypal-pos-detail-synced-products.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-detail-synced-products', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-log-label',\n        'listing',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            products: [],\n            limit: 10,\n            isLoading: false,\n            actions: [\n                {\n                    label: 'swag-paypal-pos.detail.syncedProducts.actions.productDetails',\n                    callback: this.onProductDetails,\n                },\n            ],\n            columns: [\n                {\n                    property: 'name',\n                    label: 'swag-paypal-pos.detail.syncedProducts.columns.name',\n                    sortable: false,\n                },\n                {\n                    property: 'state',\n                    label: 'swag-paypal-pos.detail.syncedProducts.columns.state',\n                    sortable: false,\n                },\n                {\n                    property: 'date',\n                    label: 'swag-paypal-pos.detail.syncedProducts.columns.date',\n                    sortable: false,\n                },\n            ],\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    computed: {\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('buttons-update', []);\n            this.getList();\n        },\n\n        getList() {\n            if (this.salesChannel === null || this.salesChannel.id === null) {\n                return Promise.resolve();\n            }\n\n            this.isLoading = true;\n            const params = this.getMainListingParams();\n\n            return this.SwagPayPalPosApiService.getProductLog(\n                this.salesChannel.id,\n                params.page,\n                params.limit,\n            ).then((result) => {\n                this.products = Object.values(result.elements);\n                this.total = result.total;\n                this.isLoading = false;\n            });\n        },\n\n        onProductDetails(item) {\n            this.$router.push(\n                {\n                    name: 'sw.product.detail.base',\n                    params: {\n                        id: item.id,\n                    },\n                },\n            );\n        },\n\n        hasSync(item) {\n            return item.extensions.paypalPosLog.length || item.extensions.paypalPosSync.length;\n        },\n\n        getSyncDate(item) {\n            if (!this.hasSync(item)) {\n                return null;\n            }\n\n            if (item.extensions.paypalPosLog[0]) {\n                return item.extensions.paypalPosLog[0].posSalesChannelRun.updatedAt\n                    || item.extensions.paypalPosLog[0].createdAt;\n            }\n\n            return item.extensions.paypalPosSync[0].updatedAt\n                || item.extensions.paypalPosSync[0].createdAt;\n        },\n\n        getLevel(item) {\n            return item.extensions.paypalPosLog[0] ? item.extensions.paypalPosLog[0].level : 200;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_synced_products %}\\n    <div class=\\\"swag-paypal-pos-detail-synced-products\\\">\\n\\n        {% block swag_paypal_pos_synced_products_grid %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-synced-products-grid\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.syncedProducts.title')\\\"\\n                     :isLoading=\\\"isLoading\\\">\\n\\n                {% block swag_paypal_pos_synced_products_grid %}\\n                    <template #grid>\\n                        <sw-data-grid v-if=\\\"total > 0\\\"\\n                                      identifier=\\\"swag-paypal-pos-detail-synced-products\\\"\\n                                      :dataSource=\\\"products\\\"\\n                                      :columns=\\\"columns\\\"\\n                                      :isLoading=\\\"isLoading\\\"\\n                                      :showActions=\\\"actions.length > 0\\\"\\n                                      :showSelection=\\\"false\\\"\\n                                      :showSettings=\\\"true\\\"\\n                                      :allowColumnEdit=\\\"true\\\"\\n                                      :sortBy=\\\"sortBy\\\"\\n                                      :sortDirection=\\\"sortDirection\\\"\\n                                      :skeletonItemAmount=\\\"limit\\\"\\n                                      @column-sort=\\\"onSortColumn\\\">\\n\\n                            {% block swag_paypal_pos_synced_products_grid_pagination %}\\n                                <template #pagination>\\n                                    <sw-pagination :limit=\\\"limit\\\"\\n                                                   :page=\\\"page\\\"\\n                                                   :total=\\\"total\\\"\\n                                                   :total-visible=\\\"7\\\"\\n                                                   @page-change=\\\"onPageChange\\\">\\n                                    </sw-pagination>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_synced_products_grid_column_date %}\\n                                <template #column-date=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_synced_products_grid_column_date_formatted %}\\n                                        <template v-if=\\\"hasSync(item)\\\">\\n                                            {{ dateFilter(getSyncDate(item), {\\n                                                hour: '2-digit',\\n                                                minute: '2-digit',\\n                                                day: '2-digit',\\n                                                month: '2-digit',\\n                                                year: '2-digit'\\n                                            }) }}\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_synced_products_grid_column_date_empty %}\\n                                        <template v-else>\\n                                            {{ $tc('swag-paypal-pos.detail.syncedProducts.notSyncedYet') }}\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_synced_products_grid_column_state %}\\n                                <template #column-state=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_synced_products_grid_column_state_label_log %}\\n                                        <template v-if=\\\"hasSync(item)\\\">\\n                                            <sw-label appearance=\\\"pill\\\"\\n                                                      :variant=\\\"getLabelVariant(getLevel(item))\\\">\\n                                                {{ $tc(getLabel(getLevel(item))) }}\\n                                            </sw-label>\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_synced_products_grid_actions %}\\n                                <template v-if=\\\"actions\\\"\\n                                          #actions=\\\"{ item }\\\">\\n                                    <sw-context-menu-item v-for=\\\"action in actions\\\"\\n                                                          {% if VUE2 %}\\n                                                          :key=\\\"action.label\\\"\\n                                                          {% endif %}\\n                                                          @click=\\\"action.callback(item)\\\">\\n                                        {{ $tc(action.label) }}\\n                                    </sw-context-menu-item>\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-data-grid>\\n                    </template>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_synced_products_empty_state %}\\n                    <sw-empty-state v-if=\\\"total < 1\\\"\\n                                    class=\\\"swag-paypal-pos-detail-synced-products__empty-state\\\"\\n                                    :title=\\\"$tc('swag-paypal-pos.detail.syncedProducts.emptyState.title')\\\"\\n                                    :subline=\\\"$tc('swag-paypal-pos.detail.syncedProducts.emptyState.message')\\\">\\n                    </sw-empty-state>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_detail_overview %}\\n    <div class=\\\"sw-sales-channel-detail-overview\\\">\\n\\n\\n        {% block swag_paypal_pos_detail_overview_status %}\\n            <swag-paypal-pos-status-view\\n                    v-if=\\\"salesChannel.active\\\"\\n                    :isLoading=\\\"isLoading\\\"\\n                    :isSyncing=\\\"isSyncing\\\"\\n                    :lastCompleteRun=\\\"lastCompleteRun\\\"\\n                    :lastFinishedRun=\\\"lastRun\\\"\\n                    :salesChannel=\\\"salesChannel\\\"\\n                    :syncErrors=\\\"syncErrors\\\">\\n\\n                {% block swag_paypal_pos_detail_overview_status_actions %}\\n                    <template #actions>\\n                        <sw-button-group v-if=\\\"salesChannel && salesChannel.active && !isSyncing\\\">\\n\\n                            {% block swag_paypal_pos_detail_overview_status_actions_sync_button %}\\n                                <sw-button class=\\\"swag-paypal-pos-detail-overview__sync-button\\\"\\n                                           variant=\\\"primary\\\"\\n                                           @click=\\\"onStartSync\\\">\\n                                    {{ $tc('swag-paypal-pos.detail.overview.buttonSync') }}\\n                                </sw-button>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu %}\\n                                <sw-context-button>\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_button %}\\n                                        <template #button>\\n                                            <sw-button class=\\\"swag-paypal-pos-detail-overview__sync-button-context\\\"\\n                                                       variant=\\\"primary\\\"\\n                                                       square\\n                                                       :disabled=\\\"isSyncing\\\">\\n                                                <sw-icon name=\\\"regular-chevron-down-xs\\\" size=\\\"16\\\"></sw-icon>\\n                                            </sw-button>\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_products %}\\n                                        <sw-context-menu-item @click=\\\"onStartProductSync\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.overview.buttonSyncProducts') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_image %}\\n                                        <sw-context-menu-item @click=\\\"onStartImageSync\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.overview.buttonSyncImages') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_inventory %}\\n                                        <sw-context-menu-item @click=\\\"onStartInventorySync\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.overview.buttonSyncInventory') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n                                </sw-context-button>\\n                            {% endblock %}\\n                        </sw-button-group>\\n\\n                        {% block swag_paypal_pos_detail_overview_status_actions_sync_abort_button %}\\n                            <sw-button v-if=\\\"isSyncing\\\"\\n                                       @click=\\\"onSyncAbort\\\">\\n                                {{ $tc('swag-paypal-pos.detail.overview.buttonSyncAbort') }}\\n                            </sw-button>\\n                        {% endblock %}\\n                    </template>\\n                {% endblock %}\\n            </swag-paypal-pos-status-view>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_overview_setup %}\\n            <swag-paypal-pos-continue-setup v-else>\\n            </swag-paypal-pos-continue-setup>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_overview_getting_started %}\\n            <swag-paypal-pos-getting-started>\\n            </swag-paypal-pos-getting-started>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-detail-overview.html.twig';\nimport './swag-paypal-pos-detail-overview.scss';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-detail-overview', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'salesChannelService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'placeholder',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        lastRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        lastCompleteRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isSyncing: false,\n            syncErrors: null,\n            syncingRunId: null,\n            statusErrorLevel: null,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n    },\n\n    watch: {\n        'salesChannel.id'() {\n            this.checkForSync();\n        },\n        lastRun() {\n            this.$forceUpdate();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.checkForSync();\n        },\n\n        mountedComponent() {\n            this.updateButtons();\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        startSync(callable) {\n            this.syncErrors = null;\n            this.isSyncing = true;\n            this.updateButtons(true);\n            callable(this.salesChannel.id).then((response) => {\n                this.syncingRunId = response.runId;\n                this.updateSync();\n            }).catch((errorResponse) => {\n                this.syncErrors = errorResponse.response.data.errors;\n                this.$emit('run-update');\n                this.isSyncing = false;\n                this.updateButtons();\n            });\n        },\n\n        updateSync() {\n            if (this.syncingRunId === null) {\n                return;\n            }\n\n            this.runRepository.get(this.syncingRunId, Shopware.Context.api).then((entity) => {\n                if (entity !== null && entity.status === 'in_progress') {\n                    setTimeout(this.updateSync, 1500);\n                    return;\n                }\n\n                this.syncingRunId = null;\n                this.$emit('run-update');\n                this.isSyncing = false;\n                this.updateButtons();\n            });\n        },\n\n        onStartSync() {\n            this.startSync(this.SwagPayPalPosApiService.startCompleteSync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onStartProductSync() {\n            this.startSync(this.SwagPayPalPosApiService.startProductSync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onStartImageSync() {\n            this.startSync(this.SwagPayPalPosApiService.startImageSync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onStartInventorySync() {\n            this.startSync(this.SwagPayPalPosApiService.startInventorySync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onSyncAbort() {\n            if (this.syncingRunId !== null) {\n                this.SwagPayPalPosApiService.abortSync(this.syncingRunId).then(() => {\n                    this.updateSync();\n                });\n            }\n        },\n\n        checkForSync() {\n            if (this.salesChannel === null || this.salesChannel.id === null) {\n                return;\n            }\n\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.equals('salesChannelId', this.salesChannel.id));\n            criteria.addFilter(Criteria.equals('status', 'in_progress'));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            this.runRepository.search(criteria, Shopware.Context.api).then((result) => {\n                if (result.first() === null) {\n                    return;\n                }\n                this.isSyncing = true;\n                this.syncingRunId = result.first().id;\n                this.updateSync();\n            });\n        },\n\n        updateButtons(syncing = false) {\n            const buttonConfig = [\n                {\n                    key: 'sync',\n                    label: this.$tc('swag-paypal-pos.detail.overview.buttonSync'),\n                    variant: 'primary',\n                    action: this.onStartSync,\n                    disabled: !(this.salesChannel && this.salesChannel.active),\n                    isLoading: this.isSyncing,\n                },\n            ];\n\n            if (syncing) {\n                buttonConfig.unshift(\n                    {\n                        key: 'abortSync',\n                        label: this.$tc('swag-paypal-pos.detail.overview.buttonSyncAbort'),\n                        action: this.onSyncAbort,\n                        disabled: !(this.salesChannel && this.salesChannel.active),\n                    },\n                );\n            }\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n    },\n});\n","import template from './swag-paypal-pos-detail-settings.html.twig';\nimport './swag-paypal-pos-detail-settings.scss';\n\nconst { Component, Context, State } = Shopware;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { ShopwareError } = Shopware.Classes;\n\n\nComponent.register('swag-paypal-pos-detail-settings', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'SwagPayPalPosSettingApiService',\n        'SwagPayPalPosWebhookRegisterService',\n        'salesChannelService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-catch-error',\n        'placeholder',\n        'notification',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            showDeleteModal: false,\n            showResetModal: false,\n            isSaveSuccessful: false,\n            isTestingCredentials: false,\n            isTestCredentialsSuccessful: false,\n            apiKeyUrl: this.SwagPayPalPosSettingApiService.generateApiUrl(),\n            previousApiKey: this.salesChannel.extensions.paypalPosSalesChannel.apiKey,\n        };\n    },\n\n    computed: {\n        ...mapPropertyErrors('salesChannel', ['name']),\n        ...mapPropertyErrors('swagPaypalPosSalesChannel', ['mediaDomain']),\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        optionSyncPrices() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueDescription'),\n            };\n        },\n\n        optionNotSyncPrices() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseDescription'),\n            };\n        },\n\n        optionsReplace() {\n            return [\n                {\n                    value: 2,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyDescription'),\n                }, {\n                    value: 1,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeDescription'),\n                }, {\n                    value: 0,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotDescription'),\n                },\n            ];\n        },\n\n        swagPaypalPosSalesChannel() {\n            return this.salesChannel.extensions.paypalPosSalesChannel;\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.updateButtons();\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        onSave() {\n            this.isLoading = true;\n            this.isSaveSuccessful = false;\n            this.updateButtons();\n\n            if (this.swagPaypalPosSalesChannel.apiKey === this.previousApiKey) {\n                return this.save();\n            }\n\n            return this.SwagPayPalPosSettingApiService\n                .validateApiCredentials(this.swagPaypalPosSalesChannel.apiKey, this.salesChannel.id)\n                .then(() => {\n                    return this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel, true);\n                })\n                .then(this.save)\n                .catch((errorResponse) => {\n                    this.catchAuthenticationError((errorResponse));\n                    this.isLoading = false;\n                    this.updateButtons();\n                    throw errorResponse;\n                });\n        },\n\n        save() {\n            this.SwagPayPalPosWebhookRegisterService.registerWebhook(this.salesChannel.id)\n                .catch(this.catchError.bind(this, 'swag-paypal-pos.messageWebhookRegisterError'));\n\n            return this.salesChannelRepository\n                .save(this.salesChannel, Context.api)\n                .then(() => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                    this.updateButtons();\n\n                    this.$emit('load-sales-channel');\n                    this.$root.$emit('sales-channel-change');\n\n                    if (this.cloneSalesChannelId !== null) {\n                        this.SwagPayPalPosSettingApiService.cloneProductVisibility(\n                            this.cloneSalesChannelId,\n                            this.salesChannel.id,\n                        ).catch(this.catchError.bind(this, 'swag-paypal-pos.messageCloneError'));\n                    }\n                }).catch(() => {\n                    this.isLoading = false;\n                    this.updateButtons();\n\n                    this.createNotificationError({\n                        message: this.$tc('sw-sales-channel.detail.messageSaveError', 0, {\n                            name: this.salesChannel.name || this.placeholder(this.salesChannel, 'name'),\n                        }),\n                    });\n                }).finally(() => {\n                    if (this.swagPaypalPosSalesChannel.mediaDomain === null) {\n                        const expression =\n                            `swag_paypal_pos_sales_channel.${this.swagPaypalPosSalesChannel.id}.mediaDomain`;\n                        const error = new ShopwareError({ code: 'INVALID_URL' });\n                        State.commit('error/addApiError', { expression, error });\n                    }\n                });\n        },\n\n        testCredentials() {\n            const apiKey = this.swagPaypalPosSalesChannel.apiKey;\n\n            this.isTestingCredentials = true;\n            this.isTestCredentialsSuccessful = false;\n\n            this.SwagPayPalPosSettingApiService.validateApiCredentials(apiKey).then((response) => {\n                const credentialsValid = response.credentialsValid;\n                this.isTestingCredentials = false;\n                this.isTestCredentialsSuccessful = credentialsValid;\n            }).catch((errorResponse) => {\n                this.catchAuthenticationError(errorResponse);\n                this.isTestingCredentials = false;\n            });\n        },\n\n        catchAuthenticationError(errorResponse) {\n            this.catchError('swag-paypal-pos.authentication.messageTestError', errorResponse);\n\n            this.isTestingCredentials = false;\n            this.isTestCredentialsSuccessful = false;\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'save',\n                    label: this.$tc('global.default.save'),\n                    variant: 'primary',\n                    action: this.onSave,\n                    disabled: false,\n                    isLoading: this.isLoading,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        onConfirmDelete() {\n            this.showDeleteModal = false;\n\n            this.$nextTick(() => {\n                this.deleteSalesChannel(this.salesChannel.id);\n                this.$router.push({ name: 'sw.dashboard.index' });\n            });\n        },\n\n        deleteSalesChannel(salesChannelId) {\n            return this.SwagPayPalPosWebhookRegisterService.unregisterWebhook(salesChannelId).finally(() => {\n                return this.salesChannelRepository.delete(salesChannelId, Shopware.Context.api).then(() => {\n                    this.$root.$emit('sales-channel-change');\n                });\n            });\n        },\n\n        onConfirmReset() {\n            this.showResetModal = false;\n\n            this.$nextTick(() => {\n                this.SwagPayPalPosApiService.resetSync(this.salesChannel.id).then(() => {\n                    this.$router.push({ name: 'swag.paypal.pos.detail.overview', params: { id: this.salesChannel.id } });\n                });\n            });\n        },\n\n        changeLanguage() {\n            this.$nextTick(() => {\n                this.salesChannel.languages.length = 0;\n                this.salesChannel.languages.push({\n                    id: this.salesChannel.languageId,\n                });\n                this.$forceUpdate();\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_detail_settings %}\\n    <div class=\\\"swag-paypal-pos-detail-settings\\\">\\n\\n        {% block swag_paypal_pos_detail_settings_alert %}\\n            <sw-alert class=\\\"swag-paypal-pos-detail-settings__save-alert\\\">\\n                {{ $tc('swag-paypal-pos.detail.settings.saveAlert') }}\\n            </sw-alert>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_basic %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-basic\\\"\\n                     :isLoading=\\\"isLoading\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.settings.titleGeneralSettings')\\\">\\n                <sw-container columns=\\\"1fr 200px\\\" gap=\\\"0px 30px\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_input_name %}\\n                        <sw-text-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"salesChannel.name\\\"\\n                                {% else %}\\n                                v-model=\\\"salesChannel.name\\\"\\n                                {% endif %}\\n                                required\\n                                type=\\\"text\\\"\\n                                validation=\\\"required\\\"\\n                                :error=\\\"salesChannelNameError\\\"\\n                                :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                :label=\\\"$tc('sw-sales-channel.detail.labelInputName')\\\"\\n                                :placeholder=\\\"placeholder(salesChannel, 'name', $tc('sw-sales-channel.detail.placeholderName'))\\\">\\n                        </sw-text-field>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_detail_settings_input_active %}\\n                        <sw-switch-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"salesChannel.active\\\"\\n                                {% else %}\\n                                v-model=\\\"salesChannel.active\\\"\\n                                {% endif %}\\n                                bordered\\n                                :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                :label=\\\"$tc('sw-sales-channel.detail.labelInputActive')\\\"\\n                                :helpText=\\\"$tc('swag-paypal-pos.detail.settings.activeHelpText')\\\">\\n                        </sw-switch-field>\\n                    {% endblock %}\\n\\n                </sw-container>\\n\\n                {% block swag_paypal_pos_detail_settings_input_media_domain %}\\n                    <swag-paypal-pos-url-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"swagPaypalPosSalesChannel.mediaDomain\\\"\\n                            {% else %}\\n                            v-model=\\\"swagPayPalPosSalesChannel.mediaDomain\\\"\\n                            {% endif %}\\n                            required\\n                            validation=\\\"required\\\"\\n                            :error=\\\"swagPaypalPosSalesChannelMediaDomainError\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            :label=\\\"$tc('swag-paypal-pos.detail.settings.domain')\\\"\\n                            :helpText=\\\"$tc('swag-paypal-pos.detail.settings.domainHelpText')\\\"\\n                            @input=\\\"forceUpdate\\\">\\n                    </swag-paypal-pos-url-field>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_settings_input_language %}\\n                    <sw-entity-single-select\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"salesChannel.languageId\\\"\\n                            {% else %}\\n                            v-model=\\\"salesChannel.languageId\\\"\\n                            {% endif %}\\n                            entity=\\\"language\\\"\\n                            required\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            :label=\\\"$tc('global.entities.language')\\\"\\n                            @change=\\\"changeLanguage\\\">\\n                    </sw-entity-single-select>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_settings_input_product_stream %}\\n                    {# ToDo PPI-56 - implement support for product streams #}\\n                    <sw-entity-single-select\\n                            v-if=\\\"false\\\"\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"swagPaypalPosSalesChannel.productStreamId\\\"\\n                            {% else %}\\n                            v-model=\\\"swagPaypalPosSalesChannel.productStreamId\\\"\\n                            {% endif %}\\n                            entity=\\\"product_stream\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            :label=\\\"$tc('swag-paypal-pos.detail.settings.productStream')\\\"\\n                            @change=\\\"forceUpdate\\\">\\n                    </sw-entity-single-select>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_sync %}\\n            <div class=\\\"sw-sales-channel-detail-sync\\\">\\n                <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-sync\\\"\\n                         :isLoading=\\\"isLoading\\\"\\n                         :title=\\\"$tc('swag-paypal-pos.detail.settings.titleSync')\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_sync_input %}\\n                        <sw-radio-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                            {% else %}\\n                            v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                            {% endif %}\\n                            :label=\\\"$tc('swag-paypal-pos.wizard.syncLibrary.description')\\\"\\n                            class=\\\"swag-paypal-pos-boolean-radio\\\"\\n                            :options=\\\"optionsReplace\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            @input=\\\"forceUpdate\\\">\\n                        </sw-radio-field>\\n                    {% endblock %}\\n\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_prices %}\\n            <div class=\\\"sw-sales-channel-detail-prices\\\">\\n                <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-prices\\\"\\n                         :isLoading=\\\"isLoading\\\"\\n                         :title=\\\"$tc('swag-paypal-pos.detail.settings.titlePrices')\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_prices_input %}\\n                        <swag-paypal-pos-boolean-radio\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"swagPaypalPosSalesChannel.syncPrices\\\"\\n                            {% else %}\\n                            v-model=\\\"swagPaypalPosSalesChannel.syncPrices\\\"\\n                            {% endif %}\\n                            class=\\\"swag-paypal-pos-detail-settings__sync-prices-input\\\"\\n                            :label=\\\"$tc('swag-paypal-pos.wizard.syncPrices.description')\\\"\\n                            :optionTrue=\\\"optionSyncPrices\\\"\\n                            :optionFalse=\\\"optionNotSyncPrices\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            @input=\\\"forceUpdate\\\">\\n                        </swag-paypal-pos-boolean-radio>\\n                    {% endblock %}\\n\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_credentials %}\\n            <div class=\\\"sw-sales-channel-detail-credentials\\\">\\n                <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-credentials\\\"\\n                         :isLoading=\\\"isLoading\\\"\\n                         :title=\\\"$tc('swag-paypal-pos.detail.settings.titleCredentials')\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_credentials_apikey %}\\n                        <sw-password-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"swagPaypalPosSalesChannel.apiKey\\\"\\n                                {% else %}\\n                                v-model=\\\"swagPaypalPosSalesChannel.apiKey\\\"\\n                                {% endif %}\\n                                class=\\\"swag-paypal-pos-detail-settings__apikey-field\\\"\\n                                required\\n                                :label=\\\"$tc('swag-paypal-pos.authentication.labelApiKey')\\\"\\n                                :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                :placeholder=\\\"$tc('swag-paypal-pos.authentication.placeholderApiKey')\\\"\\n                                @input=\\\"forceUpdate\\\">\\n                            <template #suffix>\\n\\n                                {% block swag_paypal_pos_detail_settings_credentials_apikey_suffix %}\\n                                    <sw-icon name=\\\"regular-low-vision\\\"\\n                                             class=\\\"swag-paypal-pos-detail-settings__apikey-suffix\\\"\\n                                             size=\\\"22px\\\">\\n                                    </sw-icon>\\n                                {% endblock %}\\n                            </template>\\n                        </sw-password-field>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_detail_settings_credentials_apikey_description %}\\n                        <div class=\\\"swag-paypal-pos-detail-settings__apikey-description\\\">\\n\\n                            {% block swag_paypal_pos_detail_settings_credentials_apikey_description_text %}\\n                                <div class=\\\"swag-paypal-pos-detail-settings__apikey-description-text\\\">\\n                                    {{ $tc('swag-paypal-pos.authentication.apiKeyDescription') }}\\n                                </div>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_settings_credentials_apikey_description_link %}\\n                                <sw-external-link v-if=\\\"acl.can('sales_channel.editor')\\\"\\n                                                  :href=\\\"apiKeyUrl\\\"\\n                                                  class=\\\"swag-paypal-pos-detail-settings__apikey-description-link\\\">\\n\\n                                    {% block swag_paypal_pos_detail_settings_credentials_apikey_description_link_text %}\\n                                        {{ $tc('swag-paypal-pos.authentication.buttonGenerateKey') }}\\n                                    {% endblock %}\\n                                </sw-external-link>\\n                            {% endblock %}\\n                        </div>\\n                    {% endblock %}\\n\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_options %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-options\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.settings.optionsTitle')\\\"\\n                     :isLoading=\\\"isLoading\\\">\\n                <template #grid>\\n                    <sw-container rows=\\\"auto auto\\\">\\n\\n                        {% block swag_paypal_pos_detail_settings_options_reset %}\\n                            <sw-card-section>\\n                                <sw-container columns=\\\"1fr 175px\\\" gap=\\\"0px 30px\\\" class=\\\"swag-paypal-pos-detail-settings__reset-sync\\\">\\n\\n                                    {% block sw_sales_channel_detail_base_options_reset_text %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-description-text\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.settings.reset.descriptionText') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block sw_sales_channel_detail_base_options_reset_button %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-button\\\">\\n                                            <sw-button size=\\\"small\\\"\\n                                                       :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                                       @click=\\\"showResetModal = true\\\">\\n                                                {{ $tc('swag-paypal-pos.detail.settings.reset.buttonTitle') }}\\n                                            </sw-button>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                </sw-container>\\n                            </sw-card-section>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_detail_settings_options_delete %}\\n                            <sw-card-section divider=\\\"top\\\">\\n                                <sw-container columns=\\\"1fr 175px\\\" gap=\\\"0px 30px\\\" class=\\\"sw-sales-channel-detail-settings__delete-sales-channel\\\">\\n\\n                                    {% block sw_sales_channel_detail_base_options_delete_text %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-description-text\\\">\\n                                            <strong>{{ $tc('global.default.warning') }}</strong>\\n                                            {{ $tc('sw-sales-channel.detail.textDeleteSalesChannelWarning') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block sw_sales_channel_detail_base_options_delete_button %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-button\\\">\\n                                            <sw-button\\n                                                variant=\\\"danger\\\"\\n                                                size=\\\"small\\\"\\n                                                :disabled=\\\"!acl.can('sales_channel.deleter')\\\"\\n                                                @click=\\\"showDeleteModal = true\\\">\\n                                                {{ $tc('sw-sales-channel.detail.buttonDelete') }}\\n                                            </sw-button>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                </sw-container>\\n                            </sw-card-section>\\n                        {% endblock %}\\n\\n                    </sw-container>\\n                </template>\\n\\n                {% block swag_paypal_pos_detail_settings_options_reset_modal %}\\n                    <sw-modal v-if=\\\"showResetModal\\\"\\n                              class=\\\"swag-paypal-pos-detail-settings__reset-sync-modal\\\"\\n                              ref=\\\"modal\\\"\\n                              variant=\\\"small\\\"\\n                              :title=\\\"$tc('swag-paypal-pos.detail.settings.reset.modalTitle')\\\"\\n                              @modal-close=\\\"showResetModal = false\\\">\\n\\n                        {% block swag_paypal_pos_detail_settings_options_reset_modal_confirmtext %}\\n                            <p class=\\\"swag-paypal-pos-detail-settings__reset-modal-confirm-text\\\">\\n                                {{ $tc('swag-paypal-pos.detail.settings.reset.modalConfirmText') }}\\n                            </p>\\n                            <p class=\\\"swag-paypal-pos-detail-settings__reset-modal-name\\\">\\n                                <strong>{{ placeholder(salesChannel, 'name') }}</strong>\\n                            </p>\\n                            <p>{{ $tc('swag-paypal-pos.detail.settings.reset.modalTextInfo') }}</p>\\n                        {% endblock %}\\n\\n                        {% block sw_sales_channel_detail_options_reset_modal_footer %}\\n                            <template #modal-footer>\\n\\n                                {% block swag_paypal_pos_detail_settings_options_reset_modal_abort %}\\n                                    <sw-button size=\\\"small\\\" @click=\\\"showResetModal = false\\\">\\n                                        {{ $tc('global.default.cancel') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_detail_settings_options_reset_modal_confirm %}\\n                                    <sw-button size=\\\"small\\\"\\n                                               variant=\\\"danger\\\"\\n                                               @click=\\\"onConfirmReset\\\">\\n                                        {{ $tc('swag-paypal-pos.detail.settings.reset.modalButtonConfirm') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                            </template>\\n                        {% endblock %}\\n\\n                    </sw-modal>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_settings_options_delete_modal %}\\n                    <sw-modal v-if=\\\"showDeleteModal\\\"\\n                              class=\\\"sw-sales-channel-detail-settings__delete-modal\\\"\\n                              ref=\\\"modal\\\"\\n                              variant=\\\"small\\\"\\n                              :title=\\\"$tc('sw-sales-channel.detail.deleteModalTitle')\\\"\\n                              @modal-close=\\\"showDeleteModal = false\\\">\\n\\n                        {% block swag_paypal_pos_detail_settings_options_delete_modal_confirmtext %}\\n                            <p class=\\\"sw-sales-channel-detail-settings__delete-modal-confirm-text\\\">\\n                                {{ $tc('sw-sales-channel.detail.textConfirmDelete') }}\\n                            </p>\\n                            <p class=\\\"sw-sales-channel-detail-settings__delete-modal-name\\\">\\n                                <strong>{{ placeholder(salesChannel, 'name') }}</strong>\\n                            </p>\\n                            <p>{{ $tc('sw-sales-channel.detail.textDeleteInfo') }}</p>\\n                        {% endblock %}\\n\\n                        {% block sw_sales_channel_detail_options_delete_modal_footer %}\\n                            <template #modal-footer>\\n\\n                                {% block swag_paypal_pos_detail_settings_options_delete_modal_abort %}\\n                                    <sw-button size=\\\"small\\\" @click=\\\"showDeleteModal = false\\\">\\n                                        {{ $tc('global.default.cancel') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_detail_settings_options_delete_modal_confirm %}\\n                                    <sw-button size=\\\"small\\\"\\n                                               variant=\\\"danger\\\"\\n                                               @click=\\\"onConfirmDelete\\\">\\n                                        {{ $tc('sw-sales-channel.detail.buttonConfirmDelete') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                            </template>\\n                        {% endblock %}\\n\\n                    </sw-modal>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_detail_runs %}\\n    <div class=\\\"swag-paypal-pos-detail-runs\\\">\\n\\n        {% block swag_paypal_pos_detail_runs_card %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-detail-runs\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.runs.title')\\\"\\n                     :isLoading=\\\"isLoading\\\">\\n\\n                {% block swag_paypal_pos_detail_runs_card_grid %}\\n                    <template #grid>\\n\\n                        <sw-data-grid v-if=\\\"total > 0\\\"\\n                                      identifier=\\\"swag-paypal-pos-detail-runs\\\"\\n                                      :columns=\\\"columns\\\"\\n                                      :dataSource=\\\"runs\\\"\\n                                      :isLoading=\\\"isLoading || total === 0\\\"\\n                                      :showActions=\\\"true\\\"\\n                                      :showSelection=\\\"false\\\"\\n                                      :showSettings=\\\"true\\\"\\n                                      :allowColumnEdit=\\\"true\\\"\\n                                      :sortBy=\\\"sortBy\\\"\\n                                      :sortDirection=\\\"sortDirection\\\"\\n                                      :skeletonItemAmount=\\\"limit\\\"\\n                                      @column-sort=\\\"onSortColumn\\\">\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_pagination %}\\n                                <template #pagination>\\n                                    <sw-pagination :limit=\\\"limit\\\"\\n                                                   :page=\\\"page\\\"\\n                                                   :total=\\\"total\\\"\\n                                                   :total-visible=\\\"7\\\"\\n                                                   @page-change=\\\"onPageChange\\\">\\n                                    </sw-pagination>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_other_grid_column_log %}\\n                                <template #column-task=\\\"{ item }\\\">\\n                                    {{ $tc(`swag-paypal-pos.detail.runs.${item.task}Task`) }}\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_column_state %}\\n                                <template #column-state=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_detail_runs_card_grid_column_state_label %}\\n                                        <sw-label appearance=\\\"pill\\\"\\n                                                  :variant=\\\"getLabelVariant(item)\\\">\\n                                            {{ $tc(getLabel(item)) }}\\n                                        </sw-label>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_column_date %}\\n                                <template #column-date=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_detail_runs_card_grid_column_date_formatted %}\\n                                        {{ dateFilter(item.finishedAt, {\\n                                            hour: '2-digit',\\n                                            minute: '2-digit',\\n                                            day: '2-digit',\\n                                            month: '2-digit',\\n                                            year: '2-digit'\\n                                        }) }}\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_actions %}\\n                                <template #actions=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_detail_runs_card_grid_actions_details %}\\n                                        <sw-context-menu-item :disabled=\\\"item.logs.length <= 0\\\"\\n                                                              @click=\\\"onShowModal(item.id)\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.runs.actions.showDetails') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-data-grid>\\n                    </template>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_runs_card_empty_state %}\\n                    <template #default>\\n                        <sw-empty-state v-if=\\\"total < 1\\\"\\n                                        class=\\\"swag-paypal-pos-detail-runs__empty-state\\\"\\n                                        :title=\\\"$tc('swag-paypal-pos.detail.runs.emptyState.title')\\\"\\n                                        :subline=\\\"$tc('swag-paypal-pos.detail.runs.emptyState.message')\\\">\\n                        </sw-empty-state>\\n                    </template>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_runs_card_toolbar %}\\n                    <template #toolbar v-if=\\\"total > 0\\\">\\n\\n                        {% block swag_paypal_pos_detail_runs_card_toolbar_container %}\\n                            <sw-container columns=\\\"1fr min-content\\\"\\n                                          align=\\\"center\\\">\\n\\n                                {% block swag_paypal_pos_detail_runs_card_toolbar_container_text %}\\n                                    <p>{{ $tc('swag-paypal-pos.detail.runs.toolbarText') }}</p>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_detail_runs_card_toolbar_container_button %}\\n                                    <sw-button\\n                                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                            @click=\\\"onClearLogs\\\">\\n                                        {{ $tc('swag-paypal-pos.detail.cleanLog') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                            </sw-container>\\n                        {% endblock %}\\n\\n                    </template>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_runs_log_modal %}\\n            <sw-modal v-if=\\\"showModal\\\"\\n                      class=\\\"swag-paypal-pos-detail-runs__modal\\\"\\n                      :title=\\\"$tc('swag-paypal-pos.detail.runs.title')\\\"\\n                      :isLoading=\\\"isLoading\\\"\\n                      variant=\\\"large\\\"\\n                      @modal-close=\\\"onCloseModal\\\">\\n\\n                {% block swag_paypal_pos_detail_runs_log_modal_logs %}\\n                    <swag-paypal-pos-detail-logs :runId=\\\"currentRunId\\\"></swag-paypal-pos-detail-logs>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_runs_log_modal_footer %}\\n                    <template #modal-footer>\\n\\n                        {% block swag_paypal_pos_detail_runs_log_modal_footer_close_modal_button %}\\n                            <sw-button variant=\\\"primary\\\"\\n                                       @click=\\\"onCloseModal\\\">\\n                                {{ $tc('global.default.cancel') }}\\n                            </sw-button>\\n                        {% endblock %}\\n\\n                    </template>\\n                {% endblock %}\\n\\n            </sw-modal>\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-detail-runs.html.twig';\nimport './swag-paypal-pos-detail-runs.scss';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-detail-runs', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-catch-error',\n        'notification',\n        'listing',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            runs: [],\n            limit: 10,\n            sortBy: 'finishedAt',\n            sortDirection: 'DESC',\n            isLoading: false,\n            isCleaningLog: false,\n            showModal: false,\n            currentRunId: '',\n        };\n    },\n\n    computed: {\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n\n        columns() {\n            return [{\n                property: 'task',\n                dataIndex: 'task',\n                label: 'swag-paypal-pos.detail.runs.columns.task',\n                sortable: true,\n            }, {\n                property: 'state',\n                dataIndex: 'logs.level',\n                label: 'swag-paypal-pos.detail.runs.columns.state',\n                sortable: true,\n            }, {\n                property: 'date',\n                dataIndex: 'finishedAt',\n                label: 'swag-paypal-pos.detail.runs.columns.date',\n                sortable: true,\n            }];\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('buttons-update', []);\n        },\n\n        getListCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addFilter(Criteria.equals('salesChannelId', this.salesChannel.id));\n            criteria.addFilter(Criteria.not('AND', [Criteria.equals('status', 'in_progress')]));\n\n            criteria.addAssociation('logs');\n            criteria.getAssociation('logs').limit = 1;\n            criteria.getAssociation('logs').addSorting(Criteria.sort('level', 'DESC'));\n\n            const params = this.getMainListingParams();\n            criteria.addSorting(Criteria.sort(params.sortBy, params.sortDirection, params.naturalSorting));\n            criteria.addSorting(Criteria.sort('finishedAt', 'DESC'));\n\n            return criteria;\n        },\n\n        getList() {\n            if (this.salesChannel === null || this.salesChannel.id === null) {\n                return Promise.resolve();\n            }\n\n            this.isLoading = true;\n            return this.runRepository.search(this.getListCriteria(), Context.api).then((result) => {\n                this.runs = result;\n                this.total = result.total;\n                this.page = result.criteria.page;\n                this.limit = result.criteria.limit;\n                this.isLoading = false;\n            });\n        },\n\n        onShowModal(id) {\n            this.currentRunId = id;\n            this.showModal = true;\n        },\n\n        onCloseModal() {\n            this.showModal = false;\n            this.currentRunId = '';\n        },\n\n        onClearLogs() {\n            this.isLoading = true;\n\n            return this.SwagPayPalPosApiService.startLogCleanup(this.salesChannel.id).then(() => {\n                this.$emit('run-update');\n                return this.getList();\n            }).catch((errorResponse) => {\n                this.catchError(null, errorResponse);\n                this.getList();\n            });\n        },\n\n        getLabelVariant(item) {\n            if (item.status === 'cancelled') {\n                return 'info';\n            }\n\n            if (item.status === 'failed') {\n                return 'danger';\n            }\n\n            if (item.logs.length <= 0) {\n                return 'success';\n            }\n\n            if (item.logs[0].level >= 400) {\n                return 'danger';\n            }\n\n            if (item.logs[0].level >= 300) {\n                return 'warning';\n            }\n\n            if (item.logs[0].level > 200) {\n                return 'info';\n            }\n\n            return 'success';\n        },\n\n        getLabel(item) {\n            if (item.status === 'cancelled') {\n                return 'swag-paypal-pos.detail.runs.states.aborted';\n            }\n\n            if (item.status === 'failed') {\n                return 'swag-paypal-pos.detail.runs.states.failed';\n            }\n\n            if (item.logs.length <= 0) {\n                return 'swag-paypal-pos.detail.runs.states.successful';\n            }\n\n            if (item.logs[0].level > 200) {\n                return 'swag-paypal-pos.detail.runs.states.withWarnings';\n            }\n\n            return 'swag-paypal-pos.detail.runs.states.successful';\n        },\n    },\n});\n","import template from './swag-paypal-pos-wizard.html.twig';\nimport './swag-paypal-pos-wizard.scss';\nimport {\n    PAYPAL_POS_SALES_CHANNEL_EXTENSION,\n    PAYPAL_POS_SALES_CHANNEL_TYPE_ID,\n} from '../../../../../constant/swag-paypal.constant';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.extend('swag-paypal-pos-wizard', 'sw-first-run-wizard-modal', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'SwagPayPalPosSettingApiService',\n        'SwagPayPalPosWebhookRegisterService',\n        'salesChannelService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-catch-error',\n        'notification',\n    ],\n\n    data() {\n        return {\n            showModal: true,\n            isLoading: false,\n            salesChannel: {},\n            cloneSalesChannelId: null,\n            stepperPages: [\n                'connection',\n                'connectionSuccess',\n                'connectionDisconnect',\n                'customization',\n                'productSelection',\n                'syncLibrary',\n                'syncPrices',\n                'finish',\n            ],\n            stepper: {},\n            currentStep: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.wizardTitle,\n        };\n    },\n\n    computed: {\n        displayStepperPages() {\n            return this.stepperPages.filter((item) => {\n                return item !== 'connectionDisconnect';\n            });\n        },\n\n        stepInitialItemVariants() {\n            const maxNavigationIndex = this.stepperPages.length;\n            const { navigationIndex } = this.currentStep;\n            const navigationSteps = [];\n\n            for (let i = 1; i <= maxNavigationIndex; i += 1) {\n                if (i < navigationIndex) {\n                    navigationSteps.push('success');\n                } else if (i === navigationIndex) {\n                    navigationSteps.push('info');\n                } else {\n                    navigationSteps.push('disabled');\n                }\n            }\n            return navigationSteps;\n        },\n\n        paypalPosSalesChannelRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        salesChannelCriteria() {\n            return (new Criteria(1, 500))\n                .addAssociation(PAYPAL_POS_SALES_CHANNEL_EXTENSION)\n                .addAssociation('countries')\n                .addAssociation('currencies')\n                .addAssociation('domains')\n                .addAssociation('languages');\n        },\n\n        wizardTitle() {\n            const params = [\n                this.$tc('global.sw-admin-menu.textShopwareAdmin'),\n                this.$tc('swag-paypal-pos.general.moduleTitle'),\n                this.title,\n            ];\n\n            return params.reverse().join(' | ');\n        },\n    },\n\n    watch: {\n        '$route'(to) {\n            this.handleRouteUpdate(to);\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        handleRouteUpdate(to) {\n            const toName = to.name.replace('swag.paypal.pos.wizard.', '');\n\n            this.currentStep = this.stepper[toName];\n        },\n\n        createdComponent() {\n            this.generateStepper();\n\n            const salesChannelId = this.$route.params.id;\n            if (salesChannelId) {\n                this.loadSalesChannel();\n                return;\n            }\n\n            this.createNewSalesChannel();\n        },\n\n        mountedComponent() {\n            const step = this.$route.name.replace('swag.paypal.pos.wizard.', '');\n            this.currentStep = this.stepper[step];\n        },\n\n        generateStepper() {\n            let index = 1;\n            this.stepper = this.stepperPages.reduce((accumulator, pageName) => {\n                if (pageName === 'connectionDisconnect') {\n                    index -= 1;\n                }\n\n                accumulator[pageName] = {\n                    name: `swag.paypal.pos.wizard.${pageName}`,\n                    variant: 'large',\n                    navigationIndex: index,\n                };\n\n                if (index === 1) {\n                    this.currentStep = accumulator[pageName];\n                }\n                index += 1;\n\n                return accumulator;\n            }, {});\n        },\n\n        onCloseModal() {\n            if (!this.salesChannel._isNew && (this.$route.params.id || this.salesChannel.id)) {\n                this.routeToDetailOverview();\n\n                return;\n            }\n\n            this.routeToDashboard();\n        },\n\n        onFinishWizard() {\n            this.routeToDetailOverview(true);\n        },\n\n        routeToDashboard() {\n            this.showModal = false;\n\n            this.$nextTick(() => {\n                this.$router.push({ name: 'sw.dashboard.index' });\n            });\n        },\n\n        routeToDetailOverview(finished = false) {\n            this.showModal = false;\n\n            this.save(finished).then(() => {\n                if (finished) {\n                    this.SwagPayPalPosApiService.startCompleteSync(this.salesChannel.id);\n                }\n\n                this.$router.push({\n                    name: 'swag.paypal.pos.detail.overview',\n                    params: { id: this.salesChannel.id },\n                });\n            });\n        },\n\n        save(activateSalesChannel = false, silentWebhook = false) {\n            if (activateSalesChannel) {\n                this.salesChannel.active = true;\n            }\n\n            return this.salesChannelRepository.save(this.salesChannel, Context.api).then(async () => {\n                this.isLoading = false;\n                this.isSaveSuccessful = true;\n                this.isNewEntity = false;\n\n                this.$root.$emit('sales-channel-change');\n                await this.loadSalesChannel();\n\n                this.cloneProductVisibility();\n                this.registerWebhook(silentWebhook);\n            }).catch(() => {\n                this.isLoading = false;\n\n                this.createNotificationError({\n                    message: this.$tc('sw-sales-channel.detail.messageSaveError', 0, {\n                        name: this.salesChannel.name || this.placeholder(this.salesChannel, 'name'),\n                    }),\n                });\n            });\n        },\n\n        registerWebhook(silent = false) {\n            const webhookPromise = this.SwagPayPalPosWebhookRegisterService.registerWebhook(this.salesChannel.id);\n\n            if (!silent) {\n                return webhookPromise.catch(this.catchError.bind(this, 'swag-paypal-pos.messageWebhookRegisterError'));\n            }\n\n            return webhookPromise;\n        },\n\n        cloneProductVisibility() {\n            if (this.cloneSalesChannelId === null) {\n                return;\n            }\n\n            this.SwagPayPalPosSettingApiService.cloneProductVisibility(\n                this.cloneSalesChannelId,\n                this.salesChannel.id,\n            ).catch((errorResponse) => {\n                if (errorResponse.response.data && errorResponse.response.data.errors) {\n                    this.createNotificationError({\n                        message: this.$tc('swag-paypal-pos.messageCloneError'),\n                    });\n                }\n            });\n        },\n\n        createNewSalesChannel() {\n            if (Context.api.languageId !== Context.api.systemLanguageId) {\n                Context.api.languageId = Context.api.systemLanguageId;\n            }\n\n            this.previousApiKey = null;\n            this.salesChannel = this.salesChannelRepository.create(Context.api);\n            this.salesChannel.typeId = PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n            this.salesChannel.name = this.$tc('swag-paypal-pos.wizard.salesChannelPrototypeName');\n            this.salesChannel.active = false;\n\n            this.salesChannel.extensions.paypalPosSalesChannel\n                = this.paypalPosSalesChannelRepository.create(Context.api);\n\n            Object.assign(\n                this.salesChannel.extensions.paypalPosSalesChannel,\n                {\n                    mediaDomain: '',\n                    apiKey: '',\n                    imageDomain: '',\n                    productStreamId: null,\n                    syncPrices: true,\n                    replace: 0,\n                },\n            );\n\n            this.salesChannelService.generateKey().then((response) => {\n                this.salesChannel.accessKey = response.accessKey;\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('sw-sales-channel.detail.messageAPIError'),\n                });\n            });\n        },\n\n        loadSalesChannel() {\n            const salesChannelId = this.$route.params.id || this.salesChannel.id;\n            if (!salesChannelId) {\n                return new Promise((resolve) => { resolve(); });\n            }\n\n            this.isLoading = true;\n            return this.salesChannelRepository.get(salesChannelId, Shopware.Context.api, this.salesChannelCriteria)\n                .then((entity) => {\n                    this.salesChannel = entity;\n                    this.previousApiKey = entity.extensions.paypalPosSalesChannel.apiKey;\n                    this.isLoading = false;\n                });\n        },\n\n        updateCloneSalesChannel(cloneSalesChannelId) {\n            this.cloneSalesChannelId = cloneSalesChannelId;\n        },\n\n        toggleLoading(state) {\n            this.isLoading = state;\n        },\n    },\n});\n","export default \"{% block sw_first_run_wizard_modal %}\\n    <div class=\\\"swag-paypal-pos-wizard\\\">\\n        <sw-modal v-if=\\\"showModal\\\"\\n                  class=\\\"swag-paypal-pos-wizard-modal\\\"\\n                  position-identifier=\\\"swag-paypal-pos-wizard-modal\\\"\\n                  :title=\\\"title\\\"\\n                  :variant=\\\"variant\\\"\\n                  @modal-close=\\\"onCloseModal\\\">\\n\\n            {% block swag_paypal_pos_wizard_modal_content %}\\n                <div class=\\\"swag-paypal-pos-wizard__modal-content\\\">\\n                    <sw-container class=\\\"swag-paypal-pos-wizard__columns\\\"\\n                                  :class=\\\"{ 'swag-paypal-pos-wizard__columns--two': showSteps }\\\">\\n\\n                        {% block swag_paypal_pos_wizard_modal_content_steps %}\\n                            <div v-if=\\\"showSteps\\\"\\n                                 class=\\\"swag-paypal-pos-wizard__steps\\\">\\n                                <sw-step-display :initialItemVariants=\\\"stepInitialItemVariants\\\"\\n                                                 :itemIndex=\\\"stepIndex\\\"\\n                                                 :itemVariant=\\\"stepVariant\\\">\\n                                    <sw-step-item v-for=\\\"pageName in displayStepperPages\\\"\\n                                                  :key=\\\"pageName\\\">\\n                                        {{ $tc(`swag-paypal-pos.wizard.stepItemTitle.${pageName}`) }}\\n                                    </sw-step-item>\\n                                </sw-step-display>\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_wizard_modal_content_page %}\\n                            <div class=\\\"swag-paypal-pos-wizard__page\\\">\\n                                {% if VUE3 %}\\n                                    <router-view\\n                                        v-slot=\\\"{ Component }\\\"\\n                                    >\\n                                        <component\\n                                            :is=\\\"Component\\\"\\n                                            :salesChannel=\\\"salesChannel\\\"\\n                                            :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                            :saveSalesChannel=\\\"save\\\"\\n                                            :isLoading=\\\"isLoading\\\"\\n                                            @buttons-update=\\\"updateButtons\\\"\\n                                            @frw-set-title=\\\"setTitle\\\"\\n                                            @frw-finish=\\\"onFinishWizard\\\"\\n                                            @toggle-loading=\\\"toggleLoading\\\"\\n                                            @recreate-sales-channel=\\\"createNewSalesChannel\\\"\\n                                            @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\"\\n                                        />\\n                                    </router-view>\\n                                {% else %}\\n                                    <router-view :salesChannel=\\\"salesChannel\\\"\\n                                                 :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                                 :saveSalesChannel=\\\"save\\\"\\n                                                 :isLoading=\\\"isLoading\\\"\\n                                                 @buttons-update=\\\"updateButtons\\\"\\n                                                 @frw-set-title=\\\"setTitle\\\"\\n                                                 @frw-finish=\\\"onFinishWizard\\\"\\n                                                 @toggle-loading=\\\"toggleLoading\\\"\\n                                                 @recreate-sales-channel=\\\"createNewSalesChannel\\\"\\n                                                 @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\">\\n                                    </router-view>\\n                                {% endif %}\\n                            </div>\\n                        {% endblock %}\\n                    </sw-container>\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_paypal_pos_wizard_modal_footer %}\\n                <template #modal-footer>\\n                    <div class=\\\"swag-paypal-pos-wizard__footer\\\">\\n\\n                        {% block swag_paypal_pos_wizard_modal_footer_left %}\\n                            <div class=\\\"footer-left\\\">\\n                                <sw-button v-for=\\\"button in buttons.left\\\"\\n                                           size=\\\"small\\\"\\n                                           :key=\\\"button.key\\\"\\n                                           :disabled=\\\"button.disabled\\\"\\n                                           :isLoading=\\\"isLoading\\\"\\n                                           :variant=\\\"button.variant\\\"\\n                                           @click=\\\"onButtonClick(button.action)\\\">\\n                                    {{ button.label }}\\n                                </sw-button>\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_wizard_modal_footer_right %}\\n                            <div class=\\\"footer-right\\\">\\n                                <sw-button v-for=\\\"button in buttons.right\\\"\\n                                           size=\\\"small\\\"\\n                                           :key=\\\"button.key\\\"\\n                                           :disabled=\\\"button.disabled\\\"\\n                                           :isLoading=\\\"isLoading\\\"\\n                                           :variant=\\\"button.variant\\\"\\n                                           @click=\\\"onButtonClick(button.action)\\\">\\n                                    {{ button.label }}\\n                                </sw-button>\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                </template>\\n            {% endblock %}\\n        </sw-modal>\\n    </div>\\n{% endblock %}\\n\\n\";","import template from './swag-paypal-pos-wizard-connection.html.twig';\nimport './swag-paypal-pos-wizard-connection.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-connection', {\n    template,\n\n    inject: [\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-pos-catch-error',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            isConnecting: false,\n            apiKeyUrl: this.SwagPayPalPosSettingApiService.generateApiUrl(),\n        };\n    },\n\n    watch: {\n        'salesChannel.extensions.paypalPosSalesChannel.apiKey'(key) {\n            if (!key) {\n                return;\n            }\n\n            this.updateButtons();\n        },\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.connection.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToConnectionSuccess,\n                    disabled: this.isLoading || !(this.salesChannel.extensions.paypalPosSalesChannel.apiKey),\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeToConnectionSuccess() {\n            this.toggleLoadingState(true);\n            const apiKey = this.salesChannel.extensions.paypalPosSalesChannel.apiKey;\n\n            this.SwagPayPalPosSettingApiService.validateApiCredentials(apiKey).then((response) => {\n                if (response.credentialsValid === true) {\n                    this.toggleLoadingState(false);\n                    this.$router.push({ name: 'swag.paypal.pos.wizard.connectionSuccess' });\n                }\n            }).catch(\n                this.catchError.bind(this, 'swag-paypal-pos.authentication.messageTestError'),\n            ).finally(() => {\n                this.toggleLoadingState(false);\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_connection %}\\n    <div class=\\\"swag-paypal-pos-wizard-connection\\\">\\n\\n        {% block swag_paypal_pos_wizard_connection_headline %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection__headline\\\">\\n                {{ $tc('swag-paypal-pos.wizard.connection.headerConnect') }}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_apikey %}\\n            <sw-password-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.apiKey\\\"\\n                    {% else %}\\n                    v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.apiKey\\\"\\n                    {% endif %}\\n                    class=\\\"swag-paypal-pos-wizard-connection__apikey-field\\\"\\n                    required\\n                    :label=\\\"$tc('swag-paypal-pos.authentication.labelApiKey')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-pos.authentication.placeholderApiKey')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"forceUpdate\\\"\\n                    {% else %}\\n                    @input=\\\"forceUpdate\\\"\\n                    {% endif %}>\\n                <template #suffix>\\n\\n                    {% block swag_paypal_pos_wizard_connection_apikey_suffix %}\\n                        <sw-icon name=\\\"regular-low-vision\\\"\\n                                 class=\\\"swag-paypal-pos-wizard-connection__apikey-suffix\\\"\\n                                 size=\\\"22px\\\">\\n                        </sw-icon>\\n                    {% endblock %}\\n                </template>\\n            </sw-password-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_apikey_description %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection__apikey-description\\\">\\n\\n                {% block swag_paypal_pos_wizard_connection_apikey_description_text %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection__apikey-description-text\\\">\\n                        {{ $tc('swag-paypal-pos.authentication.apiKeyDescription') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_apikey_description_link %}\\n                    <sw-external-link :href=\\\"apiKeyUrl\\\"\\n                                      class=\\\"swag-paypal-pos-wizard-connection__apikey-description-link\\\">\\n\\n                        {% block swag_paypal_pos_wizard_connection_apikey_description_link_text %}\\n                            {{ $tc('swag-paypal-pos.authentication.buttonGenerateKey') }}\\n                        {% endblock %}\\n                    </sw-external-link>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_header_new_customer %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection__new-customer-headline\\\">\\n                {{ $tc('swag-paypal-pos.wizard.connection.headerNewCustomer') }}\\n            </div>\\n        {% endblock %}\\n\\n\\n        {% block swag_paypal_pos_wizard_connection_new_customer %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-wizard-connection-new-customer\\\"\\n                     :isLoading=\\\"isConnecting\\\">\\n                <sw-container\\n                        class=\\\"swag-paypal-pos-wizard-connection__new-customer-container\\\"\\n                        columns=\\\"1fr 1fr\\\"\\n                        align=\\\"center\\\"\\n                        gap=\\\"300px\\\">\\n\\n                    {% block swag_paypal_pos_wizard_connection_new_customer_image %}\\n                        <img class=\\\"swag-paypal-pos-wizard-connection__pos-logo\\\"\\n                             :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-logo-full.png')\\\"\\n                             alt=\\\"Zettle logo\\\">\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_wizard_connection_new_customer_button %}\\n                        <sw-button class=\\\"swag-paypal-pos-wizard-connection__pos-link\\\"\\n                                   variant=\\\"ghost\\\"\\n                                   size=\\\"small\\\"\\n                                   :link=\\\"$tc('swag-paypal-pos.wizard.connection.buttonCreateAccountLink')\\\">\\n\\n                            {% block swag_paypal_pos_wizard_connection_new_customer_button_text %}\\n                                <span class=\\\"swag-paypal-pos-wizard-connection__pos-link-text\\\">\\n                                    {{ $tc('swag-paypal-pos.wizard.connection.buttonCreateAccount') }}\\n                                </span>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_new_customer_button_icon %}\\n                                <sw-icon name=\\\"regular-external-link-s\\\"\\n                                         class=\\\"swag-paypal-pos-wizard-connection__pos-link-icon\\\"\\n                                         size=\\\"10px\\\">\\n                                </sw-icon>\\n                            {% endblock %}\\n                        </sw-button>\\n                    {% endblock %}\\n                </sw-container>\\n            </sw-card>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_wizard_connection_success %}\\n    <div class=\\\"swag-paypal-pos-wizard-connection-success\\\">\\n\\n        {% block swag_paypal_pos_wizard_connection_success_headline_content %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection-success__content\\\">\\n\\n                {% block swag_paypal_pos_wizard_connection_success_icon %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-success__icon-wrapper\\\">\\n                        <sw-icon class=\\\"swag-paypal-pos-wizard-connection-success__icon\\\"\\n                                 name=\\\"regular-thumbs-up\\\"\\n                                 size=\\\"80px\\\"\\n                                 color=\\\"#37D046\\\">\\n                        </sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_success_headline %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-success__headline\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionSuccess.headline') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_success_info %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-success__info\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionSuccess.info') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_success_user %}\\n                    <sw-card class=\\\"swag-paypal-pos-wizard-connection-success__user\\\"\\n                             position-identifier=\\\"swag-paypal-pos-wizard-connection-success-user\\\"\\n                             :isLoading=\\\"isFetchingInformation\\\">\\n                        <sw-container class=\\\"swag-paypal-pos-wizard-connection-success__user-container\\\"\\n                                      columns=\\\"30px auto 150px\\\"\\n                                      align=\\\"center\\\"\\n                                      gap=\\\"30px\\\">\\n\\n                            {% block swag_paypal_pos_wizard_connection_success_user_avatar %}\\n                                <sw-avatar\\n                                        class=\\\"swag-paypal-pos-wizard-connection-success__user-avatar\\\"\\n                                        size=\\\"40px\\\"\\n                                        :firstName=\\\"posUser.firstName\\\"\\n                                        :lastName=\\\"posUser.lastName\\\">\\n                                </sw-avatar>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_success_user_information %}\\n                                <div class=\\\"swag-paypal-pos-wizard-connection-success__user-info\\\">\\n\\n                                    {% block swag_paypal_pos_wizard_connection_success_user_information_real %}\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-success__user-info-name\\\">\\n                                            {{ posUser.fullName }}\\n                                        </div>\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-success__user-info-mail\\\">\\n                                            {{ posUser.mail }}\\n                                        </div>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_success_user_disconnect_button %}\\n                                <sw-button class=\\\"swag-paypal-pos-wizard-connection-success__user-disconnect\\\"\\n                                           variant=\\\"ghost\\\"\\n                                           size=\\\"small\\\"\\n                                           @click=\\\"onDisconnect\\\">\\n                                    {{ $tc('swag-paypal-pos.wizard.connectionSuccess.disconnectButton') }}\\n                                </sw-button>\\n                            {% endblock %}\\n                        </sw-container>\\n                    </sw-card>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_success_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection-success__disclaimer\\\">\\n                {{ $tc('swag-paypal-pos.wizard.connectionSuccess.disclaimer') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-connection-success.html.twig';\nimport './swag-paypal-pos-wizard-connection-success.scss';\n\nconst { Component, Context } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-connection-success', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    mixin: [\n        'placeholder',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            posData: null,\n            isFetchingInformation: true,\n        };\n    },\n\n    computed: {\n        posUser() {\n            if (this.isFetchingInformation) {\n                const firstName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeFirstName');\n                const lastName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeLastName');\n                const mail = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeMail');\n\n                return {\n                    firstName,\n                    lastName,\n                    fullName: `${firstName} ${lastName}`,\n                    mail,\n                };\n            }\n            const parts = this.posData.merchantInformation.name.split(' ');\n\n            return {\n                firstName: parts[0],\n                lastName: parts[parts.length - 1],\n                fullName: this.posData.merchantInformation.name,\n                mail: this.posData.merchantInformation.contactEmail,\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isFetchingInformation = true;\n            this.updateButtons();\n            this.setTitle();\n\n            return this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel, true).then((response) => {\n                this.posData = response;\n\n                if (this.salesChannel.languageId === null) {\n                    this.salesChannel.languageId = Context.api.systemLanguageId;\n                    this.salesChannel.languages.push({\n                        id: Context.api.systemLanguageId,\n                    });\n                }\n\n                return this.saveSalesChannel(false, true);\n            }).finally(() => {\n                this.isFetchingInformation = false;\n                this.updateButtons();\n            });\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.connectionSuccess.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToCustomization,\n                    disabled: this.isFetchingInformation,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeToCustomization() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.customization',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        onDisconnect() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.connectionDisconnect',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_connection_disconnect %}\\n    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect\\\">\\n\\n        {% block swag_paypal_pos_wizard_connection_disconnect_headline_content %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__content\\\">\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_icon %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__icon-wrapper\\\">\\n                        <sw-icon class=\\\"swag-paypal-pos-wizard-connection-disconnect__icon\\\"\\n                                 name=\\\"regular-exclamation-triangle\\\"\\n                                 size=\\\"80px\\\"\\n                                 color=\\\"#de294c\\\">\\n                        </sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_headline %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__headline\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionDisconnect.headline') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_info %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__info\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionDisconnect.info') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_user %}\\n                    <sw-card class=\\\"swag-paypal-pos-wizard-connection-disconnect__user\\\"\\n                             position-identifier=\\\"swag-paypal-pos-wizard-connection-disconnect-user\\\"\\n                             :isLoading=\\\"isFetchingInformation\\\">\\n                        <sw-container class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-container\\\"\\n                                      columns=\\\"30px auto 150px\\\"\\n                                      align=\\\"center\\\"\\n                                      gap=\\\"30px\\\">\\n\\n                            {% block swag_paypal_pos_wizard_connection_disconnect_user_avatar %}\\n                                <sw-avatar\\n                                    class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-avatar\\\"\\n                                    size=\\\"40px\\\"\\n                                    :firstName=\\\"posUser.firstName\\\"\\n                                    :lastName=\\\"posUser.lastName\\\">\\n                                </sw-avatar>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_disconnect_user_information %}\\n                                <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-info\\\">\\n\\n                                    {% block swag_paypal_pos_wizard_connection_disconnect_user_information_real %}\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-info-name\\\">\\n                                            {{ posUser.fullName }}\\n                                        </div>\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-info-mail\\\">\\n                                            {{ posUser.mail }}\\n                                        </div>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </sw-container>\\n                    </sw-card>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-connection-disconnect.html.twig';\nimport './swag-paypal-pos-wizard-connection-disconnect.scss';\n\nconst { Component, Context } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-connection-disconnect', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    mixin: [\n        'placeholder',\n        'notification',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            posData: null,\n            isFetchingInformation: true,\n        };\n    },\n\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        posUser() {\n            if (this.isFetchingInformation) {\n                const firstName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeFirstName');\n                const lastName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeLastName');\n                const mail = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeMail');\n\n                return {\n                    firstName,\n                    lastName,\n                    fullName: `${firstName} ${lastName}`,\n                    mail,\n                };\n            }\n            const parts = this.posData.merchantInformation.name.split(' ');\n\n            return {\n                firstName: parts[0],\n                lastName: parts[parts.length - 1],\n                fullName: this.posData.merchantInformation.name,\n                mail: this.posData.merchantInformation.contactEmail,\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isFetchingInformation = true;\n            this.updateButtons();\n            this.setTitle();\n\n            this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel, true).then((response) => {\n                this.posData = response;\n            }).finally(() => {\n                this.isFetchingInformation = false;\n                this.updateButtons();\n            });\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.connectionDisconnect.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'cancel',\n                    label: this.$tc('global.default.cancel'),\n                    position: 'right',\n                    action: this.routeBackToConnectionSuccess,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('swag-paypal-pos.wizard.connectionDisconnect.disconnectButton'),\n                    position: 'right',\n                    variant: 'danger',\n                    action: this.onDisconnect,\n                    disabled: this.isFetchingInformation,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToConnectionSuccess() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.connectionSuccess',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        onDisconnect() {\n            // ToDo PPI-22 - The module should go into a disconnected state instead of deleting the whole saleschannel.\n            this.salesChannelRepository.delete(this.salesChannel.id, Context.api).then(() => {\n                // Forces the sw-admin-menu component to refresh the SalesChannel list\n                this.$root.$emit('sales-channel-change');\n\n                this.$emit('recreate-sales-channel');\n                this.forceUpdate();\n\n                this.$router.push({ name: 'swag.paypal.pos.wizard.connection' });\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('swag-paypal-pos.wizard.connectionDisconnect.disconnectErrorMessage'),\n                });\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n    },\n});\n","import template from './swag-paypal-pos-wizard-customization.html.twig';\nimport './swag-paypal-pos-wizard-customization.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-customization', {\n    template,\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    watch: {\n        'isLoading'(loading) {\n            if (loading) {\n                return;\n            }\n\n            this.updateButtons();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n            this.changeLanguage();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.customization.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToConnectionSuccess,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToProductSelection,\n                    disabled: this.nextButtonDisabled(),\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        nextButtonDisabled() {\n            return this.isLoading\n                || !(this.salesChannel.name)\n                || !(this.salesChannel.languageId)\n                || !(this.salesChannel.extensions.paypalPosSalesChannel.mediaDomain);\n        },\n\n        routeBackToConnectionSuccess() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.connectionSuccess',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToProductSelection() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.productSelection',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.$nextTick().then(() => {\n                this.updateButtons();\n            });\n        },\n\n        changeLanguage() {\n            this.salesChannel.languages.length = 0;\n            this.salesChannel.languages.push({\n                id: this.salesChannel.languageId,\n            });\n            this.$forceUpdate();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_customization %}\\n    <div v-if=\\\"!isLoading\\\"\\n         class=\\\"swag-paypal-pos-wizard-customization\\\">\\n\\n        {% block swag_paypal_pos_wizard_customization_name %}\\n            <sw-text-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.name\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.name\\\"\\n                {% endif %}\\n                class=\\\"swag-paypal-pos-wizard-customization__name-field\\\"\\n                validation=\\\"required\\\"\\n                required\\n                :label=\\\"$tc('swag-paypal-pos.wizard.customization.salesChannelLabel')\\\"\\n                :placeholder=\\\"$tc('sw-sales-channel.detail.placeholderName')\\\"\\n                @input=\\\"forceUpdate\\\">\\n            </sw-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_customization_language %}\\n            <sw-entity-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.languageId\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.languageId\\\"\\n                {% endif %}\\n                entity=\\\"language\\\"\\n                required\\n                :label=\\\"$tc('global.entities.language')\\\"\\n                @change=\\\"changeLanguage\\\">\\n            </sw-entity-single-select>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_customization_media_domain %}\\n            <sw-url-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.mediaDomain\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.mediaDomain\\\"\\n                {% endif %}\\n                class=\\\"swag-paypal-pos-wizard-customization__domain-field\\\"\\n                required\\n                :label=\\\"$tc('swag-paypal-pos.wizard.customization.labelDomain')\\\"\\n                :placeholder=\\\"$tc('swag-paypal-pos.wizard.customization.placeholderDomain')\\\"\\n                {% if VUE3 %}\\n                :value=\\\"salesChannel.extensions.paypalPosSalesChannel.mediaDomain\\\"\\n                @update:value=\\\"forceUpdate\\\"\\n                {% else %}\\n                @input=\\\"forceUpdate\\\"\\n                {% endif %}>\\n            </sw-url-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_success_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-customization__subtitle\\\">\\n                {{ $tc('swag-paypal-pos.wizard.customization.subtitle') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_wizard_product_selection %}\\n    <div class=\\\"swag-paypal-pos-wizard-product-selection\\\">\\n\\n        {% block swag_paypal_pos_wizard_product_selection_info %}\\n            <p class=\\\"swag-paypal-pos-wizard-product-selection__info\\\">\\n                {{ $tc('swag-paypal-pos.wizard.productSelection.info') }}\\n            </p>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_product_selection_sales_channel_toggle %}\\n            <sw-switch-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"hasClone\\\"\\n                    {% else %}\\n                    v-model=\\\"hasClone\\\"\\n                    {% endif %}\\n                    class=\\\"swag-paypal-pos-wizard-product-selection__clone-switch\\\"\\n                    bordered\\n                    :label=\\\"$tc('swag-paypal-pos.wizard.productSelection.labelToggle')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"updateClone\\\"\\n                    {% else %}\\n                    @change=\\\"updateClone\\\"\\n                    {% endif %}>\\n            </sw-switch-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_product_selection_sales_channel_select %}\\n            <sw-entity-single-select\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"localCloneSalesChannelId\\\"\\n                    {% else %}\\n                    v-model=\\\"localCloneSalesChannelId\\\"\\n                    {% endif %}\\n                    class=\\\"swag-paypal-pos-wizard-product-selection__saleschannel-select\\\"\\n                    entity=\\\"sales_channel\\\"\\n                    :criteria=\\\"salesChannelCriteria\\\"\\n                    :disabled=\\\"!hasClone\\\"\\n                    :label=\\\"$tc('swag-paypal-pos.wizard.productSelection.labelSelect')\\\"\\n                    @input=\\\"forceUpdate\\\">\\n            </sw-entity-single-select>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-product-selection.html.twig';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-wizard-product-selection', {\n    template,\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            manualSalesChannel: false,\n            hasClone: false,\n        };\n    },\n\n    computed: {\n        localCloneSalesChannelId: {\n            get() {\n                this.updateButtons();\n                return this.cloneSalesChannelId;\n            },\n            set(cloneSalesChannelId) {\n                this.$emit('update-clone-sales-channel', cloneSalesChannelId);\n            },\n        },\n\n        salesChannelCriteria() {\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.not('and', [\n                Criteria.equals('id', this.salesChannel.id),\n            ]));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.productSelection.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToCustomization,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToSyncLibrary,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToCustomization() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.customization',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToSyncLibrary() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncLibrary',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        updateClone() {\n            this.$emit('update-clone-sales-channel', null);\n            this.forceUpdate();\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","import template from './swag-paypal-pos-wizard-sync-prices.html.twig';\nimport './swag-paypal-pos-wizard-sync-prices.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-sync-prices', {\n    template,\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    computed: {\n        optionTrue() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueDescription'),\n            };\n        },\n\n        optionFalse() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseDescription'),\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.syncPrices.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToSyncLibrary,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToFinish,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToSyncLibrary() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncLibrary',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToFinish() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.finish',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_sync_prices %}\\n    <div class=\\\"swag-paypal-pos-wizard-sync-prices\\\">\\n\\n        {% block swag_paypal_pos_wizard_sync_prices_header %}\\n            <div class=\\\"swag-paypal-pos-wizard-sync-prices__headline\\\">\\n                {{ $tc('swag-paypal-pos.wizard.syncPrices.header') }}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_prices_description_input %}\\n            <swag-paypal-pos-boolean-radio\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.syncPrices\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.syncPrices\\\"\\n                {% endif %}\\n                :label=\\\"$tc('swag-paypal-pos.wizard.syncPrices.description')\\\"\\n                :optionTrue=\\\"optionTrue\\\"\\n                :optionFalse=\\\"optionFalse\\\">\\n            </swag-paypal-pos-boolean-radio>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_prices_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-sync-prices__disclaimer\\\">\\n                {{ $tc('swag-paypal-pos.wizard.syncPrices.disclaimer') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-sync-library.html.twig';\nimport './swag-paypal-pos-wizard-sync-library.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-sync-library', {\n    template,\n\n    inject: [\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            shopwareProductsCount: 0,\n            posProductsCount: 0,\n        };\n    },\n\n    computed: {\n        options() {\n            return [\n                {\n                    value: 2,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyDescription'),\n                }, {\n                    value: 1,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeDescription'),\n                }, {\n                    value: 0,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotDescription'),\n                },\n            ];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n            this.fetchProductCounts();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.syncLibrary.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToProductSelection,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToSyncPrices,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToProductSelection() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.productSelection',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToSyncPrices() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncPrices',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n\n        fetchProductCounts() {\n            this.toggleLoadingState(true);\n            this.SwagPayPalPosSettingApiService.getProductCount(\n                this.salesChannel.id,\n                this.cloneSalesChannelId,\n            ).then((response) => {\n                this.shopwareProductsCount = response.localCount;\n                this.posProductsCount = response.remoteCount;\n            }).finally(() => {\n                this.toggleLoadingState(false);\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_sync_library %}\\n    <div class=\\\"swag-paypal-pos-wizard-sync-library\\\">\\n\\n        {% block swag_paypal_pos_wizard_sync_library_header %}\\n            <i18n class=\\\"swag-paypal-pos-wizard-sync-library__headline\\\"\\n                  path=\\\"swag-paypal-pos.wizard.syncLibrary.header\\\"\\n                  tag=\\\"div\\\">\\n                <template #shopwareProducts>\\n                    <span>{{ $tc('swag-paypal-pos.wizard.syncLibrary.shopwareProducts', shopwareProductsCount) }}</span>\\n                </template>\\n                <template #posProducts>\\n                    <span>{{ $tc('swag-paypal-pos.wizard.syncLibrary.posProducts', posProductsCount) }}</span>\\n                </template>\\n            </i18n>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_library_description_input %}\\n            <sw-radio-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                {% endif %}\\n                class=\\\"swag-paypal-pos-boolean-radio\\\"\\n                :label=\\\"$tc('swag-paypal-pos.wizard.syncLibrary.description')\\\"\\n                :options=\\\"options\\\">\\n            </sw-radio-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_library_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-sync-library__disclaimer\\\">\\n                {{ $tc('swag-paypal-pos.wizard.syncLibrary.disclaimer') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-finish.html.twig';\nimport './swag-paypal-pos-wizard-finish.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-finish', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.finish.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToSyncPrices,\n                    disabled: false,\n                },\n                {\n                    key: 'finish',\n                    label: this.$tc('sw-first-run-wizard.general.buttonFinish'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.onFinish,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToSyncPrices() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncPrices',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        onFinish() {\n            this.$emit('frw-finish');\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_finish %}\\n    <div class=\\\"swag-paypal-pos-wizard-finish\\\">\\n\\n        {% block swag_paypal_pos_wizard_finish_content %}\\n            <div class=\\\"swag-paypal-pos-wizard-finish__content\\\">\\n\\n                {% block swag_paypal_pos_wizard_finish_content_icon %}\\n                    <div class=\\\"swag-paypal-pos-wizard-finish__icon-wrapper\\\">\\n                        <sw-icon class=\\\"swag-paypal-pos-wizard-finish__icon\\\"\\n                                 name=\\\"regular-checkmark\\\"\\n                                 size=\\\"80px\\\"\\n                                 color=\\\"#37D046\\\">\\n                        </sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_finish_content_header %}\\n                    <div class=\\\"swag-paypal-pos-wizard-finish__content-header\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.finish.header') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_finish_content_description %}\\n                    <div class=\\\"swag-paypal-pos-wizard-finish__content-description\\\">\\n                        <p class=\\\"swag-paypal-pos-wizard-finish__first-paragraph\\\">\\n                            {{ $tc('swag-paypal-pos.wizard.finish.firstParagraph') }}\\n                        </p>\\n\\n                        <p class=\\\"swag-paypal-pos-wizard-finish__second-paragraph\\\">\\n                            {{ $tc('swag-paypal-pos.wizard.finish.secondParagraph') }}\\n                        </p>\\n                    </div>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import './component';\nimport './extension';\nimport './page';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal-pos', {\n    type: 'plugin',\n    name: 'SwagPayPalPos',\n    title: 'swag-paypal.general.mainMenuItemGeneral',\n    description: 'swag-paypal.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'regular-sync',\n\n    routes: {\n        detail: {\n            component: 'swag-paypal-pos',\n            path: ':id/detail',\n            redirect: {\n                name: 'swag.paypal.pos.detail.overview',\n            },\n            meta: {\n                privilege: 'sales_channel.viewer',\n            },\n            children: {\n                overview: {\n                    component: 'swag-paypal-pos-detail-overview',\n                    path: 'overview',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n                syncedProducts: {\n                    component: 'swag-paypal-pos-detail-synced-products',\n                    path: 'synced-products',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n                settings: {\n                    component: 'swag-paypal-pos-detail-settings',\n                    path: 'settings',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n                runs: {\n                    component: 'swag-paypal-pos-detail-runs',\n                    path: 'runs',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n            },\n        },\n        wizard: {\n            component: 'swag-paypal-pos-wizard',\n            path: ':id?/wizard',\n            redirect: {\n                name: 'swag.paypal.pos.wizard.connection',\n            },\n            meta: {\n                privilege: 'sales_channel.creator',\n            },\n            children: {\n                connection: {\n                    component: 'swag-paypal-pos-wizard-connection',\n                    path: 'connection',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                connectionSuccess: {\n                    component: 'swag-paypal-pos-wizard-connection-success',\n                    path: 'connection-success',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                connectionDisconnect: {\n                    component: 'swag-paypal-pos-wizard-connection-disconnect',\n                    path: 'connection-disconnect',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                customization: {\n                    component: 'swag-paypal-pos-wizard-customization',\n                    path: 'customization',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                productSelection: {\n                    component: 'swag-paypal-pos-wizard-product-selection',\n                    path: 'product-selection',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                syncPrices: {\n                    component: 'swag-paypal-pos-wizard-sync-prices',\n                    path: 'sync-prices',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                syncLibrary: {\n                    component: 'swag-paypal-pos-wizard-sync-library',\n                    path: 'sync-library',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                finish: {\n                    component: 'swag-paypal-pos-wizard-finish',\n                    path: 'finish',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n            },\n        },\n    },\n});\n","import template from './swag-paypal-disputes-detail.html.twig';\nimport './swag-paypal-disputes-detail.scss';\n\nconst { Context, Component, Filter, Utils } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { capitalizeString } = Shopware.Utils.string;\n\nComponent.register('swag-paypal-disputes-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalDisputeApiService',\n        'systemConfigApiService',\n        'repositoryFactory',\n    ],\n\n    mixins: ['notification'],\n\n    props: {\n        disputeId: {\n            type: String,\n            required: true,\n        },\n\n        salesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            dispute: null,\n            resolutionCenterUrl: 'https://www.paypal.com/resolutioncenter',\n            orderModuleLink: null,\n        };\n    },\n\n    computed: {\n        orderTransactionRepository() {\n            return this.repositoryFactory.create('order_transaction');\n        },\n\n        orderTransactionCriteria() {\n            if (!this.dispute.disputed_transactions) {\n                return null;\n            }\n\n            const disputedTransaction = this.dispute.disputed_transactions[0];\n            if (!disputedTransaction?.custom) {\n                return null;\n            }\n\n            const id = JSON.parse(disputedTransaction.custom)?.orderTransactionId ?? disputedTransaction.custom;\n\n            if (!(typeof id === 'string') || id.length !== 32) {\n                return null;\n            }\n\n            const criteria = new Criteria(1, 1);\n            criteria.setIds([id]);\n\n            return criteria;\n        },\n\n        externalDetailPageLink() {\n            return `${this.resolutionCenterUrl}/${this.dispute.dispute_id}`;\n        },\n\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            this.systemConfigApiService.getValues('SwagPayPal.settings').then((response) => {\n                if (response['SwagPayPal.settings.sandbox']) {\n                    this.resolutionCenterUrl = 'https://www.sandbox.paypal.com/resolutioncenter';\n                }\n\n                this.getDetail();\n            });\n        },\n\n        getDetail() {\n            this.SwagPayPalDisputeApiService.detail(this.disputeId, this.salesChannelId).then((dispute) => {\n                this.dispute = dispute;\n                this.setLinkToOrderModule();\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        handleError(errorResponse) {\n            const errorDetail = errorResponse.response.data.errors[0].detail;\n            this.createNotificationError({\n                message: `${this.$tc('swag-paypal-disputes.list.errorTitle')}: ${errorDetail}`,\n                autoClose: false,\n            });\n            this.isLoading = false;\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use computed externalDetailPageLink instead\n         */\n        getExternalDetailPageLink() {\n            return `${this.resolutionCenterUrl}/${this.dispute.dispute_id}`;\n        },\n\n        setLinkToOrderModule() {\n            if (!this.orderTransactionCriteria) {\n                this.orderModuleLink = null;\n            }\n\n            this.orderTransactionRepository.search(this.orderTransactionCriteria, Context.api, this.orderTransactionCriteria)\n                .then((orderTransactions) => {\n                    const orderTransaction = orderTransactions[0];\n\n                    if (orderTransaction === null) {\n                        return;\n                    }\n\n                    this.orderModuleLink = { name: 'sw.order.detail.general', params: { id: orderTransaction.orderId } };\n                });\n        },\n\n        formatTechnicalText(technicalText) {\n            return capitalizeString(technicalText).replace(/_/g, ' ');\n        },\n\n        getInquiryClass(stage) {\n            if (stage === 'INQUIRY') {\n                return 'swag-paypal-disputes-detail__stage-inquiry';\n            }\n\n            return 'swag-paypal-disputes-detail__stage-other';\n        },\n\n        getDueDate(sellerResponseDueDate, buyerResponseDueDate) {\n            if (sellerResponseDueDate !== null) {\n                return `${this.$tc('swag-paypal-disputes.common.response_due_date.seller')}: ${\n                    this.formatDate(sellerResponseDueDate)}`;\n            }\n\n            if (buyerResponseDueDate !== null) {\n                return `${this.$tc('swag-paypal-disputes.common.response_due_date.buyer')}: ${\n                    this.formatDate(buyerResponseDueDate)}`;\n            }\n\n            return '';\n        },\n\n        copyToClipboard() {\n            if (this.dispute === null) {\n                return;\n            }\n\n            try {\n                Utils.dom.copyToClipboard(JSON.stringify(this.dispute));\n                this.createNotificationInfo({\n                    message: this.$tc('global.sw-field.notification.notificationCopySuccessMessage'),\n                });\n            } catch (err) {\n                this.createNotificationError({\n                    message: this.$tc('global.sw-field.notification.notificationCopyFailureMessage'),\n                });\n            }\n        },\n\n        formatDate(dateTime) {\n            return this.dateFilter(dateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_disputes_detail %}\\n    <sw-page class=\\\"swag-paypal-disputes-detail\\\">\\n\\n        {% block swag_paypal_disputes_detail_smart_bar_header %}\\n            <template #smart-bar-header>\\n\\n                {% block swag_paypal_disputes_detail_smart_bar_header_title %}\\n                    <h2>\\n\\n                        {% block swag_paypal_disputes_detail_smart_bar_header_title %}\\n                            {{ $tc('swag-paypal-disputes.detail.title') }}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_disputes_detail_smart_bar_header_dispute_id %}\\n                            {{ disputeId }}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_disputes_detail_smart_bar_header_title_addition %}\\n                            {{ $tc('swag-paypal-disputes.detail.titleAddition') }}\\n                        {% endblock %}\\n\\n                    </h2>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_disputes_detail_content %}\\n            <template #content>\\n                <sw-card-view>\\n\\n                    {% block swag_paypal_disputes_detail_content_details %}\\n                        <sw-card position-identifier=\\\"swag-paypal-disputes-detail-content-details\\\"\\n                                 :isLoading=\\\"isLoading\\\"\\n                                 :title=\\\"$tc('swag-paypal-disputes.detail.mainFieldsCardTitle')\\\">\\n\\n                            {% block swag_paypal_disputes_detail_content_details_fields %}\\n                                <template v-if=\\\"dispute\\\">\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_external_link %}\\n                                        <div class=\\\"swag-paypal-disputes-detail__links\\\">\\n                                            <sw-external-link :href=\\\"externalDetailPageLink\\\">\\n                                                {{ $tc('swag-paypal-disputes.detail.externalLinkText') }}\\n                                            </sw-external-link>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_order_module_link %}\\n                                        <div class=\\\"swag-paypal-disputes-detail__links\\\">\\n                                            <router-link v-if=\\\"orderModuleLink\\\"\\n                                                         :to=\\\"orderModuleLink\\\"\\n                                                         target=\\\"_blank\\\"\\n                                                         rel=\\\"noopener\\\">\\n                                                {{ $tc('swag-paypal-disputes.detail.orderModuleLinkText') }}\\n                                            </router-link>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_separator %}\\n                                        <hr class=\\\"swag-paypal-disputes-detail__separator\\\"/>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_id %}\\n                                        <sw-text-field :value=\\\"dispute.dispute_id\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.dispute_id')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_update_time %}\\n                                        <sw-text-field :value=\\\"formatDate(dispute.update_time)\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.update_time')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_due_date %}\\n                                        <sw-text-field v-if=\\\"dispute.seller_response_due_date || dispute.buyer_response_due_date\\\"\\n                                                       :value=\\\"getDueDate(dispute.seller_response_due_date, dispute.buyer_response_due_date)\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.response_due_date.label')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_status %}\\n                                        <sw-text-field :value=\\\"`${formatTechnicalText(dispute.status)} (${formatTechnicalText(dispute.reason)})`\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.status')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_dispute_life_cycle_stage %}\\n                                        <sw-text-field :value=\\\"formatTechnicalText(dispute.dispute_life_cycle_stage)\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.dispute_life_cycle_stage')\\\"\\n                                                       :class=\\\"getInquiryClass(dispute.dispute_life_cycle_stage)\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_dispute_amount %}\\n                                        <sw-text-field :value=\\\"`${dispute.dispute_amount.value} ${dispute.dispute_amount.currency_code}`\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.dispute_amount')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-card>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_disputes_detail_content_raw_data %}\\n                        <sw-card position-identifier=\\\"swag-paypal-disputes-detail-content-raw-data\\\"\\n                                 :isLoading=\\\"isLoading\\\"\\n                                 :title=\\\"$tc('swag-paypal-disputes.detail.rawDataCardTitle')\\\">\\n\\n                            {% block swag_paypal_disputes_detail_content_raw_data_content %}\\n                                <template v-if=\\\"dispute\\\">\\n\\n                                    {% block swag_paypal_disputes_detail_content_raw_data_text %}\\n                                        <sw-textarea-field :value=\\\"JSON.stringify(dispute, null, 2)\\\"\\n                                                           disabled>\\n                                        </sw-textarea-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_raw_data_copy_button %}\\n                                        <sw-button @click=\\\"copyToClipboard\\\">\\n                                            {{ $tc('swag-paypal-disputes.detail.copyButtonLabel') }}\\n                                        </sw-button>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-card>\\n                    {% endblock %}\\n\\n                </sw-card-view>\\n            </template>\\n        {% endblock %}\\n\\n    </sw-page>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_disputes_list %}\\n    <sw-page class=\\\"swag-paypal-disputes-list\\\">\\n\\n        {% block swag_paypal_disputes_list_smart_bar_header %}\\n            <template #smart-bar-header>\\n\\n                {% block swag_paypal_disputes_list_smart_bar_header_title %}\\n                    <h2>\\n\\n                        {% block swag_paypal_disputes_list_smart_bar_header_title_text %}\\n                            {{ $tc('swag-paypal-disputes.list.title') }}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_disputes_list_smart_bar_header_amount %}\\n                            <template v-if=\\\"!isLoading\\\">\\n                                ({{ total }})\\n                            </template>\\n                        {% endblock %}\\n\\n                    </h2>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_disputes_list_content %}\\n            <template #content>\\n                <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                <template v-else>\\n\\n                    {% block swag_paypal_disputes_list_content_grid %}\\n                        <sw-data-grid v-if=\\\"disputes.length > 0\\\"\\n                                      :dataSource=\\\"visibleDisputes\\\"\\n                                      :columns=\\\"disputesColumns\\\"\\n                                      :showActions=\\\"false\\\"\\n                                      :showSelection=\\\"false\\\">\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_update_time %}\\n                                <template #column-update_time=\\\"{ item }\\\">\\n                                    <div>\\n                                        <div>{{ formatUpdateDate(item.update_time) }}</div>\\n                                        <div>{{ formatUpdateTime(item.update_time) }}</div>\\n                                    </div>\\n                                </template>\\n                            {% endblock %}\\n\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_seller_response_due_date %}\\n                                <template #column-response_due_date=\\\"{ item }\\\">\\n                                    <template v-if=\\\"item.seller_response_due_date\\\">\\n                                        <strong>{{ $tc('swag-paypal-disputes.common.response_due_date.seller') }}</strong>:\\n                                        {{ formatDate(item.seller_response_due_date) }}\\n                                    </template>\\n                                    <template v-else-if=\\\"item.buyer_response_due_date\\\">\\n                                        <strong>{{ $tc('swag-paypal-disputes.common.response_due_date.buyer') }}</strong>:\\n                                        {{ formatDate(item.buyer_response_due_date) }}\\n                                    </template>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_status %}\\n                                <template #column-status=\\\"{ item }\\\">\\n                                    <div>\\n                                        <div>\\n                                            {{ formatTechnicalText(item.dispute_state) }}\\n                                            <template v-if=\\\"item.dispute_state !== item.status\\\"> ({{ formatTechnicalText(item.status) }})</template>\\n                                        </div>\\n                                        <div class=\\\"swag-paypal-disputes-list__reason\\\">\\n                                            {{ formatTechnicalText(item.reason) }}\\n                                        </div>\\n                                    </div>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_dispute_id %}\\n                                <template #column-dispute_id=\\\"{ item }\\\">\\n                                    <router-link :to=\\\"{ name: 'swag.paypal.disputes.detail', params: { disputeId: item.dispute_id , salesChannelId} }\\\">\\n                                        {{ item.dispute_id }}\\n                                    </router-link>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_dispute_life_cycle_stage %}\\n                                <template #column-dispute_life_cycle_stage=\\\"{ item }\\\">\\n                                    <div v-if=\\\"item.dispute_life_cycle_stage === 'INQUIRY'\\\"\\n                                          class=\\\"swag-paypal-disputes-list__stage-inquiry\\\">\\n                                        {{ formatTechnicalText(item.dispute_life_cycle_stage) }}\\n                                    </div>\\n                                    <div v-else\\n                                          class=\\\"swag-paypal-disputes-list__stage-other\\\">\\n                                        {{ formatTechnicalText(item.dispute_life_cycle_stage) }}\\n                                    </div>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_dispute_amount %}\\n                                <template #column-dispute_amount=\\\"{ item }\\\">\\n                                    {{ item.dispute_amount.value }} {{ item.dispute_amount.currency_code }}\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_pagination %}\\n                                <template #pagination>\\n                                    <sw-pagination\\n                                        :page=\\\"page\\\"\\n                                        :limit=\\\"limit\\\"\\n                                        :total=\\\"total\\\"\\n                                        @page-change=\\\"onPageChange\\\">\\n                                    </sw-pagination>\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-data-grid>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_disputes_list_content_empty_state %}\\n                        <sw-empty-state\\n                            v-if=\\\"disputes.length === 0\\\"\\n                            :title=\\\"$tc('swag-paypal-disputes.list.emptyState.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-disputes.list.emptyState.subline')\\\"\\n                            icon=\\\"regular-comments\\\"\\n                            color=\\\"#F88962\\\">\\n                        </sw-empty-state>\\n                    {% endblock %}\\n\\n                </template>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_disputes_list_sidebar %}\\n            <template #sidebar>\\n                <sw-sidebar class=\\\"swag-paypal-disputes-list__sidebar\\\">\\n\\n                    {% block swag_paypal_disputes_list_sidebar_refresh %}\\n                        <sw-sidebar-item\\n                            icon=\\\"regular-sync\\\"\\n                            :title=\\\"$tc('swag-paypal-disputes.list.titleSidebarItemRefresh')\\\"\\n                            @click=\\\"onRefresh\\\">\\n                        </sw-sidebar-item>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_disputes_list_sidebar_filter %}\\n                        <sw-sidebar-item icon=\\\"regular-filter\\\"\\n                                         :title=\\\"$tc('swag-paypal-disputes.list.titleSidebarItemFilter')\\\">\\n\\n                            {% block swag_paypal_disputes_list_sidebar_filter_items %}\\n                                {% block swag_paypal_disputes_list_sidebar_filter_sales_channel %}\\n                                    <sw-sales-channel-switch :label=\\\"$tc('sw-settings.system-config.labelSalesChannelSelect')\\\"\\n                                                             @change-sales-channel-id=\\\"onSalesChannelChanged\\\">\\n                                    </sw-sales-channel-switch>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_disputes_list_sidebar_filter_dispute_state %}\\n                                    <sw-multi-select\\n                                        :label=\\\"$tc('swag-paypal-disputes.common.status')\\\"\\n                                        :options=\\\"disputeStates\\\"\\n                                        :value=\\\"disputeStateFilter\\\"\\n                                        {% if VUE3 %}\\n                                        @update:value=\\\"onChangeDisputeStateFilter\\\"\\n                                        {% else %}\\n                                        @change=\\\"onChangeDisputeStateFilter\\\"\\n                                        {% endif %}>\\n                                    </sw-multi-select>\\n                                {% endblock %}\\n                            {% endblock %}\\n\\n                        </sw-sidebar-item>\\n                    {% endblock %}\\n\\n                </sw-sidebar>\\n            </template>\\n        {% endblock %}\\n\\n    </sw-page>\\n{% endblock %}\\n\";","export const DISPUTE_STATE_REQUIRED_ACTION = 'REQUIRED_ACTION';\nexport const DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION = 'REQUIRED_OTHER_PARTY_ACTION';\nexport const DISPUTE_STATE_UNDER_PAYPAL_REVIEW = 'UNDER_PAYPAL_REVIEW';\nexport const DISPUTE_STATE_RESOLVED = 'RESOLVED';\nexport const DISPUTE_STATE_OPEN_INQUIRIES = 'OPEN_INQUIRIES';\nexport const DISPUTE_STATE_APPEALABLE = 'APPEALABLE';\n\nexport default {\n    DISPUTE_STATE_REQUIRED_ACTION,\n    DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION,\n    DISPUTE_STATE_UNDER_PAYPAL_REVIEW,\n    DISPUTE_STATE_RESOLVED,\n    DISPUTE_STATE_OPEN_INQUIRIES,\n    DISPUTE_STATE_APPEALABLE,\n};\n","import template from './swag-paypal-disputes-list.html.twig';\nimport {\n    DISPUTE_STATE_REQUIRED_ACTION,\n    DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION,\n    DISPUTE_STATE_UNDER_PAYPAL_REVIEW,\n    DISPUTE_STATE_RESOLVED,\n    DISPUTE_STATE_OPEN_INQUIRIES,\n    DISPUTE_STATE_APPEALABLE,\n} from './swag-paypal-disputes-consts';\nimport './swag-paypal-disputes-list.scss';\n\nconst { Component, Filter } = Shopware;\nconst { debounce } = Shopware.Utils;\nconst { capitalizeString } = Shopware.Utils.string;\n\nComponent.register('swag-paypal-disputes-list', {\n    template,\n\n    inject: [\n        'SwagPayPalDisputeApiService',\n        'systemConfigApiService',\n    ],\n\n    mixins: ['notification'],\n\n    data() {\n        return {\n            isLoading: false,\n            disputes: [],\n            disputeStates: [\n                {\n                    value: DISPUTE_STATE_REQUIRED_ACTION,\n                    label: this.formatTechnicalText(DISPUTE_STATE_REQUIRED_ACTION),\n                },\n                {\n                    value: DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION,\n                    label: this.formatTechnicalText(DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION),\n                },\n                {\n                    value: DISPUTE_STATE_UNDER_PAYPAL_REVIEW,\n                    label: this.formatTechnicalText(DISPUTE_STATE_UNDER_PAYPAL_REVIEW),\n                },\n                {\n                    value: DISPUTE_STATE_RESOLVED,\n                    label: this.formatTechnicalText(DISPUTE_STATE_RESOLVED),\n                },\n                {\n                    value: DISPUTE_STATE_OPEN_INQUIRIES,\n                    label: this.formatTechnicalText(DISPUTE_STATE_OPEN_INQUIRIES),\n                },\n                {\n                    value: DISPUTE_STATE_APPEALABLE,\n                    label: this.formatTechnicalText(DISPUTE_STATE_APPEALABLE),\n                },\n            ],\n            disputeStateFilter: [],\n            salesChannelId: null,\n            total: 0,\n            limit: 10,\n            page: 1,\n            resolutionCenterUrl: 'https://www.paypal.com/resolutioncenter',\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        disputesColumns() {\n            return [\n                {\n                    property: 'dispute_id',\n                    label: this.$tc('swag-paypal-disputes.common.dispute_id'),\n                },\n                {\n                    property: 'update_time',\n                    label: this.$tc('swag-paypal-disputes.common.update_time'),\n                },\n                {\n                    property: 'response_due_date',\n                    label: this.$tc('swag-paypal-disputes.common.response_due_date.label'),\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('swag-paypal-disputes.common.status'),\n                },\n                {\n                    property: 'dispute_life_cycle_stage',\n                    label: this.$tc('swag-paypal-disputes.common.dispute_life_cycle_stage'),\n                },\n                {\n                    property: 'dispute_amount',\n                    label: this.$tc('swag-paypal-disputes.common.dispute_amount'),\n                },\n            ];\n        },\n\n        visibleDisputes() {\n            return this.disputes.slice((this.page - 1) * this.limit, (this.page - 1) * this.limit + this.limit);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            this.systemConfigApiService.getValues('SwagPayPal.settings').then((response) => {\n                if (response['SwagPayPal.settings.sandbox']) {\n                    this.resolutionCenterUrl = 'https://www.sandbox.paypal.com/resolutioncenter';\n                }\n\n                this.getList();\n            });\n        },\n\n        getList() {\n            this.isLoading = true;\n            this.disputes = [];\n            let disputeStateFilter = null;\n            if (this.disputeStateFilter.length > 0) {\n                disputeStateFilter = this.disputeStateFilter.join(',');\n            }\n\n            this.SwagPayPalDisputeApiService.list(this.salesChannelId, disputeStateFilter).then((disputeList) => {\n                if (disputeList.items !== null) {\n                    this.disputes = this.sortDisputes(disputeList.items);\n                }\n                this.total = this.disputes.length;\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        sortDisputes(disputes) {\n            // sort resolved disputes as last\n            disputes.sort((a, b) => {\n                if (a.status === 'RESOLVED') {\n                    return 1;\n                }\n\n                if (b.status === 'RESOLVED') {\n                    return -1;\n                }\n\n                return 0;\n            });\n\n            return disputes;\n        },\n\n        debouncedGetList: debounce(function updateList() {\n            this.getList();\n        }, 850),\n\n        handleError(errorResponse) {\n            const errorDetail = errorResponse.response.data.errors[0].detail;\n            this.createNotificationError({\n                message: `${this.$tc('swag-paypal-disputes.list.errorTitle')}: ${errorDetail}`,\n                autoClose: false,\n            });\n            this.isLoading = false;\n        },\n\n        formatUpdateDate(dateTime) {\n            return this.formatDate(dateTime, {});\n        },\n\n        formatUpdateTime(dateTime) {\n            return this.formatDate(dateTime, {\n                day: undefined,\n                month: undefined,\n                year: undefined,\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n\n        formatTechnicalText(technicalText) {\n            return capitalizeString(technicalText).replace(/_/g, ' ');\n        },\n\n        onPageChange({ page, limit }) {\n            this.page = page;\n            this.limit = limit;\n            this.$emit('page-change');\n        },\n\n        onRefresh() {\n            this.getList();\n        },\n\n        onChangeDisputeStateFilter(value) {\n            this.disputeStateFilter = value;\n            this.debouncedGetList();\n        },\n\n        onSalesChannelChanged(value) {\n            this.salesChannelId = value;\n            this.getList();\n        },\n\n        getExternalDetailPageLink(dispute) {\n            return `${this.resolutionCenterUrl}/${dispute.dispute_id}`;\n        },\n\n        formatDate(dateTime, options = { hour: '2-digit', minute: '2-digit', second: '2-digit' }) {\n            return this.dateFilter(dateTime, options);\n        },\n    },\n});\n","import './acl';\nimport './page/swag-paypal-disputes-detail';\nimport './page/swag-paypal-disputes-list';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal-disputes', {\n    type: 'plugin',\n    name: 'paypal-disputes',\n    title: 'swag-paypal-disputes.general.mainMenuItemGeneral',\n    description: 'swag-paypal-disputes.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#F88962',\n    icon: 'regular-comments',\n    favicon: 'icon-module-customers.png',\n\n    routes: {\n        index: {\n            component: 'swag-paypal-disputes-list',\n            path: 'index',\n            meta: {\n                privilege: 'swag_paypal_disputes.viewer',\n            },\n        },\n\n        detail: {\n            component: 'swag-paypal-disputes-detail',\n            path: 'detail/:disputeId/:salesChannelId?',\n            props: {\n                default(route) {\n                    return {\n                        disputeId: route.params.disputeId,\n                        salesChannelId: route.params.salesChannelId,\n                    };\n                },\n            },\n            meta: {\n                privilege: 'swag_paypal_disputes.viewer',\n                parentPath: 'swag.paypal.disputes.index',\n            },\n        },\n    },\n\n    navigation: [{\n        id: 'swag-paypal-disputes',\n        path: 'swag.paypal.disputes.index',\n        label: 'swag-paypal-disputes.general.mainMenuItemGeneral',\n        parent: 'sw-customer',\n        privilege: 'swag_paypal_disputes.viewer',\n    }],\n});\n","const { Mixin } = Shopware;\n\nMixin.register('swag-paypal-pos-catch-error', {\n    methods: {\n        /**\n         * Creates a notification, if an error has been returned\n         *\n         * @param {string} snippet of the notification\n         * @param {Object} errorResponse\n         */\n        catchError(snippet, errorResponse) {\n            // mixins otherwise don't get i18n\n            this._i18n = this.$root._i18n;\n\n            let message = snippet ? this.$tc(snippet) : '';\n\n            try {\n                if (errorResponse.response.data && errorResponse.response.data.errors) {\n                    const errorText = errorResponse.response.data.errors.map((error) => {\n                        if (error.code === 'SWAG_PAYPAL_POS__EXISTING_POS_ACCOUNT') {\n                            message = this.$tc('swag-paypal-pos.authentication.messageDuplicateError');\n                        }\n\n                        if (error.hasOwnProperty('meta') && error.meta.hasOwnProperty('parameters')) {\n                            if (error.meta.parameters.salesChannelIds) {\n                                return `<br>${error.meta.parameters.salesChannelIds}`;\n                            }\n\n                            if (error.meta.parameters.message) {\n                                return `${error.meta.parameters.message} (${error.meta.parameters.name})`;\n                            }\n\n                            if (error.meta.parameters.name) {\n                                return error.meta.parameters.name;\n                            }\n                        }\n\n                        return error.detail;\n                    }, this).join(' / ');\n\n                    if (errorText) {\n                        message = message ? `${message}: ${errorText}` : errorText;\n                    }\n                }\n            } finally {\n                this.createNotificationError({ message });\n            }\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-locale-field.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"260898dc\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-cross-border.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5cfeb464\", content, true, {});","var map = {\n\t\"./icons-paypal-multicolor.svg\": \"qGzI\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"Fhgz\";","Shopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'swag_paypal',\n    key: 'swag_paypal',\n    roles: {\n        viewer: {\n            privileges: [\n                'sales_channel:read',\n                'sales_channel_payment_method:read',\n                'system_config:read',\n            ],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'sales_channel:update',\n                'sales_channel_payment_method:create',\n                'sales_channel_payment_method:update',\n                'system_config:update',\n                'system_config:create',\n                'system_config:delete',\n            ],\n            dependencies: [\n                'swag_paypal.viewer',\n            ],\n        },\n    },\n});\n\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: null,\n    key: 'sales_channel',\n    roles: {\n        viewer: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:read',\n                'swag_paypal_pos_sales_channel_run:read',\n                'swag_paypal_pos_sales_channel_run:update',\n                'swag_paypal_pos_sales_channel_run:create',\n                'swag_paypal_pos_sales_channel_run_log:read',\n                'sales_channel_payment_method:read',\n            ],\n        },\n        editor: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:update',\n                'swag_paypal_pos_sales_channel_run:delete',\n                'payment_method:update',\n            ],\n        },\n        creator: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:create',\n                'payment_method:create',\n                'shipping_method:create',\n                'delivery_time:create',\n            ],\n        },\n        deleter: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:delete',\n            ],\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-overview.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"30ab2052\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pui-details.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"ebc91690\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-account.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1b887d4e\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-user-card.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5f4a0e60\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-payment-actions-v2.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"759c9f72\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-sync-prices.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"c61efaf2\", content, true, {});","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-continue-setup.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"115ab6a7\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3713717f\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-checkout-method.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4761e0dd\", content, true, {});","const { Mixin } = Shopware;\nconst { debug } = Shopware.Utils;\n\nMixin.register('swag-paypal-credentials-loader', {\n\n    inject: ['SwagPayPalApiCredentialsService'],\n\n    data() {\n        return {\n            isGetCredentialsSuccessful: false,\n            lastOnboardingSandbox: false,\n            nonceLive: `${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,\n            nonceSandbox: `${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,\n            payPalPartnerIdLive: 'DYKPBPEAW5JNA',\n            payPalPartnerClientIdLive: 'AR1aQ13lHxH1c6b3CDd8wSY6SWad2Lt5fv5WkNIZg-qChBoGNfHr2kT180otUmvE_xXtwkgahXUBBurW',\n            payPalPartnerIdSandbox: '45KXQA7PULGAG',\n            payPalPartnerClientIdSandbox: 'AQ9g8qMYHpE8s028VCq_GO3Roy9pjeqGDjKTkR_sxzX0FtncBb3QUWbFtoQMtdpe2lG9NpnDT419dK8s',\n\n            requestParams: {\n                channelId: 'partner',\n                product: 'ppcp',\n                secondaryProducts: 'payment_methods',\n                capabilities: 'PAY_UPON_INVOICE',\n                integrationType: 'FO',\n                features: [\n                    'PAYMENT',\n                    'REFUND',\n                    'READ_SELLER_DISPUTE',\n                    'UPDATE_SELLER_DISPUTE',\n                    'ADVANCED_TRANSACTIONS_SEARCH',\n                    'ACCESS_MERCHANT_INFORMATION',\n                    'TRACKING_SHIPMENT_READWRITE',\n                ],\n                displayMode: 'minibrowser',\n                partnerLogoUrl: 'https://assets.shopware.com/media/logos/shopware_logo_blue.svg',\n            },\n        };\n    },\n\n    computed: {\n        onboardingUrlLive() {\n            const params = this.createRequestParameter({\n                partnerId: this.payPalPartnerIdLive,\n                partnerClientId: this.payPalPartnerClientIdLive,\n                returnToPartnerUrl: this.returnUrl(),\n                sellerNonce: this.nonceLive,\n            });\n\n            return `https://www.paypal.com/bizsignup/partner/entry?${params.toString()}`;\n        },\n        onboardingUrlSandbox() {\n            const params = this.createRequestParameter({\n                partnerId: this.payPalPartnerIdSandbox,\n                partnerClientId: this.payPalPartnerClientIdSandbox,\n                returnToPartnerUrl: this.returnUrl(),\n                sellerNonce: this.nonceSandbox,\n            });\n\n            return `https://www.sandbox.paypal.com/bizsignup/partner/entry?${params.toString()}`;\n        },\n    },\n\n    created() {\n        this.$root.$on('paypal-onboarding-finish', this.getPayPalCredentials);\n        window.onboardingCallbackLive = function onboardingCallback(authCode, sharedId) {\n            Shopware.Application.getApplicationRoot().$emit(\n                'paypal-onboarding-finish',\n                { authCode, sharedId, sandbox: false },\n            );\n        };\n        window.onboardingCallbackSandbox = function onboardingCallbackSandbox(authCode, sharedId) {\n            Shopware.Application.getApplicationRoot().$emit(\n                'paypal-onboarding-finish',\n                { authCode, sharedId, sandbox: true },\n            );\n        };\n    },\n\n    mounted() {\n        this.createScript();\n    },\n\n    destroyed() {\n        this.$root.$off('paypal-onboarding-finish');\n    },\n\n    methods: {\n        returnUrl() {\n            return `${window.location.origin}${window.location.pathname}#${this.$route.path}`;\n        },\n\n        createRequestParameter(config = {}) {\n            const params = { ...this.requestParams, ...config };\n            return Object.keys(params).reduce((accumulator, key) => {\n                let value = params[key];\n\n                if (Array.isArray(value)) {\n                    value = value.join(',');\n                }\n                accumulator.append(key, value);\n\n                return accumulator;\n            }, new URLSearchParams());\n        },\n\n        createScript() {\n            const id = 'paypal-js';\n            if (!document.getElementById(id)) {\n                const payPalScriptUrl = 'https://www.paypal.com/webapps/merchantboarding/js/lib/lightbox/partner.js';\n                const payPalScript = document.createElement('script');\n                payPalScript.id = id;\n                payPalScript.type = 'text/javascript';\n                payPalScript.src = payPalScriptUrl;\n                payPalScript.async = true;\n                payPalScript.addEventListener('load', this.renderPayPalButton.bind(this), false);\n\n                document.head.appendChild(payPalScript);\n            } else if (window.PAYPAL) {\n                this.renderPayPalButton();\n            }\n        },\n\n        renderPayPalButton() {\n            // The original render function inside the partner.js is overwritten here.\n            // The function gets overwritten again, as soon as PayPals signup.js is loaded.\n            // A loop is created and the render() function is executed until the real render() function is available.\n            // PayPal does originally nearly the same, but only once and not in a loop.\n            // If the signup.js is loaded to slow the button is not rendered.\n            window.PAYPAL.apps.Signup.render = function proxyPPrender() {\n                if (window.PAYPAL.apps.Signup.timeout) {\n                    clearTimeout(window.PAYPAL.apps.Signup.timeout);\n                }\n\n                window.PAYPAL.apps.Signup.timeout = setTimeout(window.PAYPAL.apps.Signup.render, 300);\n            };\n\n            window.PAYPAL.apps.Signup.render();\n        },\n\n        getPayPalCredentials({ authCode, sharedId, sandbox }) {\n            if (this.isLoading) {\n                return Promise.resolve(false);\n            }\n\n            this.isGetCredentialsSuccessful = null;\n            this.lastOnboardingSandbox = sandbox;\n\n            this.$emit('on-change-loading', true);\n\n            return this.SwagPayPalApiCredentialsService.getApiCredentials(\n                authCode,\n                sharedId,\n                sandbox ? this.nonceSandbox : this.nonceLive,\n                sandbox,\n            ).then((response) => {\n                this.isGetCredentialsSuccessful = true;\n                this.onPayPalCredentialsLoadSuccess(response.client_id, response.client_secret, response.payer_id, sandbox);\n            }).catch(() => {\n                this.isGetCredentialsSuccessful = false;\n                this.onPayPalCredentialsLoadFailed(sandbox);\n            }).finally(() => {\n                this.$emit('on-change-loading', false);\n            });\n        },\n\n        /**\n         *\n         * @param clientId string\n         * @param clientSecret string\n         * @param merchantPayerId string\n         * @param sandbox bool\n         */\n        onPayPalCredentialsLoadSuccess() {\n            // needs to be implemented by using component\n            debug.warn(\n                'swag-paypal-credentials-loader Mixin',\n                'When using the paypal-credentials-loader mixin ' +\n                'you have to implement your custom \"onPayPalCredentialsLoadSuccess()\" method.',\n            );\n        },\n\n        /**\n         *\n         * @param sandbox bool\n         */\n        onPayPalCredentialsLoadFailed() {\n            // needs to be implemented by using component\n            debug.warn(\n                'swag-paypal-credentials-loader Mixin',\n                'When using the paypal-credentials-loader mixin ' +\n                'you have to implement your custom \"onPayPalCredentialsLoadFailed()\" method.',\n            );\n        },\n    },\n});\n","Shopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'swag_paypal',\n    key: 'swag_paypal_disputes',\n    roles: {\n        viewer: {\n            privileges: [\n                'sales_channel:read',\n            ],\n            dependencies: [],\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-customization.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"acc054a0\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-disputes-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1884277b\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-payment-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"8b9a46aa\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-checkout.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"18efdb1e\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-status.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"f2b11c68\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-payment-actions.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2013d721\", content, true, {});","const { Component } = Shopware;\n\nComponent.extend('swag-paypal-pos-url-field', 'sw-url-field', {\n    methods: {\n        changeMode() {\n            // override, so no disabling of SSL is possible\n        },\n\n        getSSLMode() {\n            // override, so no disabling of SSL is possible\n            return true;\n        },\n    },\n});\n","const { Mixin } = Shopware;\n\nMixin.register('swag-paypal-pos-log-label', {\n    methods: {\n        /**\n         * Returns the corresponding sw-label variant for a Zettle log\n         *\n         * @param {Number} level\n         * @returns {string}\n         */\n        getLabelVariant(level) {\n            if (level >= 400) {\n                return 'danger';\n            }\n\n            if (level >= 300) {\n                return 'warning';\n            }\n\n            if (level > 200) {\n                return 'info';\n            }\n\n            return 'success';\n        },\n\n        /**\n         * Returns the corresponding translation path for a Zettle log\n         *\n         * @param {Number} level\n         * @returns {string}\n         */\n        getLabel(level) {\n            if (level >= 300) {\n                return 'swag-paypal-pos.detail.logs.states.failed';\n            }\n\n            return 'swag-paypal-pos.detail.logs.states.success';\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-boolean-radio.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"56bf7004\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-sync-library.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1190b180\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1399af82\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-disputes-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"46b6aa18\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-finish.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2ce3cdbc\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-synced-products.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"b786f766\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-payment-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2da2da44\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-logs.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7066859f\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-plus.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a6013276\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-connection-success.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4ea3963f\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"f404ff14\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-first-run-wizard-paypal-credentials.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"061f1a9a\", content, true, {});","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"40\\\" viewBox=\\\"0 0 48 48\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><path fill=\\\"#013088\\\" d=\\\"M1.36196923,45.9634625 C0.525969231,45.9634625 -0.113723077,45.2159 0.0165846154,44.3907125 L6.62843077,2.599775 C6.80104615,1.4978375 7.75381538,0.6878375 8.87073846,0.6878375 L24.7445846,0.6878375 C30.2124308,0.6878375 34.4855077,1.8387125 36.8530462,4.5269 C39.0005846,6.9687125 39.6284308,9.6653375 39.0056615,13.6259 C39.8924308,14.0946875 40.6522769,14.670125 41.2648923,15.3636875 C43.2888923,17.66375 43.6848923,20.934125 42.9199692,24.8508125 C41.0888923,34.2265625 34.8239692,37.4665625 26.8210462,37.4665625 L25.5856615,37.4665625 C24.6075077,37.4665625 23.7748923,38.1753125 23.6225846,39.1405625 L23.5227385,39.6805625 L21.9675077,49.5220625 L21.8862769,49.9405625 C21.7322769,50.9024375 20.9013538,51.6111875 19.9232,51.6111875 L11.6630462,51.6111875 C10.9319692,51.6111875 10.3735077,50.9598125 10.4868923,50.2375625 L11.1620698,45.9634625 L1.36196923,45.9634625 Z\\\"></path><path fill=\\\"#019CDE\\\" d=\\\"M39.0039692,13.6255625 C38.9565846,13.927625 38.9024308,14.2364375 38.8415077,14.5536875 C36.7481231,25.271 29.5862769,28.973375 20.4393538,28.973375 L15.7821231,28.973375 C14.6635077,28.973375 13.7208923,29.783375 13.5465846,30.883625 L11.1621231,45.963125 L10.4868923,50.2375625 C10.3735077,50.9598125 10.9319692,51.6111875 11.6630462,51.6111875 L19.9232,51.6111875 C20.9013538,51.6111875 21.7322769,50.9024375 21.8862769,49.9405625 L21.9675077,49.5220625 L23.5227385,39.6805625 L23.6225846,39.1405625 C23.7748923,38.1753125 24.6075077,37.4665625 25.5856615,37.4665625 L26.8210462,37.4665625 C34.8239692,37.4665625 41.0888923,34.2265625 42.9199692,24.8508125 C43.6848923,20.934125 43.2888923,17.66375 41.2648923,15.3636875 C40.6522769,14.670125 39.8924308,14.0946875 39.0039692,13.6255625\\\"></path><path fill=\\\"#012269\\\" d=\\\"M36.8142923,12.7546437 C36.4944462,12.6618312 36.1644462,12.5774562 35.8259846,12.5015187 C35.4858308,12.4272687 35.1372154,12.3614562 34.7784462,12.3040812 C33.5227538,12.1015812 32.1469077,12.0053937 30.6729077,12.0053937 L18.2310615,12.0053937 C17.9247538,12.0053937 17.6336769,12.0745812 17.3730615,12.1994562 C16.7993692,12.4745187 16.3729077,13.0162062 16.2696769,13.6793937 L13.6229077,30.3957687 L13.5467538,30.8834562 C13.7210615,29.7832062 14.6636769,28.9732062 15.7822923,28.9732062 L20.4395231,28.9732062 C29.5864462,28.9732062 36.7482923,25.2691437 38.8416769,14.5535187 C38.9042923,14.2362687 38.9567538,13.9274562 39.0041385,13.6253937 C38.4744462,13.3452687 37.9007538,13.1056437 37.2830615,12.9014562 C37.1307538,12.8508312 36.9733692,12.8018937 36.8142923,12.7546437\\\"></path></g></svg>\"","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-settings-icon.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5c31fefc\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-connection-disconnect.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"e81588d0\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-sales-channel-modal-grid.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1457a75d\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-settings.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"b74f11a6\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-shipping-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"207a12ef\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-connection.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"27be7dbe\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-runs.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"89bf0ef0\", content, true, {});"],"sourceRoot":""}